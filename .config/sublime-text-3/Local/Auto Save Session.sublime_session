{
	"folder_history":
	[
		"/home/lfxpaul/dev/vtk/vtk1/vtk",
		"/home/lfxpaul/dev/pv1/paraview",
		"/home/lfxpaul/dev/vtk/vtk2/vtk",
		"/home/lfxpaul/dev/vtk/vtk3/vtk",
		"/home/lfxpaul/dev/pv2/paraview",
		"/home/lfxpaul/Downloads/VW_Issue_24_RayTracing_in_591",
		"/home/lfxpaul/Downloads/RayTracingIn591_files",
		"/home/lfxpaul/dev/pv4/paraview",
		"/home/lfxpaul/Downloads/ParametricSurfaces",
		"/home/lfxpaul/dev/vtk/vtk82/vtk",
		"/home/lfxpaul/dev/pv4/paraview/VTK",
		"/home/lfxpaul/dev/pv3/paraview",
		"/home/lfxpaul",
		"/home/lfxpaul/dev/data/PBR/devExamples/clearCoat",
		"/home/lfxpaul/dev/data/models",
		"/home/lfxpaul/Downloads/ceos-systeme",
		"/home/lfxpaul/pro/KEUFirewall-UDP4-1194-paul.lafoix",
		"/home/lfxpaul/dev/AR/pluraview",
		"/home/lfxpaul/Downloads/Shadows",
		"/home/lfxpaul/dev/data/models/motorBike",
		"/home/lfxpaul/perso/dev",
		"/home/lfxpaul/perso/dev/ResultTP2",
		"/home/lfxpaul/dev/notes",
		"/home/lfxpaul/dev/data/audi/transluency",
		"/home/lfxpaul/dev/data/audi/surface_lic_test_5.9.0",
		"/home/lfxpaul/dev/pv1"
	],
	"last_version": 3211,
	"last_window_id": 86,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"vtkOS",
						"vtkOSPRayVolumeMapperNode"
					],
					[
						"GetNum",
						"GetNumberOfVisibleDataObjects"
					],
					[
						"Updae",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"inform",
						"information_only"
					],
					[
						"def",
						"default_values"
					],
					[
						"Selec",
						"SelectionRepresentation\t  vtkSelectionRepresentation *"
					],
					[
						"Get",
						"GetVTKClassName()\t  char *"
					],
					[
						"Update",
						"UpdateSelfAndAllInputs()\t  void"
					],
					[
						"Rende",
						"RenderWidget"
					],
					[
						"Upd",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"vi",
						"isVisible() const\t  bool"
					],
					[
						"update",
						"updateEnabledState()\t  void"
					],
					[
						"pqMulti",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"rend",
						"renderViewEventually()\t  void"
					],
					[
						"pqMul",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"Q_S",
						"Q_SIGNALS\t  Text"
					],
					[
						"repr",
						"pqDataRepresentation\t  Class"
					],
					[
						"repre",
						"representationChanged"
					],
					[
						"vtkSMP",
						"vtkSMPropertyHelper"
					],
					[
						"visi",
						"visibleDataBounds2\t  double [6]"
					],
					[
						"GetVisi",
						"GetVisibleDataBounds()\t  double *"
					],
					[
						"Compute",
						"ComputeVisibleDataBounds"
					],
					[
						"vtkGeom",
						"vtkGeometryRepresentation.h\"\t  File"
					],
					[
						"vtkPVCom",
						"vtkPVCompositeRepresentation.h\"\t  File"
					],
					[
						"GetName",
						"GetXMLName()\t  char *"
					],
					[
						"vtkSMProper",
						"vtkSMPropertyHelper\t  Class"
					],
					[
						"GetREp",
						"getRepresentation(int index) const\t  pqRepresentation *"
					],
					[
						"getNum",
						"getNumberOfOutputPorts() const\t  int"
					],
					[
						"GetRe",
						"getRepresentations(…)\t  [2 overloads]"
					],
					[
						"getRep",
						"getNumberOfVisibleRepresentations() const\t  int"
					],
					[
						"Remo",
						"RemoveAllVariables"
					],
					[
						"index",
						"QModelIndexList"
					],
					[
						"pqCam",
						"pqCameraToolbar\t  Class"
					],
					[
						"gfV",
						"gfVTK_"
					]
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"wor",
						"Word Wrap: Toggle"
					],
					[
						"wo",
						"Word Wrap: Toggle"
					],
					[
						"w",
						"Word Wrap: Toggle"
					],
					[
						"bla",
						"Git Blame: Erase All"
					],
					[
						"blam",
						"Git Blame: Show All"
					],
					[
						"side",
						"View: Toggle Side Bar"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"syntax mark",
						"Set Syntax: MultiMarkdown"
					],
					[
						"mar",
						"Set Syntax: Markdown"
					],
					[
						"color",
						"MarkdownEditing: Change color scheme..."
					],
					[
						"synta",
						"Set Syntax: C++"
					],
					[
						"close",
						"File: Close All"
					],
					[
						"markdow sy",
						"Set Syntax: Markdown GFM"
					],
					[
						"markdown sy",
						"Set Syntax: Markdown"
					],
					[
						"markdown",
						"MarkdownEditing: Open Journal"
					],
					[
						"syntax mar",
						"Set Syntax: Markdown GFM"
					],
					[
						"mark",
						"Set Syntax: Markdown"
					],
					[
						"instal",
						"Package Control: Install Package"
					]
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMMaterialLibraryProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspector.xml",
				"/home/lfxpaul/dev/pv1/paraview/Examples/Catalyst2/CxxMultimesh/catalyst_pipeline.py",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMPVRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/EmbossingRepresentations/Representations/vtkBumpMapRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMChartSeriesSelectionDomain.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/LagrangianParticleTracker/pqIntegrationModelSurfaceHelperWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataInformationModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqApplyBehavior.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqServer.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestCategoricalMultiBlock.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/Resources/views_and_representations.xml",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.h",
				"/tmp/mozilla_lfxpaul0/vtkSPOSFix.txx",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestCameraWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMSourceProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositePolyDataMapper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/DataModel/vtkCompositeDataSet.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithmOutput.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/Resources/UI/pqMultiBlockInspectorWidget.ui",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqDataAssemblyPropertyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqCameraToolbar.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkView.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqView.cxx",
				"/home/lfxpaul/dev/notes/CEA.md",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Widgets/pqLineEdit.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestResliceCursorWidget3.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayStereo.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/OpenGL2/vtkOpenGLRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/ServerManager/vtkSMBoundsDomain.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/Core/vtkInformationKey.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Clients/ParaView/Testing/Python/TestStereoSaveScreenshot.py",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkStereoCompositor.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Components/pqDoubleVectorPropertyWidget.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.h",
				"/home/lfxpaul/dev/data/pbr/dirToAngle.py",
				"/home/lfxpaul/dev/notes/zSpace/HomePage.md"
			],
			"find":
			{
				"height": 52.0
			},
			"find_in_files":
			{
				"height": 168.0,
				"where_history":
				[
					"VTK/Rendering/OpenVR/*"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"VTKRenderModels"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 24.0
			},
			"input":
			{
				"height": 50.0
			},
			"menu_visible": true,
			"output.diagnostics":
			{
				"height": 185.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 44.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"vtkOpenVRREnderW",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"materialEditor.md",
						"Documentation/release/dev/OSPRayMaterialEditor.md"
					],
					[
						".gitlab/ci/excl",
						".gitlab/ci/ctest_exclusions.cmake"
					],
					[
						"vtkOpen",
						"CMake/vtkOpenGLOptions.cmake"
					],
					[
						"Interaction Style Python Cma",
						"Interaction/Style/Testing/Python/CMakeLists.txt"
					],
					[
						"TestDragon",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"TestAvatar",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestAvatar.cxx"
					],
					[
						"vvtkOpenVRRenderWi",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"TestDrago",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"vtkVolumeProp",
						"VTK/Rendering/Core/vtkVolumeProperty.cxx"
					],
					[
						"vtkVolu",
						"Remoting/Views/vtkVolumeRepresentation.cxx"
					],
					[
						"vtkDataArr",
						"VTK/Common/Core/vtkDataArray.cxx"
					],
					[
						"vtkSMSEssionCl",
						"Remoting/ServerManager/vtkSMSessionClient.cxx"
					],
					[
						"vtkPVCOmpo",
						"Remoting/Views/vtkPVCompositeRepresentation.cxx"
					],
					[
						"vtkPythonVIew",
						"Remoting/ViewsPython/vtkPythonView.cxx"
					],
					[
						"pqC",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkClientServerSt",
						"Remoting/ClientServerStream/vtkClientServerStream.cxx"
					],
					[
						"vtkSMRender",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqCame",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeome",
						"Remoting/Views/vtkGeometryRepresentation.cxx"
					],
					[
						"vtkContext2DScal",
						"Remoting/Views/vtkContext2DScalarBarActor.cxx"
					],
					[
						"vtkCamera",
						"VTK/Rendering/Core/vtkCamera.cxx"
					],
					[
						"vtkSIProper",
						"Remoting/ServerManager/vtkSIProperty.cxx"
					],
					[
						"vtkSI",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIInt",
						"Remoting/ServerManager/vtkSIIntVectorProperty.h"
					],
					[
						"vtkSIIndexS",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIProx",
						"Remoting/ServerManager/vtkSIProxy.h"
					],
					[
						"vtkSIP",
						"Remoting/ServerManager/vtkSIProperty.h"
					],
					[
						"vtkSIDataA",
						"Remoting/ServerManager/vtkSIDataArrayProperty.h"
					],
					[
						"vtkPVDataR",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkPVCompo",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProx",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkDataRepre",
						"VTK/Views/Core/vtkDataRepresentation.h"
					],
					[
						"vtkPVDataRepres",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeR",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkPVCompos",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProperty",
						"Remoting/ServerManager/vtkSMProperty.cxx"
					],
					[
						"vtkPVVIew",
						"Remoting/Views/vtkPVView.cxx"
					],
					[
						"pqCam",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkCompositeDataD",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkDataAsse",
						"VTK/Common/DataModel/vtkDataAssemblyUtilities.cxx"
					],
					[
						"pqCamera",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqMul",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"pqCameraT",
						"Qt/ApplicationComponents/Resources/UI/pqCameraToolbar.ui"
					],
					[
						"vtkVectorO",
						"VTK/Common/DataModel/vtkVectorOperators.h"
					],
					[
						"vtkVector",
						"VTK/Common/DataModel/vtkVector.h"
					],
					[
						"TemporalPa",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkTemporalPat",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkStaticCellLo",
						"VTK/Common/DataModel/vtkStaticCellLocator.h"
					],
					[
						"vtkCompo",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSelect",
						"Remoting/Views/vtkSelectionRepresentation.h"
					],
					[
						"TestParaView",
						"Remoting/Views/Testing/Cxx/TestParaViewPipelineControllerWithRendering.cxx"
					],
					[
						"vtkRotation",
						"VTK/Filters/General/vtkRotationFilter.h"
					],
					[
						"pqCamer",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeom",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVRende",
						"Remoting/Views/vtkPVRenderView.cxx"
					],
					[
						"vtkOsprayRender",
						"VTK/Rendering/RayTracing/vtkOSPRayRendererNode.cxx"
					],
					[
						"TestOsprayP",
						"VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayPass.cxx"
					],
					[
						"vtkOSPRAYMA",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialHelpers.cxx"
					],
					[
						"QVTKOpen",
						"VTK/GUISupport/Qt/QVTKOpenGLNativeWidget.h"
					],
					[
						"pqMate",
						"Qt/ApplicationComponents/Resources/UI/pqMaterialEditor.ui"
					],
					[
						"vtkShaderBal",
						"VTKExtensions/Rendering/vtkShaderBallScene.h"
					],
					[
						"pqMateri",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMMa",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"WriterFac",
						"Remoting/ServerManager/vtkSMWriterFactory.h"
					],
					[
						"pqSaveData",
						"Qt/ApplicationComponents/pqSaveDataReaction.cxx"
					],
					[
						"vtkOSprayMat",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialLibrary.cxx"
					],
					[
						"vtkSMMateri",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"pqMateria",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMP",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkSMSource",
						"Remoting/ServerManager/vtkSMSourceProxy.h"
					],
					[
						"vtkSMRepre",
						"Remoting/Views/vtkSMRepresentationProxy.h"
					],
					[
						"vtkRenderWIndowInt",
						"Rendering/Core/vtkRenderWindowInteractor3D.cxx"
					],
					[
						"vtkOpenVRRenderW",
						"Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h"
					],
					[
						"vtkRenderWindowInteract",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkRenderWIndowInte",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkInteractorOb",
						"Rendering/Core/vtkInteractorObserver.h"
					],
					[
						"vtkInteractorStyle.",
						"Rendering/Core/vtkInteractorStyle.cxx"
					],
					[
						"TestPBR",
						"Rendering/OpenGL2/Testing/Cxx/TestPBRAnisotropy.cxx"
					],
					[
						"Renderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderWindowInte",
						"Rendering/Core/vtkRenderWindowInteractor.h"
					],
					[
						"vtkInteractorStyleCame",
						"Interaction/Style/vtkInteractorStyleTrackballCamera.h"
					],
					[
						"vtkInteractorStyleTra",
						"Interaction/Style/vtkInteractorStyleTrackball.h"
					],
					[
						"Multiblock",
						"Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml"
					],
					[
						"t",
						"~/dev/pv1/build/t.xml"
					],
					[
						"vtkSMRenderV",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqAc",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqAct",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqRep",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqDataR",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqDataRp",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqMutli",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"views and",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"Zoom",
						"Clients/ParaView/Testing/XML/ZoomClosest.xml"
					],
					[
						"t.xm",
						"~/dev/pv1/build/t.xml"
					],
					[
						"pqProxyWid",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqBasic",
						"ThirdParty/QtTesting/vtkqttesting/pqBasicWidgetEventPlayer.cxx"
					],
					[
						"pqMulti",
						"Qt/Components/pqMultiBlockInspectorWidget.h"
					],
					[
						"pqEventPl",
						"ThirdParty/QtTesting/vtkqttesting/pqEventPlayer.cxx"
					],
					[
						".xml",
						"Clients/ParaView/Testing/XML/Flow.xml"
					],
					[
						"PBR xml",
						"Clients/ParaView/Testing/XML/ClearCoatPBR.xml"
					],
					[
						"PBR.xml",
						"Clients/ParaView/Testing/XML/EdgeTintPBR.xml"
					],
					[
						"pqFind",
						"Qt/ApplicationComponents/pqFindDataWidget.h"
					],
					[
						"pqActiveO",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqProxyWi",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqProx",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqActi",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqRepse",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqActive",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"views and re",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"views and repre",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"pqDataRe",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqCameraTo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"MultiblockInspe",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"vtkPVGeome",
						"VTKExtensions/FiltersRendering/vtkPVGeometryFilter.cxx"
					],
					[
						"vtkAlgo",
						"VTK/Common/ExecutionModel/vtkAlgorithm.h"
					],
					[
						"vtkSMLink",
						"Remoting/ServerManager/vtkSMLink.h"
					],
					[
						"pqLinkM",
						"Qt/Core/pqLinksModel.h"
					],
					[
						"pqLink",
						"Qt/Components/pqLinksManager.h"
					],
					[
						"vtkPVIn",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVDataInfo",
						"Remoting/Core/vtkPVDataInformation.h"
					],
					[
						"vtkSMMaterial",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"vtkCompositeDataDispl",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkGeometryR",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetGe",
						"VTK/Common/Core/vtkSetGet.h"
					],
					[
						"vtkSMProp",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"vtkPVComp",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 495.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"vtkOS",
						"vtkOSPRayVolumeMapperNode"
					],
					[
						"GetNum",
						"GetNumberOfVisibleDataObjects"
					],
					[
						"Updae",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"inform",
						"information_only"
					],
					[
						"def",
						"default_values"
					],
					[
						"Selec",
						"SelectionRepresentation\t  vtkSelectionRepresentation *"
					],
					[
						"Get",
						"GetVTKClassName()\t  char *"
					],
					[
						"Update",
						"UpdateSelfAndAllInputs()\t  void"
					],
					[
						"Rende",
						"RenderWidget"
					],
					[
						"Upd",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"vi",
						"isVisible() const\t  bool"
					],
					[
						"update",
						"updateEnabledState()\t  void"
					],
					[
						"pqMulti",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"rend",
						"renderViewEventually()\t  void"
					],
					[
						"pqMul",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"Q_S",
						"Q_SIGNALS\t  Text"
					],
					[
						"repr",
						"pqDataRepresentation\t  Class"
					],
					[
						"repre",
						"representationChanged"
					],
					[
						"vtkSMP",
						"vtkSMPropertyHelper"
					],
					[
						"visi",
						"visibleDataBounds2\t  double [6]"
					],
					[
						"GetVisi",
						"GetVisibleDataBounds()\t  double *"
					],
					[
						"Compute",
						"ComputeVisibleDataBounds"
					],
					[
						"vtkGeom",
						"vtkGeometryRepresentation.h\"\t  File"
					],
					[
						"vtkPVCom",
						"vtkPVCompositeRepresentation.h\"\t  File"
					],
					[
						"GetName",
						"GetXMLName()\t  char *"
					],
					[
						"vtkSMProper",
						"vtkSMPropertyHelper\t  Class"
					],
					[
						"GetREp",
						"getRepresentation(int index) const\t  pqRepresentation *"
					],
					[
						"getNum",
						"getNumberOfOutputPorts() const\t  int"
					],
					[
						"GetRe",
						"getRepresentations(…)\t  [2 overloads]"
					],
					[
						"getRep",
						"getNumberOfVisibleRepresentations() const\t  int"
					],
					[
						"Remo",
						"RemoveAllVariables"
					],
					[
						"index",
						"QModelIndexList"
					],
					[
						"pqCam",
						"pqCameraToolbar\t  Class"
					],
					[
						"gfV",
						"gfVTK_"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/.gitignore",
					"settings":
					{
						"buffer_size": 343,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRInteractorStyle.cxx",
					"settings":
					{
						"buffer_size": 41480,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRRenderWindowInteractor.cxx",
					"settings":
					{
						"buffer_size": 40569,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRRenderWindowInteractor.h",
					"settings":
					{
						"buffer_size": 6912,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 55 files for \"ConvertPoseToWorldCoord\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRInteractorStyle.cxx:\n  445    double wdir[3];\n  446    vr::TrackedDevicePose_t& tdPose = renWin->GetTrackedDevicePose(cmodel->TrackedDevice);\n  447:   iren->ConvertPoseToWorldCoordinates(tdPose, p0, wxyz, dummy_ppos, wdir);\n  448  \n  449    this->HardwarePicker->PickProp(p0, wxyz, ren, ren->GetViewProps(), actorPassOnly);\n  ...\n 1116    double wdir[3];\n 1117    vr::TrackedDevicePose_t& tdPose = renWin->GetTrackedDevicePose(mod->TrackedDevice);\n 1118:   iren->ConvertPoseToWorldCoordinates(tdPose, p0, wxyz, dummy_ppos, wdir);\n 1119  \n 1120    // Compute ray length.\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.cxx:\n  119  }\n  120  \n  121: void vtkOpenVRRenderWindowInteractor::ConvertPoseToWorldCoordinates(\n  122    const vr::TrackedDevicePose_t& tdPose,\n  123    double pos[3],  // Output world position\n  ...\n  365          double wxyz[4] = { 0.0 };\n  366          double wdir[3] = { 0.0 };\n  367:         this->ConvertPoseToWorldCoordinates(\n  368            this->Trackers[tracker].LastPose, pos, wxyz, ppos, wdir);\n  369          vtkNew<vtkEventDataDevice3D> ed;\n  ...\n  477            {\n  478              edp->SetDevice(vtkEventDataDevice::LeftController);\n  479:             this->ConvertPoseToWorldCoordinates(this->Trackers[0].LastPose, pos, wxyz, ppos, wdir);\n  480            }\n  481            if (originInfo.devicePath == this->Trackers[RightHand].Source)\n  482            {\n  483              edp->SetDevice(vtkEventDataDevice::RightController);\n  484:             this->ConvertPoseToWorldCoordinates(this->Trackers[1].LastPose, pos, wxyz, ppos, wdir);\n  485            }\n  486            // edp->SetInput(originInfo.);\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h:\n  109     * \\param wdir Output world view direction (-Z)\n  110     */\n  111:   void ConvertPoseToWorldCoordinates(const vr::TrackedDevicePose_t& tdPose, double pos[3],\n  112      double wxyz[4], double ppos[3], double wdir[3]);\n  113  \n\n7 matches across 3 files\n\n\nSearching 55 files for \"vtkOpenVRPanel\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/CMakeLists.txt:\n   13    vtkOpenVRModel\n   14    vtkOpenVROverlay\n   15:   vtkOpenVRPanelRepresentation\n   16:   vtkOpenVRPanelWidget\n   17    vtkOpenVRRay\n   18    vtkOpenVRRenderWindow\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRControlsHelper.h:\n   19   *\n   20   * @sa\n   21:  * vtkOpenVRPanelRepresentation\n   22   */\n   23  \n   ..\n   76    //@{\n   77    /**\n   78:    * Methods to interface with the vtkOpenVRPanelWidget.\n   79     */\n   80    void BuildRepresentation();\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRMenuRepresentation.h:\n   15  /**\n   16   * @class   vtkOpenVRMenuRepresentation\n   17:  * @brief   Widget representation for vtkOpenVRPanelWidget\n   18   * Implementation of the popup panel representation for the\n   19:  * vtkOpenVRPanelWidget.\n   20   * This representation is rebuilt every time the selected/hovered prop changes.\n   21   * Its position is set according to the camera orientation and is placed at a\n   ..\n   59    //@{\n   60    /**\n   61:    * Methods to interface with the vtkOpenVRPanelWidget.\n   62     */\n   63    void BuildRepresentation() override;\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRPanelRepresentation.cxx:\n    2  \n    3  Program:   Visualization Toolkit\n    4: Module:    vtkOpenVRPanelRepresentation.cxx\n    5  \n    6  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n    .\n   13  \n   14  =========================================================================*/\n   15: #include \"vtkOpenVRPanelRepresentation.h\"\n   16  \n   17  #include \"vtkCamera.h\"\n   ..\n   34  // - add option to remove crop planes\n   35  \n   36: vtkStandardNewMacro(vtkOpenVRPanelRepresentation);\n   37  \n   38  //------------------------------------------------------------------------------\n   39: vtkOpenVRPanelRepresentation::vtkOpenVRPanelRepresentation()\n   40  {\n   41    this->TextActor = vtkTextActor3D::New();\n   ..\n   56    prop->SetFontSize(25);\n   57  \n   58:   this->InteractionState = vtkOpenVRPanelRepresentation::Outside;\n   59    this->CoordinateSystem = World;\n   60    this->AllowAdjustment = true;\n   ..\n   62  \n   63  //------------------------------------------------------------------------------\n   64: vtkOpenVRPanelRepresentation::~vtkOpenVRPanelRepresentation()\n   65  {\n   66    this->TextActor->Delete();\n   67  }\n   68  \n   69: void vtkOpenVRPanelRepresentation::SetCoordinateSystemToWorld()\n   70  {\n   71    if (this->CoordinateSystem == World)\n   ..\n   78  }\n   79  \n   80: void vtkOpenVRPanelRepresentation::SetCoordinateSystemToHMD()\n   81  {\n   82    if (this->CoordinateSystem == HMD)\n   ..\n   88  }\n   89  \n   90: void vtkOpenVRPanelRepresentation::SetCoordinateSystemToLeftController()\n   91  {\n   92    if (this->CoordinateSystem == LeftController)\n   ..\n   98  }\n   99  \n  100: void vtkOpenVRPanelRepresentation::SetCoordinateSystemToRightController()\n  101  {\n  102    if (this->CoordinateSystem == RightController)\n  ...\n  108  }\n  109  \n  110: int vtkOpenVRPanelRepresentation::ComputeComplexInteractionState(\n  111    vtkRenderWindowInteractor*, vtkAbstractWidget*, unsigned long, void* calldata, int)\n  112  {\n  113:   if (!this->AllowAdjustment || this->InteractionState == vtkOpenVRPanelRepresentation::Moving)\n  114    {\n  115      return this->InteractionState;\n  ...\n  131        pos[1] < bds[3] + tolerance && pos[2] > bds[4] - tolerance && pos[2] < bds[5] + tolerance)\n  132      {\n  133:       this->InteractionState = vtkOpenVRPanelRepresentation::Moving;\n  134      }\n  135      else\n  136      {\n  137:       this->InteractionState = vtkOpenVRPanelRepresentation::Outside;\n  138      }\n  139    }\n  ...\n  142  }\n  143  \n  144: void vtkOpenVRPanelRepresentation::StartComplexInteraction(\n  145    vtkRenderWindowInteractor*, vtkAbstractWidget*, unsigned long, void* calldata)\n  146  {\n  ...\n  159  }\n  160  \n  161: void vtkOpenVRPanelRepresentation::ComplexInteraction(\n  162    vtkRenderWindowInteractor*, vtkAbstractWidget*, unsigned long, void* calldata)\n  163  {\n  ...\n  172  \n  173      // Process the motion\n  174:     if (this->InteractionState == vtkOpenVRPanelRepresentation::Moving)\n  175      {\n  176        // this->TranslateOutline(this->LastEventPosition, eventPos);\n  ...\n  187  }\n  188  \n  189: void vtkOpenVRPanelRepresentation::EndComplexInteraction(\n  190    vtkRenderWindowInteractor*, vtkAbstractWidget*, unsigned long, void*)\n  191  {\n  192:   this->InteractionState = vtkOpenVRPanelRepresentation::Outside;\n  193  }\n  194  \n  195  //------------------------------------------------------------------------------\n  196  // Loop through all points and translate and rotate them\n  197: void vtkOpenVRPanelRepresentation::UpdatePose(\n  198    double* p1, double* orient1, double* p2, double* orient2)\n  199  {\n  ...\n  329  \n  330  //------------------------------------------------------------------------------\n  331: void vtkOpenVRPanelRepresentation::ReleaseGraphicsResources(vtkWindow* w)\n  332  {\n  333    this->TextActor->ReleaseGraphicsResources(w);\n  ...\n  335  \n  336  //------------------------------------------------------------------------------\n  337: void vtkOpenVRPanelRepresentation::ComputeMatrix(vtkRenderer* ren)\n  338  {\n  339    // check whether or not need to rebuild the matrix\n  ...\n  395  \n  396  //------------------------------------------------------------------------------\n  397: int vtkOpenVRPanelRepresentation::RenderOpaqueGeometry(vtkViewport* v)\n  398  {\n  399    if (!this->GetVisibility())\n  ...\n  414  \n  415  //------------------------------------------------------------------------------\n  416: int vtkOpenVRPanelRepresentation::RenderTranslucentPolygonalGeometry(vtkViewport* v)\n  417  {\n  418    if (!this->GetVisibility())\n  ...\n  427  \n  428  //------------------------------------------------------------------------------\n  429: vtkTypeBool vtkOpenVRPanelRepresentation::HasTranslucentPolygonalGeometry()\n  430  {\n  431    if (!this->GetVisibility())\n  ...\n  442  \n  443  //------------------------------------------------------------------------------\n  444: void vtkOpenVRPanelRepresentation::PlaceWidget(double bds[6])\n  445  {\n  446    this->TextActor->GetUserMatrix()->Identity();\n  ...\n  467  }\n  468  \n  469: void vtkOpenVRPanelRepresentation::PlaceWidgetExtended(\n  470    const double* bds, const double* normal, const double* upvec, double scale)\n  471  {\n  ...\n  544  \n  545  //------------------------------------------------------------------------------\n  546: void vtkOpenVRPanelRepresentation::BuildRepresentation()\n  547  {\n  548    // if (this->GetMTime() > this->BuildTime)\n  ...\n  563  \n  564  //------------------------------------------------------------------------------\n  565: void vtkOpenVRPanelRepresentation::PrintSelf(ostream& os, vtkIndent indent)\n  566  {\n  567    this->Superclass::PrintSelf(os, indent);\n  ...\n  569  \n  570  //------------------------------------------------------------------------------\n  571: void vtkOpenVRPanelRepresentation::SetText(const char* text)\n  572  {\n  573    if (this->Text == text)\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRPanelRepresentation.h:\n   14  =========================================================================*/\n   15  /**\n   16:  * @class   vtkOpenVRPanelRepresentation\n   17:  * @brief   Widget representation for vtkOpenVRPanelWidget\n   18   * Implementation of the popup panel representation for the\n   19:  * vtkOpenVRPanelWidget.\n   20   * This representation is rebuilt every time the hovered prop changes.\n   21   * Its position is set according to the camera orientation and is placed at a\n   ..\n   26   **/\n   27  \n   28: #ifndef vtkOpenVRPanelRepresentation_h\n   29: #define vtkOpenVRPanelRepresentation_h\n   30  \n   31  #include \"vtkRenderingOpenVRModule.h\" // For export macro\n   ..\n   36  class vtkTextActor3D;\n   37  \n   38: class VTKRENDERINGOPENVR_EXPORT vtkOpenVRPanelRepresentation : public vtkWidgetRepresentation\n   39  {\n   40  public:\n   ..\n   42     * Instantiate the class.\n   43     */\n   44:   static vtkOpenVRPanelRepresentation* New();\n   45  \n   46    //@{\n   ..\n   48     * Standard methods for the class.\n   49     */\n   50:   vtkTypeMacro(vtkOpenVRPanelRepresentation, vtkWidgetRepresentation);\n   51    void PrintSelf(ostream& os, vtkIndent indent) override;\n   52    //@}\n   ..\n   64    //@{\n   65    /**\n   66:    * Methods to interface with the vtkOpenVRPanelWidget.\n   67     */\n   68    void BuildRepresentation() override;\n   ..\n  140  \n  141  protected:\n  142:   vtkOpenVRPanelRepresentation();\n  143:   ~vtkOpenVRPanelRepresentation() override;\n  144  \n  145    // Keep track of event positions\n  ...\n  171  \n  172  private:\n  173:   vtkOpenVRPanelRepresentation(const vtkOpenVRPanelRepresentation&) = delete;\n  174:   void operator=(const vtkOpenVRPanelRepresentation&) = delete;\n  175  };\n  176  \n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRPanelWidget.cxx:\n    2  \n    3  Program:   Visualization Toolkit\n    4: Module:    vtkOpenVRPanelWidget.cxx\n    5  \n    6  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n    .\n   13  \n   14  =========================================================================*/\n   15: #include \"vtkOpenVRPanelWidget.h\"\n   16: #include \"vtkOpenVRPanelRepresentation.h\"\n   17  \n   18  #include \"vtkCallbackCommand.h\"\n   ..\n   23  #include \"vtkWidgetEvent.h\"\n   24  \n   25: vtkStandardNewMacro(vtkOpenVRPanelWidget);\n   26  \n   27  //------------------------------------------------------------------------------\n   28: vtkOpenVRPanelWidget::vtkOpenVRPanelWidget()\n   29  {\n   30:   this->WidgetState = vtkOpenVRPanelWidget::Start;\n   31  \n   32    {\n   ..\n   36      ed->SetAction(vtkEventDataAction::Press);\n   37      this->CallbackMapper->SetCallbackMethod(vtkCommand::Select3DEvent, ed, vtkWidgetEvent::Select3D,\n   38:       this, vtkOpenVRPanelWidget::SelectAction3D);\n   39    }\n   40  \n   ..\n   45      ed->SetAction(vtkEventDataAction::Release);\n   46      this->CallbackMapper->SetCallbackMethod(vtkCommand::Select3DEvent, ed,\n   47:       vtkWidgetEvent::EndSelect3D, this, vtkOpenVRPanelWidget::EndSelectAction3D);\n   48    }\n   49  \n   ..\n   53      ed->SetInput(vtkEventDataDeviceInput::Any);\n   54      this->CallbackMapper->SetCallbackMethod(vtkCommand::Move3DEvent, ed, vtkWidgetEvent::Move3D,\n   55:       this, vtkOpenVRPanelWidget::MoveAction3D);\n   56    }\n   57  }\n   58  \n   59  //------------------------------------------------------------------------------\n   60: vtkOpenVRPanelWidget::~vtkOpenVRPanelWidget() {}\n   61  \n   62  //------------------------------------------------------------------------------\n   63: void vtkOpenVRPanelWidget::SetRepresentation(vtkOpenVRPanelRepresentation* rep)\n   64  {\n   65    this->Superclass::SetWidgetRepresentation(reinterpret_cast<vtkWidgetRepresentation*>(rep));\n   ..\n   67  \n   68  //------------------------------------------------------------------------------\n   69: void vtkOpenVRPanelWidget::CreateDefaultRepresentation()\n   70  {\n   71    if (!this->WidgetRep)\n   72    {\n   73:     this->WidgetRep = vtkOpenVRPanelRepresentation::New();\n   74    }\n   75  }\n   76  \n   77  //------------------------------------------------------------------------------\n   78: void vtkOpenVRPanelWidget::PrintSelf(ostream& os, vtkIndent indent)\n   79  {\n   80    this->Superclass::PrintSelf(os, indent);\n   ..\n   82  \n   83  //------------------------------------------------------------------------------\n   84: void vtkOpenVRPanelWidget::SelectAction3D(vtkAbstractWidget* w)\n   85  {\n   86:   vtkOpenVRPanelWidget* self = reinterpret_cast<vtkOpenVRPanelWidget*>(w);\n   87  \n   88    // We want to compute an orthogonal vector to the plane that has been selected\n   ..\n   90      self->Interactor, self, vtkWidgetEvent::Select3D, self->CallData);\n   91  \n   92:   if (interactionState == vtkOpenVRPanelRepresentation::Outside)\n   93    {\n   94      return;\n   ..\n  101    }\n  102  \n  103:   self->WidgetState = vtkOpenVRPanelWidget::Active;\n  104    self->WidgetRep->StartComplexInteraction(\n  105      self->Interactor, self, vtkWidgetEvent::Select3D, self->CallData);\n  ...\n  111  \n  112  //------------------------------------------------------------------------------\n  113: void vtkOpenVRPanelWidget::MoveAction3D(vtkAbstractWidget* w)\n  114  {\n  115:   vtkOpenVRPanelWidget* self = reinterpret_cast<vtkOpenVRPanelWidget*>(w);\n  116  \n  117    // See whether we're active\n  118:   if (self->WidgetState == vtkOpenVRPanelWidget::Start)\n  119    {\n  120      return;\n  ...\n  131  \n  132  //------------------------------------------------------------------------------\n  133: void vtkOpenVRPanelWidget::EndSelectAction3D(vtkAbstractWidget* w)\n  134  {\n  135:   vtkOpenVRPanelWidget* self = reinterpret_cast<vtkOpenVRPanelWidget*>(w);\n  136  \n  137    // See whether we're active\n  138:   if (self->WidgetState != vtkOpenVRPanelWidget::Active ||\n  139:     self->WidgetRep->GetInteractionState() == vtkOpenVRPanelRepresentation::Outside)\n  140    {\n  141      return;\n  ...\n  146      self->Interactor, self, vtkWidgetEvent::EndSelect3D, self->CallData);\n  147  \n  148:   self->WidgetState = vtkOpenVRPanelWidget::Start;\n  149    if (!self->Parent)\n  150    {\n\n/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRPanelWidget.h:\n    2  \n    3  Program:   Visualization Toolkit\n    4: Module:    vtkOpenVRPanelWidget.h\n    5  \n    6  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n    .\n   14  =========================================================================*/\n   15  /**\n   16:  * @class   vtkOpenVRPanelWidget\n   17   * @brief   3D widget to display a panel/billboard\n   18   *\n   ..\n   20   *\n   21   * @sa\n   22:  * vtkOpenVRPanelRepresentation\n   23   */\n   24  \n   25: #ifndef vtkOpenVRPanelWidget_h\n   26: #define vtkOpenVRPanelWidget_h\n   27  \n   28  #include \"vtkAbstractWidget.h\"\n   29  #include \"vtkRenderingOpenVRModule.h\" // For export macro\n   30  \n   31: class vtkOpenVRPanelRepresentation;\n   32  class vtkPropMap;\n   33  class vtkProp;\n   34  \n   35: class VTKRENDERINGOPENVR_EXPORT vtkOpenVRPanelWidget : public vtkAbstractWidget\n   36  {\n   37  public:\n   ..\n   39     * Instantiate the object.\n   40     */\n   41:   static vtkOpenVRPanelWidget* New();\n   42  \n   43    //@{\n   ..\n   45     * Standard vtkObject methods\n   46     */\n   47:   vtkTypeMacro(vtkOpenVRPanelWidget, vtkAbstractWidget);\n   48    void PrintSelf(ostream& os, vtkIndent indent) override;\n   49    //@}\n   ..\n   54     * so it can be added to the renderer independent of the widget.\n   55     */\n   56:   void SetRepresentation(vtkOpenVRPanelRepresentation* rep);\n   57  \n   58    /**\n   ..\n   62  \n   63  protected:\n   64:   vtkOpenVRPanelWidget();\n   65:   ~vtkOpenVRPanelWidget() override;\n   66  \n   67    // Manage the state of the widget\n   ..\n   81  \n   82  private:\n   83:   vtkOpenVRPanelWidget(const vtkOpenVRPanelWidget&) = delete;\n   84:   void operator=(const vtkOpenVRPanelWidget&) = delete;\n   85  };\n   86  #endif\n\n100 matches across 7 files\n",
					"settings":
					{
						"buffer_size": 17290,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRControlsHelper.h",
					"settings":
					{
						"buffer_size": 3995,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRControlsHelper.cxx",
					"settings":
					{
						"buffer_size": 16680,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRControlsHelper.h",
					"settings":
					{
						"buffer_size": 3995,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRControlsHelper.cxx",
					"settings":
					{
						"buffer_size": 16938,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"wor",
						"Word Wrap: Toggle"
					],
					[
						"wo",
						"Word Wrap: Toggle"
					],
					[
						"w",
						"Word Wrap: Toggle"
					],
					[
						"bla",
						"Git Blame: Erase All"
					],
					[
						"blam",
						"Git Blame: Show All"
					],
					[
						"side",
						"View: Toggle Side Bar"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"syntax mark",
						"Set Syntax: MultiMarkdown"
					],
					[
						"mar",
						"Set Syntax: Markdown"
					],
					[
						"color",
						"MarkdownEditing: Change color scheme..."
					],
					[
						"synta",
						"Set Syntax: C++"
					],
					[
						"close",
						"File: Close All"
					],
					[
						"markdow sy",
						"Set Syntax: Markdown GFM"
					],
					[
						"markdown sy",
						"Set Syntax: Markdown"
					],
					[
						"markdown",
						"MarkdownEditing: Open Journal"
					],
					[
						"syntax mar",
						"Set Syntax: Markdown GFM"
					],
					[
						"mark",
						"Set Syntax: Markdown"
					],
					[
						"instal",
						"Package Control: Install Package"
					]
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/lfxpaul/dev/vtk/vtk1/vtk",
				"/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering",
				"/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR"
			],
			"file_history":
			[
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMMaterialLibraryProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspector.xml",
				"/home/lfxpaul/dev/pv1/paraview/Examples/Catalyst2/CxxMultimesh/catalyst_pipeline.py",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMPVRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/EmbossingRepresentations/Representations/vtkBumpMapRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMChartSeriesSelectionDomain.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/LagrangianParticleTracker/pqIntegrationModelSurfaceHelperWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataInformationModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqApplyBehavior.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqServer.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestCategoricalMultiBlock.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/Resources/views_and_representations.xml",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.h",
				"/tmp/mozilla_lfxpaul0/vtkSPOSFix.txx",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestCameraWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMSourceProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositePolyDataMapper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/DataModel/vtkCompositeDataSet.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithmOutput.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/Resources/UI/pqMultiBlockInspectorWidget.ui",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqDataAssemblyPropertyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqCameraToolbar.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkView.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqView.cxx",
				"/home/lfxpaul/dev/notes/CEA.md",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Widgets/pqLineEdit.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestResliceCursorWidget3.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayStereo.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/OpenGL2/vtkOpenGLRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/ServerManager/vtkSMBoundsDomain.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/Core/vtkInformationKey.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Clients/ParaView/Testing/Python/TestStereoSaveScreenshot.py",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkStereoCompositor.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Components/pqDoubleVectorPropertyWidget.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.h",
				"/home/lfxpaul/dev/data/pbr/dirToAngle.py",
				"/home/lfxpaul/dev/notes/zSpace/HomePage.md"
			],
			"find":
			{
				"height": 54.0
			},
			"find_in_files":
			{
				"height": 168.0,
				"where_history":
				[
					"Rendering/OpenVR/*"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"Panel",
					"vtkOpenVRPanel",
					"ConvertPoseToWorldCoord",
					"leftgripaction",
					"startmovement",
					"LoadActions"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/lfxpaul/dev/vtk/vtk1/vtk"
				}
			],
			"groups":
			[
				{
					"selected": 1,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/.gitignore",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 343,
								"regions":
								{
								},
								"selection":
								[
									[
										343,
										343
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRInteractorStyle.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 41480,
								"regions":
								{
								},
								"selection":
								[
									[
										4194,
										4194
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4387,
												4388
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												3877,
												3878
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1838.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						}
					]
				},
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 2,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRRenderWindowInteractor.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 40569,
								"regions":
								{
								},
								"selection":
								[
									[
										2797,
										2797
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2798,
												2799
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"region.yellowish"
											]
										},
										"open":
										{
											"1":
											[
												2797,
												2798
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 5.0,
								"translation.y": 353.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRRenderWindowInteractor.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6912,
								"regions":
								{
								},
								"selection":
								[
									[
										2613,
										2613
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												1345,
												1346
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 975.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 4,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 17290,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												281,
												304
											],
											[
												587,
												610
											],
											[
												842,
												865
											],
											[
												1080,
												1103
											],
											[
												1355,
												1378
											],
											[
												1652,
												1675
											],
											[
												1969,
												1992
											],
											[
												2330,
												2344
											],
											[
												2368,
												2382
											],
											[
												2552,
												2566
											],
											[
												2675,
												2689
											],
											[
												2930,
												2944
											],
											[
												3028,
												3042
											],
											[
												3297,
												3311
											],
											[
												3527,
												3541
											],
											[
												3745,
												3759
											],
											[
												3901,
												3915
											],
											[
												4035,
												4049
											],
											[
												4065,
												4079
											],
											[
												4235,
												4249
											],
											[
												4463,
												4477
											],
											[
												4494,
												4508
											],
											[
												4599,
												4613
											],
											[
												4748,
												4762
											],
											[
												4893,
												4907
											],
											[
												5060,
												5074
											],
											[
												5228,
												5242
											],
											[
												5457,
												5471
											],
											[
												5709,
												5723
											],
											[
												5827,
												5841
											],
											[
												5925,
												5939
											],
											[
												6112,
												6126
											],
											[
												6347,
												6361
											],
											[
												6508,
												6522
											],
											[
												6683,
												6697
											],
											[
												6903,
												6917
											],
											[
												7135,
												7149
											],
											[
												7382,
												7396
											],
											[
												7626,
												7640
											],
											[
												7852,
												7866
											],
											[
												8100,
												8114
											],
											[
												8324,
												8338
											],
											[
												8480,
												8494
											],
											[
												8739,
												8753
											],
											[
												8966,
												8980
											],
											[
												9210,
												9224
											],
											[
												9502,
												9516
											],
											[
												9576,
												9590
											],
											[
												9674,
												9688
											],
											[
												9900,
												9914
											],
											[
												9946,
												9960
											],
											[
												10132,
												10146
											],
											[
												10288,
												10302
											],
											[
												10432,
												10446
											],
											[
												10642,
												10656
											],
											[
												10764,
												10778
											],
											[
												10806,
												10820
											],
											[
												10936,
												10950
											],
											[
												10971,
												10985
											],
											[
												11042,
												11056
											],
											[
												11242,
												11256
											],
											[
												11452,
												11466
											],
											[
												11493,
												11507
											],
											[
												11648,
												11662
											],
											[
												11774,
												11788
											],
											[
												11796,
												11810
											],
											[
												11857,
												11871
											],
											[
												12091,
												12105
											],
											[
												12340,
												12354
											],
											[
												12585,
												12599
											],
											[
												12745,
												12759
											],
											[
												12768,
												12782
											],
											[
												12902,
												12916
											],
											[
												12942,
												12956
											],
											[
												13201,
												13215
											],
											[
												13333,
												13347
											],
											[
												13498,
												13512
											],
											[
												13734,
												13748
											],
											[
												13811,
												13825
											],
											[
												13857,
												13871
											],
											[
												14105,
												14119
											],
											[
												14228,
												14242
											],
											[
												14501,
												14515
											],
											[
												14576,
												14590
											],
											[
												14622,
												14636
											],
											[
												14728,
												14742
											],
											[
												14901,
												14915
											],
											[
												14981,
												14995
											],
											[
												15027,
												15041
											],
											[
												15133,
												15147
											],
											[
												15218,
												15232
											],
											[
												15411,
												15425
											],
											[
												15618,
												15632
											],
											[
												15831,
												15845
											],
											[
												15960,
												15974
											],
											[
												16023,
												16037
											],
											[
												16061,
												16075
											],
											[
												16216,
												16230
											],
											[
												16340,
												16354
											],
											[
												16483,
												16497
											],
											[
												16614,
												16628
											],
											[
												16860,
												16874
											],
											[
												16958,
												16972
											],
											[
												16992,
												17006
											],
											[
												17115,
												17129
											],
											[
												17142,
												17156
											],
											[
												17205,
												17219
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										2677,
										2677
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												2618,
												2619
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 2,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 8648.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRControlsHelper.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3995,
								"regions":
								{
								},
								"selection":
								[
									[
										1858,
										1858
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												3984,
												3985
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												1467,
												1468
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 710.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenVR/vtkOpenVRControlsHelper.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 16680,
								"regions":
								{
								},
								"selection":
								[
									[
										14545,
										14545
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												14546,
												14547
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"region.yellowish"
											]
										},
										"open":
										{
											"1":
											[
												14545,
												14546
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 6020.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 7,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRControlsHelper.h",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 3995,
								"regions":
								{
								},
								"selection":
								[
									[
										1366,
										1366
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												3989,
												3994
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/hash.png",
												"region.yellowish"
											]
										},
										"open":
										{
											"1":
											[
												774,
												780
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/lfxpaul/dev/vtk/vtk1/vtk/Rendering/OpenXR/vtkOpenXRControlsHelper.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 16938,
								"regions":
								{
								},
								"selection":
								[
									[
										2701,
										2701
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2853,
												2854
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												1283,
												1284
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 796.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 30.0
			},
			"input":
			{
				"height": 50.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.diagnostics":
			{
				"height": 185.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,0,34,1918,1051,1920,1080",
			"project": "",
			"replace":
			{
				"height": 56.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"vtkOpenXRInte",
						"Rendering/OpenXR/vtkOpenXRRenderWindowInteractor.cxx"
					],
					[
						"vtkOpenXRIntera",
						"Rendering/OpenXR/vtkOpenXRInteractorStyle.cxx"
					],
					[
						"vtkOpenVRREnderW",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"materialEditor.md",
						"Documentation/release/dev/OSPRayMaterialEditor.md"
					],
					[
						".gitlab/ci/excl",
						".gitlab/ci/ctest_exclusions.cmake"
					],
					[
						"vtkOpen",
						"CMake/vtkOpenGLOptions.cmake"
					],
					[
						"Interaction Style Python Cma",
						"Interaction/Style/Testing/Python/CMakeLists.txt"
					],
					[
						"TestDragon",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"TestAvatar",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestAvatar.cxx"
					],
					[
						"vvtkOpenVRRenderWi",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"TestDrago",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"vtkVolumeProp",
						"VTK/Rendering/Core/vtkVolumeProperty.cxx"
					],
					[
						"vtkVolu",
						"Remoting/Views/vtkVolumeRepresentation.cxx"
					],
					[
						"vtkDataArr",
						"VTK/Common/Core/vtkDataArray.cxx"
					],
					[
						"vtkSMSEssionCl",
						"Remoting/ServerManager/vtkSMSessionClient.cxx"
					],
					[
						"vtkPVCOmpo",
						"Remoting/Views/vtkPVCompositeRepresentation.cxx"
					],
					[
						"vtkPythonVIew",
						"Remoting/ViewsPython/vtkPythonView.cxx"
					],
					[
						"pqC",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkClientServerSt",
						"Remoting/ClientServerStream/vtkClientServerStream.cxx"
					],
					[
						"vtkSMRender",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqCame",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeome",
						"Remoting/Views/vtkGeometryRepresentation.cxx"
					],
					[
						"vtkContext2DScal",
						"Remoting/Views/vtkContext2DScalarBarActor.cxx"
					],
					[
						"vtkCamera",
						"VTK/Rendering/Core/vtkCamera.cxx"
					],
					[
						"vtkSIProper",
						"Remoting/ServerManager/vtkSIProperty.cxx"
					],
					[
						"vtkSI",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIInt",
						"Remoting/ServerManager/vtkSIIntVectorProperty.h"
					],
					[
						"vtkSIIndexS",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIProx",
						"Remoting/ServerManager/vtkSIProxy.h"
					],
					[
						"vtkSIP",
						"Remoting/ServerManager/vtkSIProperty.h"
					],
					[
						"vtkSIDataA",
						"Remoting/ServerManager/vtkSIDataArrayProperty.h"
					],
					[
						"vtkPVDataR",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkPVCompo",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProx",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkDataRepre",
						"VTK/Views/Core/vtkDataRepresentation.h"
					],
					[
						"vtkPVDataRepres",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeR",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkPVCompos",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProperty",
						"Remoting/ServerManager/vtkSMProperty.cxx"
					],
					[
						"vtkPVVIew",
						"Remoting/Views/vtkPVView.cxx"
					],
					[
						"pqCam",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkCompositeDataD",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkDataAsse",
						"VTK/Common/DataModel/vtkDataAssemblyUtilities.cxx"
					],
					[
						"pqCamera",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqMul",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"pqCameraT",
						"Qt/ApplicationComponents/Resources/UI/pqCameraToolbar.ui"
					],
					[
						"vtkVectorO",
						"VTK/Common/DataModel/vtkVectorOperators.h"
					],
					[
						"vtkVector",
						"VTK/Common/DataModel/vtkVector.h"
					],
					[
						"TemporalPa",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkTemporalPat",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkStaticCellLo",
						"VTK/Common/DataModel/vtkStaticCellLocator.h"
					],
					[
						"vtkCompo",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSelect",
						"Remoting/Views/vtkSelectionRepresentation.h"
					],
					[
						"TestParaView",
						"Remoting/Views/Testing/Cxx/TestParaViewPipelineControllerWithRendering.cxx"
					],
					[
						"vtkRotation",
						"VTK/Filters/General/vtkRotationFilter.h"
					],
					[
						"pqCamer",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeom",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVRende",
						"Remoting/Views/vtkPVRenderView.cxx"
					],
					[
						"vtkOsprayRender",
						"VTK/Rendering/RayTracing/vtkOSPRayRendererNode.cxx"
					],
					[
						"TestOsprayP",
						"VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayPass.cxx"
					],
					[
						"vtkOSPRAYMA",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialHelpers.cxx"
					],
					[
						"QVTKOpen",
						"VTK/GUISupport/Qt/QVTKOpenGLNativeWidget.h"
					],
					[
						"pqMate",
						"Qt/ApplicationComponents/Resources/UI/pqMaterialEditor.ui"
					],
					[
						"vtkShaderBal",
						"VTKExtensions/Rendering/vtkShaderBallScene.h"
					],
					[
						"pqMateri",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMMa",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"WriterFac",
						"Remoting/ServerManager/vtkSMWriterFactory.h"
					],
					[
						"pqSaveData",
						"Qt/ApplicationComponents/pqSaveDataReaction.cxx"
					],
					[
						"vtkOSprayMat",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialLibrary.cxx"
					],
					[
						"vtkSMMateri",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"pqMateria",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMP",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkSMSource",
						"Remoting/ServerManager/vtkSMSourceProxy.h"
					],
					[
						"vtkSMRepre",
						"Remoting/Views/vtkSMRepresentationProxy.h"
					],
					[
						"vtkRenderWIndowInt",
						"Rendering/Core/vtkRenderWindowInteractor3D.cxx"
					],
					[
						"vtkOpenVRRenderW",
						"Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h"
					],
					[
						"vtkRenderWindowInteract",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkRenderWIndowInte",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkInteractorOb",
						"Rendering/Core/vtkInteractorObserver.h"
					],
					[
						"vtkInteractorStyle.",
						"Rendering/Core/vtkInteractorStyle.cxx"
					],
					[
						"TestPBR",
						"Rendering/OpenGL2/Testing/Cxx/TestPBRAnisotropy.cxx"
					],
					[
						"Renderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderWindowInte",
						"Rendering/Core/vtkRenderWindowInteractor.h"
					],
					[
						"vtkInteractorStyleCame",
						"Interaction/Style/vtkInteractorStyleTrackballCamera.h"
					],
					[
						"vtkInteractorStyleTra",
						"Interaction/Style/vtkInteractorStyleTrackball.h"
					],
					[
						"Multiblock",
						"Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml"
					],
					[
						"t",
						"~/dev/pv1/build/t.xml"
					],
					[
						"vtkSMRenderV",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqAc",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqAct",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqRep",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqDataR",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqDataRp",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqMutli",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"views and",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"Zoom",
						"Clients/ParaView/Testing/XML/ZoomClosest.xml"
					],
					[
						"t.xm",
						"~/dev/pv1/build/t.xml"
					],
					[
						"pqProxyWid",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqBasic",
						"ThirdParty/QtTesting/vtkqttesting/pqBasicWidgetEventPlayer.cxx"
					],
					[
						"pqMulti",
						"Qt/Components/pqMultiBlockInspectorWidget.h"
					],
					[
						"pqEventPl",
						"ThirdParty/QtTesting/vtkqttesting/pqEventPlayer.cxx"
					],
					[
						".xml",
						"Clients/ParaView/Testing/XML/Flow.xml"
					],
					[
						"PBR xml",
						"Clients/ParaView/Testing/XML/ClearCoatPBR.xml"
					],
					[
						"PBR.xml",
						"Clients/ParaView/Testing/XML/EdgeTintPBR.xml"
					],
					[
						"pqFind",
						"Qt/ApplicationComponents/pqFindDataWidget.h"
					],
					[
						"pqActiveO",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqProxyWi",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqProx",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqActi",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqRepse",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqActive",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"views and re",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"views and repre",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"pqDataRe",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqCameraTo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"MultiblockInspe",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"vtkPVGeome",
						"VTKExtensions/FiltersRendering/vtkPVGeometryFilter.cxx"
					],
					[
						"vtkAlgo",
						"VTK/Common/ExecutionModel/vtkAlgorithm.h"
					],
					[
						"vtkSMLink",
						"Remoting/ServerManager/vtkSMLink.h"
					],
					[
						"pqLinkM",
						"Qt/Core/pqLinksModel.h"
					],
					[
						"pqLink",
						"Qt/Components/pqLinksManager.h"
					],
					[
						"vtkPVIn",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVDataInfo",
						"Remoting/Core/vtkPVDataInformation.h"
					],
					[
						"vtkSMMaterial",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"vtkCompositeDataDispl",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkGeometryR",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetGe",
						"VTK/Common/Core/vtkSetGet.h"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 1,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 495.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 86,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"vtkOS",
						"vtkOSPRayVolumeMapperNode"
					],
					[
						"GetNum",
						"GetNumberOfVisibleDataObjects"
					],
					[
						"Updae",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"inform",
						"information_only"
					],
					[
						"def",
						"default_values"
					],
					[
						"Selec",
						"SelectionRepresentation\t  vtkSelectionRepresentation *"
					],
					[
						"Get",
						"GetVTKClassName()\t  char *"
					],
					[
						"Update",
						"UpdateSelfAndAllInputs()\t  void"
					],
					[
						"Rende",
						"RenderWidget"
					],
					[
						"Upd",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"vi",
						"isVisible() const\t  bool"
					],
					[
						"update",
						"updateEnabledState()\t  void"
					],
					[
						"pqMulti",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"rend",
						"renderViewEventually()\t  void"
					],
					[
						"pqMul",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"Q_S",
						"Q_SIGNALS\t  Text"
					],
					[
						"repr",
						"pqDataRepresentation\t  Class"
					],
					[
						"repre",
						"representationChanged"
					],
					[
						"vtkSMP",
						"vtkSMPropertyHelper"
					],
					[
						"visi",
						"visibleDataBounds2\t  double [6]"
					],
					[
						"GetVisi",
						"GetVisibleDataBounds()\t  double *"
					],
					[
						"Compute",
						"ComputeVisibleDataBounds"
					],
					[
						"vtkGeom",
						"vtkGeometryRepresentation.h\"\t  File"
					],
					[
						"vtkPVCom",
						"vtkPVCompositeRepresentation.h\"\t  File"
					],
					[
						"GetName",
						"GetXMLName()\t  char *"
					],
					[
						"vtkSMProper",
						"vtkSMPropertyHelper\t  Class"
					],
					[
						"GetREp",
						"getRepresentation(int index) const\t  pqRepresentation *"
					],
					[
						"getNum",
						"getNumberOfOutputPorts() const\t  int"
					],
					[
						"GetRe",
						"getRepresentations(…)\t  [2 overloads]"
					],
					[
						"getRep",
						"getNumberOfVisibleRepresentations() const\t  int"
					],
					[
						"Remo",
						"RemoveAllVariables"
					],
					[
						"index",
						"QModelIndexList"
					],
					[
						"pqCam",
						"pqCameraToolbar\t  Class"
					],
					[
						"gfV",
						"gfVTK_"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/lfxpaul/dev/pv1/paraview/Documentation/release/dev/OSPRayMaterialEditor.md",
					"settings":
					{
						"buffer_size": 504,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx",
					"settings":
					{
						"buffer_size": 34263,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 57 files for \"VTKRenderModels\" (case sensitive)\n\n/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx:\n  141    // this->HelperWindow->ReleaseGraphicsResources(renWin);\n  142    this->Superclass::ReleaseGraphicsResources(renWin);\n  143:   for (std::vector<vtkOpenVRModel*>::iterator i = this->VTKRenderModels.begin();\n  144:        i != this->VTKRenderModels.end(); ++i)\n  145    {\n  146      (*i)->ReleaseGraphicsResources(renWin);\n  ...\n  269    {\n  270      pRenderModel->SetVisibility(false);\n  271:     this->VTKRenderModels.push_back(pRenderModel);\n  272  \n  273      return pRenderModel;\n  ...\n  283  \n  284    pRenderModel->SetVisibility(true);\n  285:   this->VTKRenderModels.push_back(pRenderModel);\n  286  \n  287    return pRenderModel;\n  ...\n  708    }\n  709  \n  710:   for (std::vector<vtkOpenVRModel*>::iterator i = this->VTKRenderModels.begin();\n  711:        i != this->VTKRenderModels.end(); ++i)\n  712    {\n  713      (*i)->Delete();\n  714    }\n  715:   this->VTKRenderModels.clear();\n  716  \n  717    if (this->HelperWindow && this->HelperWindow->GetGenericContext())\n\n/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.h:\n  428    // load them\n  429    vtkOpenVRModel* FindOrLoadRenderModel(const char* modelName);\n  430:   std::vector<vtkOpenVRModel*> VTKRenderModels;\n  431    vtkOpenVRModel* TrackedDeviceToRenderModel[vr::k_unMaxTrackedDeviceCount];\n  432    vr::TrackedDevicePose_t TrackedDevicePose[vr::k_unMaxTrackedDeviceCount];\n\n8 matches across 2 files\n",
					"settings":
					{
						"buffer_size": 1540,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.h",
					"settings":
					{
						"buffer_size": 14580,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"wor",
						"Word Wrap: Toggle"
					],
					[
						"wo",
						"Word Wrap: Toggle"
					],
					[
						"w",
						"Word Wrap: Toggle"
					],
					[
						"bla",
						"Git Blame: Erase All"
					],
					[
						"blam",
						"Git Blame: Show All"
					],
					[
						"side",
						"View: Toggle Side Bar"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"syntax mark",
						"Set Syntax: MultiMarkdown"
					],
					[
						"mar",
						"Set Syntax: Markdown"
					],
					[
						"color",
						"MarkdownEditing: Change color scheme..."
					],
					[
						"synta",
						"Set Syntax: C++"
					],
					[
						"close",
						"File: Close All"
					],
					[
						"markdow sy",
						"Set Syntax: Markdown GFM"
					],
					[
						"markdown sy",
						"Set Syntax: Markdown"
					],
					[
						"markdown",
						"MarkdownEditing: Open Journal"
					],
					[
						"syntax mar",
						"Set Syntax: Markdown GFM"
					],
					[
						"mark",
						"Set Syntax: Markdown"
					],
					[
						"instal",
						"Package Control: Install Package"
					]
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/lfxpaul/dev/pv1/paraview"
			],
			"file_history":
			[
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMMaterialLibraryProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspector.xml",
				"/home/lfxpaul/dev/pv1/paraview/Examples/Catalyst2/CxxMultimesh/catalyst_pipeline.py",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMPVRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/EmbossingRepresentations/Representations/vtkBumpMapRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMChartSeriesSelectionDomain.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/LagrangianParticleTracker/pqIntegrationModelSurfaceHelperWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataInformationModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqApplyBehavior.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqServer.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestCategoricalMultiBlock.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/Resources/views_and_representations.xml",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.h",
				"/tmp/mozilla_lfxpaul0/vtkSPOSFix.txx",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestCameraWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMSourceProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositePolyDataMapper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/DataModel/vtkCompositeDataSet.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithmOutput.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/Resources/UI/pqMultiBlockInspectorWidget.ui",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqDataAssemblyPropertyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqCameraToolbar.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkView.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqView.cxx",
				"/home/lfxpaul/dev/notes/CEA.md",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Widgets/pqLineEdit.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestResliceCursorWidget3.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayStereo.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/OpenGL2/vtkOpenGLRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/ServerManager/vtkSMBoundsDomain.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/Core/vtkInformationKey.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Clients/ParaView/Testing/Python/TestStereoSaveScreenshot.py",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkStereoCompositor.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Components/pqDoubleVectorPropertyWidget.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.h",
				"/home/lfxpaul/dev/data/pbr/dirToAngle.py",
				"/home/lfxpaul/dev/notes/zSpace/HomePage.md"
			],
			"find":
			{
				"height": 52.0
			},
			"find_in_files":
			{
				"height": 168.0,
				"where_history":
				[
					"VTK/Rendering/OpenVR/*"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"VTKRenderModels"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/lfxpaul/dev/pv1/paraview"
				}
			],
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/lfxpaul/dev/pv1/paraview/Documentation/release/dev/OSPRayMaterialEditor.md",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 504,
								"regions":
								{
								},
								"selection":
								[
									[
										504,
										504
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"syntax": "Packages/MarkdownEditing/Markdown.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 34263,
								"regions":
								{
								},
								"selection":
								[
									[
										8890,
										8905
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												8959,
												8960
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												8838,
												8839
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3596.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 1540,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												328,
												343
											],
											[
												378,
												393
											],
											[
												549,
												564
											],
											[
												703,
												718
											],
											[
												870,
												885
											],
											[
												920,
												935
											],
											[
												1012,
												1027
											],
											[
												1330,
												1345
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 1,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 14580,
								"regions":
								{
								},
								"selection":
								[
									[
										9984,
										9984
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 4082.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 30.0
			},
			"input":
			{
				"height": 50.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.diagnostics":
			{
				"height": 185.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,1536,34,1918,1051,1920,1080",
			"project": "",
			"replace":
			{
				"height": 56.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"vtkOpenVRREnderW",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"materialEditor.md",
						"Documentation/release/dev/OSPRayMaterialEditor.md"
					],
					[
						".gitlab/ci/excl",
						".gitlab/ci/ctest_exclusions.cmake"
					],
					[
						"vtkOpen",
						"CMake/vtkOpenGLOptions.cmake"
					],
					[
						"Interaction Style Python Cma",
						"Interaction/Style/Testing/Python/CMakeLists.txt"
					],
					[
						"TestDragon",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"TestAvatar",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestAvatar.cxx"
					],
					[
						"vvtkOpenVRRenderWi",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"TestDrago",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"vtkVolumeProp",
						"VTK/Rendering/Core/vtkVolumeProperty.cxx"
					],
					[
						"vtkVolu",
						"Remoting/Views/vtkVolumeRepresentation.cxx"
					],
					[
						"vtkDataArr",
						"VTK/Common/Core/vtkDataArray.cxx"
					],
					[
						"vtkSMSEssionCl",
						"Remoting/ServerManager/vtkSMSessionClient.cxx"
					],
					[
						"vtkPVCOmpo",
						"Remoting/Views/vtkPVCompositeRepresentation.cxx"
					],
					[
						"vtkPythonVIew",
						"Remoting/ViewsPython/vtkPythonView.cxx"
					],
					[
						"pqC",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkClientServerSt",
						"Remoting/ClientServerStream/vtkClientServerStream.cxx"
					],
					[
						"vtkSMRender",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqCame",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeome",
						"Remoting/Views/vtkGeometryRepresentation.cxx"
					],
					[
						"vtkContext2DScal",
						"Remoting/Views/vtkContext2DScalarBarActor.cxx"
					],
					[
						"vtkCamera",
						"VTK/Rendering/Core/vtkCamera.cxx"
					],
					[
						"vtkSIProper",
						"Remoting/ServerManager/vtkSIProperty.cxx"
					],
					[
						"vtkSI",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIInt",
						"Remoting/ServerManager/vtkSIIntVectorProperty.h"
					],
					[
						"vtkSIIndexS",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIProx",
						"Remoting/ServerManager/vtkSIProxy.h"
					],
					[
						"vtkSIP",
						"Remoting/ServerManager/vtkSIProperty.h"
					],
					[
						"vtkSIDataA",
						"Remoting/ServerManager/vtkSIDataArrayProperty.h"
					],
					[
						"vtkPVDataR",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkPVCompo",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProx",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkDataRepre",
						"VTK/Views/Core/vtkDataRepresentation.h"
					],
					[
						"vtkPVDataRepres",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeR",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkPVCompos",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProperty",
						"Remoting/ServerManager/vtkSMProperty.cxx"
					],
					[
						"vtkPVVIew",
						"Remoting/Views/vtkPVView.cxx"
					],
					[
						"pqCam",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkCompositeDataD",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkDataAsse",
						"VTK/Common/DataModel/vtkDataAssemblyUtilities.cxx"
					],
					[
						"pqCamera",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqMul",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"pqCameraT",
						"Qt/ApplicationComponents/Resources/UI/pqCameraToolbar.ui"
					],
					[
						"vtkVectorO",
						"VTK/Common/DataModel/vtkVectorOperators.h"
					],
					[
						"vtkVector",
						"VTK/Common/DataModel/vtkVector.h"
					],
					[
						"TemporalPa",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkTemporalPat",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkStaticCellLo",
						"VTK/Common/DataModel/vtkStaticCellLocator.h"
					],
					[
						"vtkCompo",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSelect",
						"Remoting/Views/vtkSelectionRepresentation.h"
					],
					[
						"TestParaView",
						"Remoting/Views/Testing/Cxx/TestParaViewPipelineControllerWithRendering.cxx"
					],
					[
						"vtkRotation",
						"VTK/Filters/General/vtkRotationFilter.h"
					],
					[
						"pqCamer",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeom",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVRende",
						"Remoting/Views/vtkPVRenderView.cxx"
					],
					[
						"vtkOsprayRender",
						"VTK/Rendering/RayTracing/vtkOSPRayRendererNode.cxx"
					],
					[
						"TestOsprayP",
						"VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayPass.cxx"
					],
					[
						"vtkOSPRAYMA",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialHelpers.cxx"
					],
					[
						"QVTKOpen",
						"VTK/GUISupport/Qt/QVTKOpenGLNativeWidget.h"
					],
					[
						"pqMate",
						"Qt/ApplicationComponents/Resources/UI/pqMaterialEditor.ui"
					],
					[
						"vtkShaderBal",
						"VTKExtensions/Rendering/vtkShaderBallScene.h"
					],
					[
						"pqMateri",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMMa",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"WriterFac",
						"Remoting/ServerManager/vtkSMWriterFactory.h"
					],
					[
						"pqSaveData",
						"Qt/ApplicationComponents/pqSaveDataReaction.cxx"
					],
					[
						"vtkOSprayMat",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialLibrary.cxx"
					],
					[
						"vtkSMMateri",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"pqMateria",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMP",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkSMSource",
						"Remoting/ServerManager/vtkSMSourceProxy.h"
					],
					[
						"vtkSMRepre",
						"Remoting/Views/vtkSMRepresentationProxy.h"
					],
					[
						"vtkRenderWIndowInt",
						"Rendering/Core/vtkRenderWindowInteractor3D.cxx"
					],
					[
						"vtkOpenVRRenderW",
						"Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h"
					],
					[
						"vtkRenderWindowInteract",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkRenderWIndowInte",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkInteractorOb",
						"Rendering/Core/vtkInteractorObserver.h"
					],
					[
						"vtkInteractorStyle.",
						"Rendering/Core/vtkInteractorStyle.cxx"
					],
					[
						"TestPBR",
						"Rendering/OpenGL2/Testing/Cxx/TestPBRAnisotropy.cxx"
					],
					[
						"Renderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderWindowInte",
						"Rendering/Core/vtkRenderWindowInteractor.h"
					],
					[
						"vtkInteractorStyleCame",
						"Interaction/Style/vtkInteractorStyleTrackballCamera.h"
					],
					[
						"vtkInteractorStyleTra",
						"Interaction/Style/vtkInteractorStyleTrackball.h"
					],
					[
						"Multiblock",
						"Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml"
					],
					[
						"t",
						"~/dev/pv1/build/t.xml"
					],
					[
						"vtkSMRenderV",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqAc",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqAct",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqRep",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqDataR",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqDataRp",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqMutli",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"views and",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"Zoom",
						"Clients/ParaView/Testing/XML/ZoomClosest.xml"
					],
					[
						"t.xm",
						"~/dev/pv1/build/t.xml"
					],
					[
						"pqProxyWid",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqBasic",
						"ThirdParty/QtTesting/vtkqttesting/pqBasicWidgetEventPlayer.cxx"
					],
					[
						"pqMulti",
						"Qt/Components/pqMultiBlockInspectorWidget.h"
					],
					[
						"pqEventPl",
						"ThirdParty/QtTesting/vtkqttesting/pqEventPlayer.cxx"
					],
					[
						".xml",
						"Clients/ParaView/Testing/XML/Flow.xml"
					],
					[
						"PBR xml",
						"Clients/ParaView/Testing/XML/ClearCoatPBR.xml"
					],
					[
						"PBR.xml",
						"Clients/ParaView/Testing/XML/EdgeTintPBR.xml"
					],
					[
						"pqFind",
						"Qt/ApplicationComponents/pqFindDataWidget.h"
					],
					[
						"pqActiveO",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqProxyWi",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqProx",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqActi",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqRepse",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqActive",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"views and re",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"views and repre",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"pqDataRe",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqCameraTo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"MultiblockInspe",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"vtkPVGeome",
						"VTKExtensions/FiltersRendering/vtkPVGeometryFilter.cxx"
					],
					[
						"vtkAlgo",
						"VTK/Common/ExecutionModel/vtkAlgorithm.h"
					],
					[
						"vtkSMLink",
						"Remoting/ServerManager/vtkSMLink.h"
					],
					[
						"pqLinkM",
						"Qt/Core/pqLinksModel.h"
					],
					[
						"pqLink",
						"Qt/Components/pqLinksManager.h"
					],
					[
						"vtkPVIn",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVDataInfo",
						"Remoting/Core/vtkPVDataInformation.h"
					],
					[
						"vtkSMMaterial",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"vtkCompositeDataDispl",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkGeometryR",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetGe",
						"VTK/Common/Core/vtkSetGet.h"
					],
					[
						"vtkSMProp",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"vtkPVComp",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 495.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 85,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"vtkOS",
						"vtkOSPRayVolumeMapperNode"
					],
					[
						"GetNum",
						"GetNumberOfVisibleDataObjects"
					],
					[
						"Updae",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"inform",
						"information_only"
					],
					[
						"def",
						"default_values"
					],
					[
						"Selec",
						"SelectionRepresentation\t  vtkSelectionRepresentation *"
					],
					[
						"Get",
						"GetVTKClassName()\t  char *"
					],
					[
						"Update",
						"UpdateSelfAndAllInputs()\t  void"
					],
					[
						"Rende",
						"RenderWidget"
					],
					[
						"Upd",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"vi",
						"isVisible() const\t  bool"
					],
					[
						"update",
						"updateEnabledState()\t  void"
					],
					[
						"pqMulti",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"rend",
						"renderViewEventually()\t  void"
					],
					[
						"pqMul",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"Q_S",
						"Q_SIGNALS\t  Text"
					],
					[
						"repr",
						"pqDataRepresentation\t  Class"
					],
					[
						"repre",
						"representationChanged"
					],
					[
						"vtkSMP",
						"vtkSMPropertyHelper"
					],
					[
						"visi",
						"visibleDataBounds2\t  double [6]"
					],
					[
						"GetVisi",
						"GetVisibleDataBounds()\t  double *"
					],
					[
						"Compute",
						"ComputeVisibleDataBounds"
					],
					[
						"vtkGeom",
						"vtkGeometryRepresentation.h\"\t  File"
					],
					[
						"vtkPVCom",
						"vtkPVCompositeRepresentation.h\"\t  File"
					],
					[
						"GetName",
						"GetXMLName()\t  char *"
					],
					[
						"vtkSMProper",
						"vtkSMPropertyHelper\t  Class"
					],
					[
						"GetREp",
						"getRepresentation(int index) const\t  pqRepresentation *"
					],
					[
						"getNum",
						"getNumberOfOutputPorts() const\t  int"
					],
					[
						"GetRe",
						"getRepresentations(…)\t  [2 overloads]"
					],
					[
						"getRep",
						"getNumberOfVisibleRepresentations() const\t  int"
					],
					[
						"Remo",
						"RemoveAllVariables"
					],
					[
						"index",
						"QModelIndexList"
					],
					[
						"pqCam",
						"pqCameraToolbar\t  Class"
					],
					[
						"gfV",
						"gfVTK_"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "Searching 39 files for \"vtkGenericVRCamera\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/CMakeLists.txt:\n    1  set(classes\n    2    vtkGenericVRRenderWindow\n    3:   vtkGenericVRCamera\n    4    vtkGenericVRRenderer\n    5    #vtkGenericVRInteractorStyle\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRCamera.cxx:\n   12  \n   13  =========================================================================*/\n   14: #include \"vtkGenericVRCamera.h\"\n   15  \n   16  #include \"vtkMatrix3x3.h\"\n   ..\n   26  #include <cmath>\n   27  \n   28: vtkGenericVRCamera::vtkGenericVRCamera()\n   29  {\n   30    this->LeftEyeProjection = nullptr;\n   ..\n   41  }\n   42  \n   43: vtkGenericVRCamera::~vtkGenericVRCamera()\n   44  {\n   45    if (this->LeftEyeProjection)\n   ..\n   55  }\n   56  \n   57: void vtkGenericVRCamera::ApplyEyePose(vtkGenericVRRenderWindow* win, bool left, double factor)\n   58  {\n   59    double physicalScale = win->GetPhysicalScale();\n   ..\n   79  \n   80  // Implement base class method.\n   81: void vtkGenericVRCamera::Render(vtkRenderer* ren)\n   82  {\n   83    vtkOpenGLClearErrorMacro();\n   ..\n  140  }\n  141  \n  142: void vtkGenericVRCamera::GetKeyMatrices(vtkRenderer* ren, vtkMatrix4x4*& wcvc, vtkMatrix3x3*& normMat,\n  143    vtkMatrix4x4*& vcdc, vtkMatrix4x4*& wcdc)\n  144  {\n  ...\n  230  }\n  231  \n  232: void vtkGenericVRCamera::GetTrackingToDCMatrix(vtkMatrix4x4*& tcdc)\n  233  {\n  234    if (this->LeftEye)\n  ...\n  242  }\n  243  \n  244: void vtkGenericVRCamera::PrintSelf(ostream& os, vtkIndent indent)\n  245  {\n  246    this->Superclass::PrintSelf(os, indent);\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRCamera.h:\n   13  =========================================================================*/\n   14  /**\n   15:  * @class   vtkGenericVRCamera\n   16   * @brief   GenericVR camera\n   17   *\n   18:  * vtkGenericVRCamera is a concrete implementation of the abstract class\n   19:  * vtkCamera.  vtkGenericVRCamera interfaces to the GenericVR rendering library.\n   20   */\n   21  \n   22: #ifndef vtkGenericVRCamera_h\n   23: #define vtkGenericVRCamera_h\n   24  \n   25  #include \"vtkNew.h\" // ivars\n   ..\n   33  class vtkMatrix4x4;\n   34  \n   35: class VTKRENDERINGGENERICVR_EXPORT vtkGenericVRCamera : public vtkOpenGLCamera\n   36  {\n   37  public:\n   38:   vtkTypeMacro(vtkGenericVRCamera, vtkOpenGLCamera);\n   39    void PrintSelf(ostream& os, vtkIndent indent) override;\n   40  \n   ..\n   62  \n   63  protected:\n   64:   vtkGenericVRCamera();\n   65:   ~vtkGenericVRCamera() override;\n   66  \n   67    // gets the pose and projections for the left and right eves from\n   ..\n   83  \n   84  private:\n   85:   vtkGenericVRCamera(const vtkGenericVRCamera&) = delete;\n   86:   void operator=(const vtkGenericVRCamera&) = delete;\n   87  };\n   88  \n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRModel.cxx:\n   32  #include \"vtkTextureObject.h\"\n   33  \n   34: #include \"vtkGenericVRCamera.h\"\n   35  #include \"vtk_glew.h\"\n   36  \n   ..\n  128      if (ren)\n  129      {\n  130:       vtkGenericVRCamera* cam = static_cast<vtkGenericVRCamera*>(ren->GetActiveCamera());\n  131  \n  132        double elems[16];\n\n26 matches across 4 files\n\n\nSearching 2592 files for \"InitializeViewFromCamera\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRRenderWindow.h:\n  185     * set when this is called.\n  186     */\n  187:   void InitializeViewFromCamera(vtkCamera* cam);\n  188  \n  189    //@{\n\n1 match in 1 file\n",
					"settings":
					{
						"buffer_size": 3509,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"contents": "/*=========================================================================\n\nProgram:   Visualization Toolkit\nModule:    vtkGenericVRModel.cxx\n\nCopyright (c) Ken Martin, Will Schroeder, Bill Lorensen\nAll rights reserved.\nSee Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\nThis software is distributed WITHOUT ANY WARRANTY; without even\nthe implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n#include \"vtkGenericVRModel.h\"\n\n#include \"vtkInteractorObserver.h\"\n#include \"vtkMatrix4x4.h\"\n#include \"vtkObjectFactory.h\"\n#include \"vtkOpenGLHelper.h\"\n#include \"vtkOpenGLIndexBufferObject.h\"\n#include \"vtkOpenGLShaderCache.h\"\n#include \"vtkOpenGLState.h\"\n#include \"vtkOpenGLVertexArrayObject.h\"\n#include \"vtkOpenGLVertexBufferObject.h\"\n#include \"vtkGenericVRRay.h\"\n#include \"vtkRenderWindow.h\"\n#include \"vtkOpenGLRenderWindow.h\"\n#include \"vtkRenderWindowInteractor.h\"\n#include \"vtkRendererCollection.h\"\n#include \"vtkShaderProgram.h\"\n#include \"vtkTextureObject.h\"\n\n#include \"vtkGenericVRCamera.h\"\n#include \"vtk_glew.h\"\n\nvtkGenericVRModel::vtkGenericVRModel()\n{\n  //this->RawModelLoaded = false;\n  this->Loaded = false;\n  this->ModelVBO = vtkOpenGLVertexBufferObject::New();\n  this->FailedToLoad = false;\n};\n\nvtkGenericVRModel::~vtkGenericVRModel()\n{\n  this->ModelVBO->Delete();\n  this->ModelVBO = nullptr;\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRModel::PrintSelf(ostream& os, vtkIndent indent)\n{\n  this->Superclass::PrintSelf(os, indent);\n\n  os << indent << \"Loaded \" << (this->Loaded ? \"On\\n\" : \"Off\\n\");\n}\n\nvoid vtkGenericVRModel::ReleaseGraphicsResources(vtkWindow* win)\n{\n  this->ModelVBO->ReleaseGraphicsResources();\n  this->ModelHelper.ReleaseGraphicsResources(win);\n  this->TextureObject->ReleaseGraphicsResources(win);\n}\n\nbool vtkGenericVRModel::Build(vtkOpenGLRenderWindow* win)\n{\n  this->FillModelHelper();\n\n  this->ModelHelper.Program = win->GetShaderCache()->ReadyShaderProgram(\n\n    // vertex shader -- use normals?? yes?\n    \"//VTK::System::Dec\\n\"\n    \"uniform mat4 matrix;\\n\"\n    \"in vec4 position;\\n\"\n    //    \"attribute vec3 v3NormalIn;\\n\"\n    \"in vec2 v2TexCoordsIn;\\n\"\n    \"out vec2 v2TexCoord;\\n\"\n    \"void main()\\n\"\n    \"{\\n\"\n    \" v2TexCoord = v2TexCoordsIn;\\n\"\n    \" gl_Position = matrix * vec4(position.xyz, 1);\\n\"\n    \"}\\n\",\n\n    // fragment shader\n    \"//VTK::System::Dec\\n\"\n    \"//VTK::Output::Dec\\n\"\n    \"uniform sampler2D diffuse;\\n\"\n    \"in vec2 v2TexCoord;\\n\"\n    \"out vec4 outputColor;\\n\"\n    \"void main()\\n\"\n    \"{\\n\"\n    \"  gl_FragData[0] = texture(diffuse, v2TexCoord);\\n\"\n    \"}\\n\",\n\n    // geom shader\n    \"\");\n\n  this->SetPositionAndTCoords();\n\n  // create and populate the texture\n  this->CreateTextureObject(win);\n\n  return true;\n}\n\nvoid vtkGenericVRModel::Render(vtkOpenGLRenderWindow* win, const float poseInTrackingCoordinates[][4])\n{\n  if (this->FailedToLoad)\n  {\n    return;\n  }\n\n  this->LoadModelAndTexture(win);\n\n  if (this->Loaded)\n  {\n    // render the model\n    win->GetState()->vtkglDepthMask(GL_TRUE);\n    win->GetShaderCache()->ReadyShaderProgram(this->ModelHelper.Program);\n    this->ModelHelper.VAO->Bind();\n    this->ModelHelper.IBO->Bind();\n\n    this->TextureObject->Activate();\n    this->ModelHelper.Program->SetUniformi(\"diffuse\", this->TextureObject->GetTextureUnit());\n\n    vtkRenderer* ren = static_cast<vtkRenderer*>(win->GetRenderers()->GetItemAsObject(0));\n    if (ren)\n    {\n      vtkGenericVRCamera* cam = static_cast<vtkGenericVRCamera*>(ren->GetActiveCamera());\n\n      double elems[16];\n      for (int j = 0; j < 3; j++)\n      {\n        for (int i = 0; i < 4; i++)\n        {\n          elems[j + i * 4] = poseInTrackingCoordinates[j][i];\n        }\n      }\n      elems[3] = 0.0;\n      elems[7] = 0.0;\n      elems[11] = 0.0;\n      elems[15] = 1.0;\n\n      vtkMatrix4x4* tcdc;\n      cam->GetTrackingToDCMatrix(tcdc);\n\n      vtkMatrix4x4::Multiply4x4(\n        elems, (double*)(tcdc->Element), (double*)(this->PoseMatrix->Element));\n\n      this->ModelHelper.Program->SetUniformMatrix(\"matrix\", this->PoseMatrix);\n    }\n\n    glDrawElements(GL_TRIANGLES, static_cast<GLsizei>(this->ModelHelper.IBO->IndexCount),\n      GL_UNSIGNED_SHORT, nullptr);\n    this->TextureObject->Deactivate();\n\n    // Draw ray\n    if (this->Ray->GetShow())\n    {\n      this->Ray->Render(win, this->PoseMatrix);\n    }\n  }\n}\n\nvoid vtkGenericVRModel::SetShowRay(bool v)\n{\n  this->Ray->SetShow(v);\n}\n\nvoid vtkGenericVRModel::SetRayLength(double length)\n{\n  this->Ray->SetLength(length);\n}\n\nvoid vtkGenericVRModel::SetRayColor(double r, double g, double b)\n{\n  float color[] = { static_cast<float>(r), static_cast<float>(g), static_cast<float>(b) };\n  this->Ray->SetColor(color);\n}\n",
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRModel.cxx",
					"file_size": 4838,
					"file_write_time": 132748747816222669,
					"settings":
					{
						"buffer_size": 4838,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/*=========================================================================\n\nProgram:   Visualization Toolkit\nModule:    vtkGenericVRRenderWindow.cxx\n\nCopyright (c) Ken Martin, Will Schroeder, Bill Lorensen\nAll rights reserved.\nSee Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\nThis software is distributed WITHOUT ANY WARRANTY; without even\nthe implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the above copyright notice for more information.\n\nParts Copyright Valve Coproration from hellovr_opengl_main.cpp\nunder their BSD license found here:\nhttps://github.com/ValveSoftware/openvr/blob/master/LICENSE\n\n=========================================================================*/\n#include \"vtkGenericVRRenderWindow.h\"\n\n#include \"vtkObjectFactory.h\"\n#include \"vtkOpenGLError.h\"\n#include \"vtkOpenGLRenderWindow.h\"\n#include \"vtkOpenGLState.h\"\n#include \"vtkRenderer.h\"\n#include \"vtkGenericVRRenderer.h\"\n#include \"vtkRendererCollection.h\"\n#include \"vtkMatrix4x4.h\"\n#include \"vtkTransform.h\"\n#include \"vtkRenderWindowInteractor.h\"\n#include \"vtkGenericVRModel.h\"\n\n#include <cstring>\n#include <memory>\n\n// include what we need for the helper window\n#ifdef WIN32\n#include \"vtkWin32OpenGLRenderWindow.h\"\n#endif\n#ifdef VTK_USE_X\n#include \"vtkXOpenGLRenderWindow.h\"\n#endif\n#ifdef VTK_USE_COCOA\n#include \"vtkCocoaRenderWindow.h\"\n#endif\n\n#if !defined(_WIN32) || defined(__CYGWIN__)\n#define stricmp strcasecmp\n#endif\n\n//------------------------------------------------------------------------------\nvtkGenericVRRenderWindow::vtkGenericVRRenderWindow()\n  : BaseStationVisibility(false)\n{\n  this->SetPhysicalViewDirection(0.0, 0.0, -1.0);\n  this->SetPhysicalViewUp(0.0, 1.0, 0.0);\n  this->SetPhysicalTranslation(0.0, 0.0, 0.0);\n  this->PhysicalScale = 1.0;\n\n  this->TrackHMD = true;\n\n  this->StereoCapableWindow = 1;\n  this->StereoRender = 1;\n  this->UseOffScreenBuffers = 1;\n  this->Size[0] = 640;\n  this->Size[1] = 720;\n  this->Position[0] = 100;\n  this->Position[1] = 100;\n  this->HMDTransform = vtkTransform::New();\n\n#ifdef WIN32\n  this->HelperWindow = vtkWin32OpenGLRenderWindow::New();\n#endif\n#ifdef VTK_USE_X\n  this->HelperWindow = vtkXOpenGLRenderWindow::New();\n#endif\n#ifdef VTK_USE_COCOA\n  this->HelperWindow = vtkCocoaRenderWindow::New();\n#endif\n}\n\n//------------------------------------------------------------------------------\nvtkGenericVRRenderWindow::~vtkGenericVRRenderWindow()\n{\n  this->Finalize();\n\n  vtkRenderer* ren;\n  vtkCollectionSimpleIterator rit;\n  this->Renderers->InitTraversal(rit);\n  while ((ren = this->Renderers->GetNextRenderer(rit)))\n  {\n    ren->SetRenderWindow(nullptr);\n  }\n\n  if (this->HelperWindow)\n  {\n    this->HelperWindow->Delete();\n    this->HelperWindow = 0;\n  }\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::PrintSelf(ostream& os, vtkIndent indent)\n{\n  this->Superclass::PrintSelf(os, indent);\n\n  os << indent << \"ContextId: \" << this->HelperWindow->GetGenericContext() << \"\\n\";\n  os << indent << \"Window Id: \" << this->HelperWindow->GetGenericWindowId() << \"\\n\";\n  os << indent << \"Initialized: \" << this->Initialized << \"\\n\";\n  os << indent << \"PhysicalViewDirection: (\" << this->PhysicalViewDirection[0] << \", \" << this->PhysicalViewDirection[1] << \", \" << this->PhysicalViewDirection[2] << \")\" << \"\\n\";\n  os << indent << \"PhysicalViewUp: (\" << this->PhysicalViewUp[0] << \", \" << this->PhysicalViewUp[1] << \", \" << this->PhysicalViewUp[2] << \")\" << \"\\n\"; \n  os << indent << \"PhysicalTranslation: (\" << this->PhysicalTranslation[0] << \", \" << this->PhysicalTranslation[1] << \", \" << this->PhysicalTranslation[2] << \")\" << \"\\n\"; \n  os << indent << \"PhysicalScale: \" << this->PhysicalScale << \"\\n\";\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::ReleaseGraphicsResources(vtkWindow* renWin)\n{\n  this->Superclass::ReleaseGraphicsResources(renWin);\n\n  for (FramebufferDesc& fbo : this->FramebufferDescs)\n  {\n    glDeleteFramebuffers(1, &fbo.ResolveFramebufferId);\n  }\n\n  for (std::vector<vtkGenericVRModel*>::iterator i = this->VTKRenderModels.begin();\n       i != this->VTKRenderModels.end(); ++i)\n  {\n    (*i)->ReleaseGraphicsResources(renWin);\n  }\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetHelperWindow(vtkOpenGLRenderWindow* win)\n{\n  if (this->HelperWindow == win)\n  {\n    return;\n  }\n\n  if (this->HelperWindow)\n  {\n    this->ReleaseGraphicsResources(this);\n    this->HelperWindow->Delete();\n    this->HelperWindow = nullptr;\n  }\n\n  this->HelperWindow = win;\n  if (win)\n  {\n    win->Register(this);\n  }\n\n  this->Modified();\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::MakeCurrent()\n{\n  if (this->HelperWindow)\n  {\n    this->HelperWindow->MakeCurrent();\n  }\n}\n\n//------------------------------------------------------------------------------\nvtkOpenGLState* vtkGenericVRRenderWindow::GetState()\n{\n  if (this->HelperWindow)\n  {\n    return this->HelperWindow->GetState();\n  }\n  return this->Superclass::GetState();\n}\n\n//------------------------------------------------------------------------------\n// Description:\n// Tells if this window is the current OpenGL context for the calling thread.\nbool vtkGenericVRRenderWindow::IsCurrent()\n{\n  return this->HelperWindow ? this->HelperWindow->IsCurrent() : false;\n}\n\n//------------------------------------------------------------------------------\n// Add a renderer to the list of renderers.\nvoid vtkGenericVRRenderWindow::AddRenderer(vtkRenderer* ren)\n{\n  if (ren && !vtkGenericVRRenderer::SafeDownCast(ren))\n  {\n    vtkErrorMacro(\"vtkGenericVRRenderWindow::AddRenderer: Failed to add renderer of type \"\n      << ren->GetClassName() << \": A subclass of vtkGenericVRRenderer is expected\");\n    return;\n  }\n  this->Superclass::AddRenderer(ren);\n}\n\n//------------------------------------------------------------------------------\n// Begin the rendering process.\nvoid vtkGenericVRRenderWindow::Start(void)\n{\n  // if the renderer has not been initialized, do so now\n  if (this->HelperWindow && !this->Initialized)\n  {\n    this->Initialize();\n  }\n\n  this->Superclass::Start();\n}\n\n//------------------------------------------------------------------------------\n// Initialize the rendering window.\n//void vtkGenericVRRenderWindow::Initialize(void)\n//{\n  /*if (this->Initialized)\n  {\n    return;\n  }\n  this->Initialized = false;\n\n  this->LoadRuntime();\n  \n  // Get the size of the views from the API => virtual pure\n  this->GetSizeFromAPI();\n\n  // No need to set size of helper window as we own the window\n  this->HelperWindow->SetDisplayId(this->GetGenericDisplayId());\n  this->HelperWindow->SetShowWindow(false);\n  this->HelperWindow->Initialize();\n  \n  this->MakeCurrent();\n  this->OpenGLInit();\n  this->SetWindowName(this->GetWindowName());\n\n  this->CreateFramebuffers();\n\n  this->EndInitialization();\n\n  this->Initialized = true;\n  vtkDebugMacro(<< \"End of GenericVRRenderWindow Initialization\");*/\n//}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::Finalize(void)\n{\n  this->ReleaseGraphicsResources(this);\n\n  // Abstract function defined by subclasses\n  this->DestroySpecificResources();\n\n  for (std::vector<vtkGenericVRModel*>::iterator i = this->VTKRenderModels.begin();\n       i != this->VTKRenderModels.end(); ++i)\n  {\n    (*i)->Delete();\n  }\n  this->VTKRenderModels.clear();\n\n  if (this->HelperWindow && this->HelperWindow->GetGenericContext())\n  {\n    this->HelperWindow->Finalize();\n  }\n}\n\nvoid vtkGenericVRRenderWindow::Render()\n{\n  this->MakeCurrent();\n  this->GetState()->ResetGLViewportState();\n  this->Superclass::Render();\n}\n\n//------------------------------------------------------------------------------\n//void vtkGenericVRRenderWindow::StereoUpdate() {}\n\n//------------------------------------------------------------------------------\n//void vtkGenericVRRenderWindow::StereoMidpoint()\n//{\n  // render the left eye models\n  //this->RenderModels();\n\n // this->GetState()->vtkglDisable(GL_MULTISAMPLE);\n\n  //this->RenderOneEye(RIGHT_EYE);\n\n  /*if (this->SwapBuffers)\n  {\n    this->RenderOneEye(LEFT_EYE);\n  }*/\n//}\n\n//------------------------------------------------------------------------------\n/*void vtkGenericVRRenderWindow::StereoRenderComplete()\n{*/\n  // render the right eye models\n  //this->RenderModels();\n\n  // reset the camera to a neutral position\n  /*vtkRenderer* ren = static_cast<vtkRenderer*>(this->GetRenderers()->GetItemAsObject(0));\n  if (ren && !ren->GetSelector())\n  {\n    vtkOpenVRCamera* cam = static_cast<vtkOpenVRCamera*>(ren->GetActiveCamera());\n    cam->ApplyEyePose(this, false, -1.0);\n  }*/\n\n /* this->GetState()->vtkglDisable(GL_MULTISAMPLE);\n\n  this->RenderOneEye(RIGHT_EYE);\n*/\n  /*if (this->SwapBuffers)\n  {\n    this->RenderOneEye(RIGHT_EYE);\n  }*/\n\n  // for now as fast as possible\n  //if (/*this->HMD && */this->SwapBuffers) // picking does not swap and we don't show it\n  /*{\n    this->BindTextureToFrameBuffer(this->RightEyeResolveFrameBufferId, this->CurrentColorTextureID);\n\n    this->GetState()->PushDrawFramebufferBinding();\n    this->GetState()->vtkglBindFramebuffer(GL_DRAW_FRAMEBUFFER, this->RightEyeResolveFrameBufferId);\n\n    if (this->OptionalExtensions.DepthExtensionSupported)\n    {\n      glBlitFramebuffer(0, 0, this->Size[0], this->Size[1], 0, 0, this->Size[0], this->Size[1], GL_DEPTH_BUFFER_BIT, GL_NEAREST);\n    }\n\n    glBlitFramebuffer(0, 0, this->Size[0], this->Size[1], 0, 0, this->Size[0], this->Size[1],\n      GL_COLOR_BUFFER_BIT, GL_LINEAR);\n\n    this->GetState()->PopDrawFramebufferBinding();\n  }*/\n//}\n\n\n\n//------------------------------------------------------------------------------\n/*bool vtkGenericVRRenderWindow::BindTextureToFrameBuffer(GLuint frameBufferID, GLuint textureID)\n{\n  this->GetState()->PushDrawFramebufferBinding();\n  this->GetState()->vtkglBindFramebuffer(GL_FRAMEBUFFER, frameBufferID);\n\n  glFramebufferTexture2D(\n    GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, textureID, 0);\n\n  if (this->OptionalExtensions.DepthExtensionSupported)\n  {\n    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, this->CurrentDepthTextureID, 0);\n  }\n\n  // check FBO status\n  GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);\n  if (status != GL_FRAMEBUFFER_COMPLETE)\n  {\n    return false;\n  }\n\n  this->GetState()->vtkglBindFramebuffer(GL_FRAMEBUFFER, 0);\n\n  return true;\n}*/\n\nvoid vtkGenericVRRenderWindow::RenderOneEye(const uint32_t eye)\n{\n  FramebufferDesc& eyeFramebufferDesc = this->FramebufferDescs[eye];\n\n  //this->RenderModels();\n\n  this->RenderFramebuffer(eyeFramebufferDesc);\n}\n\nvoid vtkGenericVRRenderWindow::RenderFramebuffer(FramebufferDesc& framebufferDesc)\n{\n  this->GetState()->PushDrawFramebufferBinding();\n  this->GetState()->vtkglBindFramebuffer(GL_DRAW_FRAMEBUFFER, framebufferDesc.ResolveFramebufferId);\n\n  glBlitFramebuffer(0, 0, this->Size[0], this->Size[1], 0, 0, this->Size[0], this->Size[1],\n    GL_COLOR_BUFFER_BIT, GL_LINEAR);\n  \n  /*if (this->OptionalExtensions.DepthExtensionSupported)\n  {\n    glBlitFramebuffer(0, 0, this->Size[0], this->Size[1], 0, 0, this->Size[0], this->Size[1], GL_DEPTH_BUFFER_BIT, GL_NEAREST);\n  }*/\n\n  this->GetState()->PopDrawFramebufferBinding();\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalViewDirection(double x, double y, double z)\n{\n  if (this->PhysicalViewDirection[0] != x || this->PhysicalViewDirection[1] != y ||\n    this->PhysicalViewDirection[2] != z)\n  {\n    this->PhysicalViewDirection[0] = x;\n    this->PhysicalViewDirection[1] = y;\n    this->PhysicalViewDirection[2] = z;\n    this->InvokeEvent(vtkGenericVRRenderWindow::PhysicalToWorldMatrixModified);\n    this->Modified();\n  }\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalViewDirection(double dir[3])\n{\n  this->SetPhysicalViewDirection(dir[0], dir[1], dir[2]);\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalViewUp(double x, double y, double z)\n{\n  if (this->PhysicalViewUp[0] != x || this->PhysicalViewUp[1] != y || this->PhysicalViewUp[2] != z)\n  {\n    this->PhysicalViewUp[0] = x;\n    this->PhysicalViewUp[1] = y;\n    this->PhysicalViewUp[2] = z;\n    this->InvokeEvent(vtkGenericVRRenderWindow::PhysicalToWorldMatrixModified);\n    this->Modified();\n  }\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalViewUp(double dir[3])\n{\n  this->SetPhysicalViewUp(dir[0], dir[1], dir[2]);\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalTranslation(double x, double y, double z)\n{\n  if (this->PhysicalTranslation[0] != x || this->PhysicalTranslation[1] != y ||\n    this->PhysicalTranslation[2] != z)\n  {\n    this->PhysicalTranslation[0] = x;\n    this->PhysicalTranslation[1] = y;\n    this->PhysicalTranslation[2] = z;\n    this->InvokeEvent(vtkGenericVRRenderWindow::PhysicalToWorldMatrixModified);\n    this->Modified();\n  }\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalTranslation(double trans[3])\n{\n  this->SetPhysicalTranslation(trans[0], trans[1], trans[2]);\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalScale(double scale)\n{\n  if (this->PhysicalScale != scale)\n  {\n    this->PhysicalScale = scale;\n    this->InvokeEvent(vtkGenericVRRenderWindow::PhysicalToWorldMatrixModified);\n    this->Modified();\n  }\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetPhysicalToWorldMatrix(vtkMatrix4x4* matrix)\n{\n  if (!matrix)\n  {\n    return;\n  }\n  vtkNew<vtkMatrix4x4> currentPhysicalToWorldMatrix;\n  this->GetPhysicalToWorldMatrix(currentPhysicalToWorldMatrix);\n  bool matrixDifferent = false;\n  for (int i = 0; i < 4; i++)\n  {\n    for (int j = 0; j < 4; j++)\n    {\n      if (fabs(matrix->GetElement(i, j) - currentPhysicalToWorldMatrix->GetElement(i, j)) >= 1e-3)\n      {\n        matrixDifferent = true;\n        break;\n      }\n    }\n  }\n  if (!matrixDifferent)\n  {\n    return;\n  }\n\n  vtkNew<vtkTransform> hmdToWorldTransform;\n  hmdToWorldTransform->SetMatrix(matrix);\n\n  double translation[3] = { 0.0 };\n  hmdToWorldTransform->GetPosition(translation);\n  this->PhysicalTranslation[0] = (-1.0) * translation[0];\n  this->PhysicalTranslation[1] = (-1.0) * translation[1];\n  this->PhysicalTranslation[2] = (-1.0) * translation[2];\n\n  double scale[3] = { 0.0 };\n  hmdToWorldTransform->GetScale(scale);\n  this->PhysicalScale = scale[0];\n\n  this->PhysicalViewUp[0] = matrix->GetElement(0, 1);\n  this->PhysicalViewUp[1] = matrix->GetElement(1, 1);\n  this->PhysicalViewUp[2] = matrix->GetElement(2, 1);\n  vtkMath::Normalize(this->PhysicalViewUp);\n  this->PhysicalViewDirection[0] = (-1.0) * matrix->GetElement(0, 2);\n  this->PhysicalViewDirection[1] = (-1.0) * matrix->GetElement(1, 2);\n  this->PhysicalViewDirection[2] = (-1.0) * matrix->GetElement(2, 2);\n  vtkMath::Normalize(this->PhysicalViewDirection);\n\n  this->InvokeEvent(vtkGenericVRRenderWindow::PhysicalToWorldMatrixModified);\n  this->Modified();\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::GetPhysicalToWorldMatrix(vtkMatrix4x4* physicalToWorldMatrix)\n{\n  if (!physicalToWorldMatrix)\n  {\n    return;\n  }\n\n  physicalToWorldMatrix->Identity();\n\n  // construct physical to non-scaled world axes (scaling is applied later)\n  double physicalZ_NonscaledWorld[3] = { -this->PhysicalViewDirection[0],\n    -this->PhysicalViewDirection[1], -this->PhysicalViewDirection[2] };\n  double* physicalY_NonscaledWorld = this->PhysicalViewUp;\n  double physicalX_NonscaledWorld[3] = { 0.0 };\n  vtkMath::Cross(physicalY_NonscaledWorld, physicalZ_NonscaledWorld, physicalX_NonscaledWorld);\n\n  for (int row = 0; row < 3; ++row)\n  {\n    physicalToWorldMatrix->SetElement(row, 0, physicalX_NonscaledWorld[row] * this->PhysicalScale);\n    physicalToWorldMatrix->SetElement(row, 1, physicalY_NonscaledWorld[row] * this->PhysicalScale);\n    physicalToWorldMatrix->SetElement(row, 2, physicalZ_NonscaledWorld[row] * this->PhysicalScale);\n    physicalToWorldMatrix->SetElement(row, 3, -this->PhysicalTranslation[row]);\n  }\n}\n\n//------------------------------------------------------------------------------\n// Get the size of the whole screen.\nint* vtkGenericVRRenderWindow::GetScreenSize()\n{\n/*  if (this->HMD)\n  {*/\n    this->GetSizeFromAPI();\n    this->ScreenSize[0] = this->Size[0];\n    this->ScreenSize[1] = this->Size[1];\n  //}\n\n  return this->ScreenSize;\n}\n\n//------------------------------------------------------------------------------\nvoid vtkGenericVRRenderWindow::SetSize(int width, int height)\n{\n  if ((this->Size[0] != width) || (this->Size[1] != height))\n  {\n    this->Superclass::SetSize(width, height);\n\n    if (this->Interactor)\n    {\n      this->Interactor->SetSize(width, height);\n    }\n  }\n}\n",
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRRenderWindow.cxx",
					"file_size": 17335,
					"file_write_time": 132748747816222669,
					"settings":
					{
						"buffer_size": 17335,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx",
					"settings":
					{
						"buffer_size": 22198,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.h",
					"settings":
					{
						"buffer_size": 6791,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "/*=========================================================================\n\nProgram:   Visualization Toolkit\n\nCopyright (c) Ken Martin, Will Schroeder, Bill Lorensen\nAll rights reserved.\nSee Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\nThis software is distributed WITHOUT ANY WARRANTY; without even\nthe implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\nPURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n/**\n * @class   vtkGenericVRRenderWindow\n * @brief   GenericVR rendering window\n *\n *\n * vtkGenericVRRenderWindow is a concrete implementation of the abstract\n * class vtkRenderWindow. vtkGenericVRRenderer interfaces to the\n * GenericVR graphics library\n *\n * This class and its similar classes are designed to be drop in\n * replacements for VTK. If you link to this module and turn on\n * the CMake option VTK_GenericVR_OBJECT_FACTORY, the object\n * factory mechanism should replace the core rendering classes such as\n * RenderWindow with GenericVR specialized versions. The goal is for VTK\n * programs to be able to use the GenericVR library with little to no\n * changes.\n *\n * This class handles the bulk of interfacing to GenericVR. It supports one\n * renderer currently. The renderer is assumed to cover the entire window\n * which is what makes sense to VR. Overlay renderers can probably be\n * made to work with this but consider how overlays will appear in a\n * HMD if they do not track the viewpoint etc. This class is based on\n * sample code from the GenericVR project.\n *\n * GenericVR provides HMD and controller positions in \"Physical\" coordinate\n * system.\n * Origin: user's eye position at the time of calibration.\n * Axis directions: x = user's right; y = user's up; z = user's back.\n * Unit: meter.\n *\n * Renderer shows actors in World coordinate system. Transformation between\n * Physical and World coordinate systems is defined by PhysicalToWorldMatrix.\n * This matrix determines the user's position and orientation in the rendered\n * scene and scaling (magnification) of rendered actors.\n *\n */\n\n#ifndef vtkGenericVRRenderWindow_h\n#define vtkGenericVRRenderWindow_h\n\n#include \"vtkOpenGLRenderWindow.h\"\n#include \"vtkRenderingGenericVRModule.h\" // For export macro\n\n#include \"vtkEventData.h\"    // for enums\n#include \"vtkOpenGLHelper.h\" // used for ivars\n#include \"vtk_glew.h\"        // used for methods\n#include <vector>            // ivars\n\n#define LEFT_EYE 0\n#define RIGHT_EYE 1\n\nclass vtkCamera;\nclass vtkMatrix4x4;\nclass vtkGenericVRModel;\n// class vtkGenericVROverlay;\nclass vtkOpenGLVertexBufferObject;\nclass vtkTransform;\n\nclass VTKRENDERINGGENERICVR_EXPORT vtkGenericVRRenderWindow : public vtkOpenGLRenderWindow\n{\npublic:\n  enum\n  {\n    PhysicalToWorldMatrixModified = vtkCommand::UserEvent + 200\n  };\n\n  vtkTypeMacro(vtkGenericVRRenderWindow, vtkOpenGLRenderWindow);\n  void PrintSelf(ostream& os, vtkIndent indent);\n\n  static bool IsHMDPresent();\n\n  /**\n   * Get the system pointer\n   */\n  //vr::IVRSystem* GetHMD() { return this->HMD; }\n\n  //@{\n  /**\n   * Set/Get the visibility of the base stations. Defaults to false\n   */\n  vtkGetMacro(BaseStationVisibility, bool);\n  vtkSetMacro(BaseStationVisibility, bool);\n  vtkBooleanMacro(BaseStationVisibility, bool);\n  //@}\n\n  /**\n   * Create an interactor to control renderers in this window.\n   * Creates one specific to GenericVR\n   */\n  vtkRenderWindowInteractor* MakeRenderWindowInteractor() override = 0;\n\n  /**\n   * Draw the overlay\n   */\n  // void RenderOverlay();\n\n  //@{\n  /**\n   * Set/Get the overlay to use on the VR dashboard\n   */\n  /*vtkGetObjectMacro(DashboardOverlay, vtkGenericVROverlay);\n  void SetDashboardOverlay(vtkGenericVROverlay*);*/\n  //@}\n\n  /**\n   * Update the HMD pose based on hardware pose and physical to world transform.\n   * VR camera properties are directly modified based on physical to world to\n   * simulate \\sa PhysicalTranslation, \\sa PhysicalScale, etc.\n   */\n  //void UpdateHMDMatrixPose();\n\n  //@{\n  /**\n   * Get the frame buffers used for rendering\n   */\n  GLuint GetLeftResolveBufferId() { return this->FramebufferDescs[LEFT_EYE].ResolveFramebufferId; }\n  GLuint GetRightResolveBufferId() { return this->FramebufferDescs[RIGHT_EYE].ResolveFramebufferId; }\n  void GetRenderBufferSize(int& width, int& height)\n  {\n    width = this->Size[0];\n    height = this->Size[1];\n  }\n  //@}\n\n  /**\n   * Get the VRModel corresponding to the tracked device\n   */\n  vtkGenericVRModel* GetTrackedDeviceModel(vtkEventDataDevice idx)\n  {\n    return this->GetTrackedDeviceModel(idx, 0);\n  }\n  vtkGenericVRModel* GetTrackedDeviceModel(uint32_t idx)\n  {\n    return this->TrackedDeviceToRenderModel[idx];\n  }\n  virtual vtkGenericVRModel* GetTrackedDeviceModel(vtkEventDataDevice idx, uint32_t index) = 0;\n\n  /**\n   * Get the GenericVR Render Models\n   */\n  //vr::IVRRenderModels* GetGenericVRRenderModels() { return this->GenericVRRenderModels; }\n\n  /**\n   * Get the index corresponding to the tracked device\n   */\n  /*vr::TrackedDeviceIndex_t GetTrackedDeviceIndexForDevice(vtkEventDataDevice dev)\n  {\n    return this->GetTrackedDeviceIndexForDevice(dev, 0);\n  }\n  vr::TrackedDeviceIndex_t GetTrackedDeviceIndexForDevice(vtkEventDataDevice dev, uint32_t index);\n  uint32_t GetNumberOfTrackedDevicesForDevice(vtkEventDataDevice dev);\n*/\n  /**\n   * Get the most recent pose corresponding to the tracked device\n   */\n  /*void GetTrackedDevicePose(vtkEventDataDevice idx, vr::TrackedDevicePose_t** pose)\n  {\n    return this->GetTrackedDevicePose(idx, 0, pose);\n  }\n  void GetTrackedDevicePose(vtkEventDataDevice idx, uint32_t index, vr::TrackedDevicePose_t** pose);\n  vr::TrackedDevicePose_t& GetTrackedDevicePose(vr::TrackedDeviceIndex_t idx)\n  {\n    return this->TrackedDevicePose[idx];\n  }*/\n\n  /**\n   * Initialize the HMD to World setting and camera settings so\n   * that the VR world view most closely matched the view from\n   * the provided camera. This method is useful for initialing\n   * a VR world from an existing on screen window and camera.\n   * The Renderer and its camera must already be created and\n   * set when this is called.\n   */\n  void InitializeViewFromCamera(vtkCamera* cam);\n\n  //@{\n  /**\n   * Set/get physical coordinate system in world coordinate system.\n   *\n   * View direction is the -Z axis of the physical coordinate system\n   * in world coordinate system.\n   * \\sa SetPhysicalViewUp, \\sa SetPhysicalTranslation,\n   * \\sa SetPhysicalScale, \\sa SetPhysicalToWorldMatrix\n   */\n  virtual void SetPhysicalViewDirection(double, double, double);\n  virtual void SetPhysicalViewDirection(double[3]);\n  vtkGetVector3Macro(PhysicalViewDirection, double);\n  //@}\n\n  //@{\n  /**\n   * Set/get physical coordinate system in world coordinate system.\n   *\n   * View up is the +Y axis of the physical coordinate system\n   * in world coordinate system.\n   * \\sa SetPhysicalViewDirection, \\sa SetPhysicalTranslation,\n   * \\sa SetPhysicalScale, \\sa SetPhysicalToWorldMatrix\n   */\n  virtual void SetPhysicalViewUp(double, double, double);\n  virtual void SetPhysicalViewUp(double[3]);\n  vtkGetVector3Macro(PhysicalViewUp, double);\n  //@}\n\n  //@{\n  /**\n   * Set/get physical coordinate system in world coordinate system.\n   *\n   * Position of the physical coordinate system origin\n   * in world coordinates.\n   * \\sa SetPhysicalViewDirection, \\sa SetPhysicalViewUp,\n   * \\sa SetPhysicalScale, \\sa SetPhysicalToWorldMatrix\n   */\n  virtual void SetPhysicalTranslation(double, double, double);\n  virtual void SetPhysicalTranslation(double[3]);\n  vtkGetVector3Macro(PhysicalTranslation, double);\n  //@}\n\n  //@{\n  /**\n   * Set/get physical coordinate system in world coordinate system.\n   *\n   * Ratio of distance in world coordinate and physical and system\n   * (PhysicalScale = distance_World / distance_Physical).\n   * Example: if world coordinate system is in mm then\n   * PhysicalScale = 1000.0 makes objects appear in real size.\n   * PhysicalScale = 100.0 makes objects appear 10x larger than real size.\n   */\n  virtual void SetPhysicalScale(double);\n  vtkGetMacro(PhysicalScale, double);\n  //@}\n\n  /**\n   * Set physical to world transform matrix. Members calculated and set from the matrix:\n   * \\sa PhysicalViewDirection, \\sa PhysicalViewUp, \\sa PhysicalTranslation, \\sa PhysicalScale\n   * The x axis scale is used for \\sa PhysicalScale\n   */\n  void SetPhysicalToWorldMatrix(vtkMatrix4x4* matrix);\n  /**\n   * Get physical to world transform matrix. Members used to calculate the matrix:\n   * \\sa PhysicalViewDirection, \\sa PhysicalViewUp, \\sa PhysicalTranslation, \\sa PhysicalScale\n   */\n  void GetPhysicalToWorldMatrix(vtkMatrix4x4* matrix);\n\n  //@{\n  /**\n   * When on the camera will track the HMD position.\n   * On is the default.\n   */\n  vtkSetMacro(TrackHMD, bool);\n  vtkGetMacro(TrackHMD, bool);\n  //@}\n\n  /**\n   * Add a renderer to the list of renderers.\n   */\n  void AddRenderer(vtkRenderer*) override;\n\n  /**\n   * Begin the rendering process.\n   */\n  virtual void Start(void);\n\n  /**\n   * Update the system, if needed, due to stereo rendering. For some stereo\n   * methods, subclasses might need to switch some hardware settings here.\n   */\n  //virtual void StereoUpdate();\n\n  /**\n   * Intermediate method performs operations required between the rendering\n   * of the left and right eye.\n   */\n  //virtual void StereoMidpoint();\n\n  /**\n   * Handles work required once both views have been rendered when using\n   * stereo rendering.\n   */\n  //virtual void StereoRenderComplete();\n\n  /**\n   * Initialize the rendering window.  This will setup all system-specific\n   * resources.  This method and Finalize() must be symmetric and it\n   * should be possible to call them multiple times, even changing WindowId\n   * in-between.  This is what WindowRemap does.\n   */\n  //virtual void Initialize(void);\n\n  /**\n   * Finalize the rendering window.  This will shutdown all system-specific\n   * resources.  After having called this, it should be possible to destroy\n   * a window that was used for a SetWindowId() call without any ill effects.\n   */\n  virtual void Finalize(void);\n\n  /**\n   * Make this windows OpenGL context the current context.\n   */\n  void MakeCurrent();\n\n  /**\n   * Tells if this window is the current OpenGL context for the calling thread.\n   */\n  virtual bool IsCurrent();\n\n  /**\n   * Get report of capabilities for the render window\n   */\n  const char* ReportCapabilities() { return \"GenericVR System\"; }\n\n  /**\n   * Is this render window using hardware acceleration? 0-false, 1-true\n   */\n  vtkTypeBool IsDirect() { return 1; }\n\n  /**\n   * Check to see if a mouse button has been pressed or mouse wheel activated.\n   * All other events are ignored by this method.\n   * Maybe should return 1 always?\n   */\n  virtual vtkTypeBool GetEventPending() { return 0; }\n\n  /**\n   * Get the current size of the screen in pixels.\n   */\n  virtual int* GetScreenSize();\n\n  ///@{\n  /**\n   * Set the size of the window in screen coordinates in pixels.\n   * This resizes the operating system's window and redraws it.\n   *\n   * If the size has changed, this method will fire\n   * vtkCommand::WindowResizeEvent.\n   */\n  void SetSize(int width, int height) override;\n  void SetSize(int a[2]) override { this->SetSize(a[0], a[1]); }\n  ///@}\n\n  // implement required virtual functions\n  virtual void* GetGenericDisplayId() { return (void*)this->HelperWindow->GetGenericDisplayId(); }\n  virtual void* GetGenericWindowId() { return (void*)this->HelperWindow->GetGenericWindowId(); }\n  virtual void* GetGenericParentId() { return (void*)nullptr; }\n  virtual void* GetGenericContext() { return (void*)this->HelperWindow->GetGenericContext(); }\n  virtual void* GetGenericDrawable() { return (void*)this->HelperWindow->GetGenericDrawable(); }\n\n  /**\n   * Does this render window support OpenGL? 0-false, 1-true\n   */\n  virtual int SupportsOpenGL() { return 1; }\n\n  /**\n   * Overridden to not release resources that would interfere with an external\n   * application's rendering. Avoiding round trip.\n   */\n  virtual void Render();\n\n  /**\n   * Set/Get the window to use for the openGL context\n   */\n  vtkGetObjectMacro(HelperWindow, vtkOpenGLRenderWindow);\n  void SetHelperWindow(vtkOpenGLRenderWindow* val);\n\n  // Get the state object used to keep track of\n  // OpenGL state\n  vtkOpenGLState* GetState() override;\n\n  /**\n   * Free up any graphics resources associated with this window\n   * a value of nullptr means the context may already be destroyed\n   */\n  void ReleaseGraphicsResources(vtkWindow*) override;\n\n  /**\n   * Render the controller and base station models\n   */\n  virtual void RenderModels() = 0;\n\n  virtual void GetPoseMatrixWorldFromDevice(vtkEventDataDevice device, vtkMatrix4x4* poseMatrixWorld) = 0;\n\nprotected:\n  vtkGenericVRRenderWindow();\n  ~vtkGenericVRRenderWindow() override;\n\n  virtual void CreateAWindow() {}\n  virtual void DestroyWindow() {}\n\n  std::string m_strDriver;\n  std::string m_strDisplay;\n\n  bool BaseStationVisibility;\n\n  struct FramebufferDesc\n  {\n    GLuint ResolveFramebufferId;\n    GLuint ResolveColorTextureId;\n    GLuint ResolveDepthTextureId;\n  };\n\n  // One per view (typically one per eye)\n  std::vector<FramebufferDesc> FramebufferDescs;\n\n  virtual void GetSizeFromAPI() = 0;\n  virtual void DestroySpecificResources() = 0;\n\n  void RenderOneEye(const uint32_t eye);\n  void RenderFramebuffer(FramebufferDesc& framebufferDesc);\n  \n  // devices may have polygonal models\n  // load them\n  // vtkGenericVRModel* FindOrLoadRenderModel(const char* modelName);\n  std::vector<vtkGenericVRModel*> VTKRenderModels;\n  //vtkGenericVRModel* TrackedDeviceToRenderModel[vr::k_unMaxTrackedDeviceCount];\n  \n  // TODO resize size in subclasses\n  std::vector<vtkGenericVRModel*> TrackedDeviceToRenderModel;\n\n  //vr::TrackedDevicePose_t TrackedDevicePose[vr::k_unMaxTrackedDeviceCount];\n\n  // used in computing the pose\n  vtkTransform* HMDTransform;\n  /// -Z axis of the Physical to World matrix\n  double PhysicalViewDirection[3];\n  /// Y axis of the Physical to World matrix\n  double PhysicalViewUp[3];\n  /// Inverse of the translation component of the Physical to World matrix, in mm\n  double PhysicalTranslation[3];\n  /// Scale of the Physical to World matrix\n  double PhysicalScale;\n\n  bool TrackHMD;\n\n  vtkOpenGLRenderWindow* HelperWindow;\n\nprivate:\n  vtkGenericVRRenderWindow(const vtkGenericVRRenderWindow&) = delete;\n  void operator=(const vtkGenericVRRenderWindow&) = delete;\n};\n\n#endif\n",
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRRenderWindow.h",
					"file_size": 14448,
					"file_write_time": 132748867187483019,
					"settings":
					{
						"buffer_size": 14448,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Camera => GetTrackingToDCMatrix\n\nRenderWindow => PhysicalScale / Translation / ViewUp\n\nInitializeViewFromCamera TODO in generic\n\nRemove virtual pure\n\nRemove all renders\n\n\n\n\n\nbranch working : ordi bureau vtk, branch GenericVRWorkBeforeSPlit",
					"settings":
					{
						"buffer_size": 239,
						"line_ending": "Unix",
						"name": "Camera => GetTrackingToDCMatrix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"wor",
						"Word Wrap: Toggle"
					],
					[
						"wo",
						"Word Wrap: Toggle"
					],
					[
						"w",
						"Word Wrap: Toggle"
					],
					[
						"bla",
						"Git Blame: Erase All"
					],
					[
						"blam",
						"Git Blame: Show All"
					],
					[
						"side",
						"View: Toggle Side Bar"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"syntax mark",
						"Set Syntax: MultiMarkdown"
					],
					[
						"mar",
						"Set Syntax: Markdown"
					],
					[
						"color",
						"MarkdownEditing: Change color scheme..."
					],
					[
						"synta",
						"Set Syntax: C++"
					],
					[
						"close",
						"File: Close All"
					],
					[
						"markdow sy",
						"Set Syntax: Markdown GFM"
					],
					[
						"markdown sy",
						"Set Syntax: Markdown"
					],
					[
						"markdown",
						"MarkdownEditing: Open Journal"
					],
					[
						"syntax mar",
						"Set Syntax: Markdown GFM"
					],
					[
						"mark",
						"Set Syntax: Markdown"
					],
					[
						"instal",
						"Package Control: Install Package"
					]
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/lfxpaul/dev/vtk/vtk2/vtk",
				"/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering"
			],
			"file_history":
			[
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMMaterialLibraryProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspector.xml",
				"/home/lfxpaul/dev/pv1/paraview/Examples/Catalyst2/CxxMultimesh/catalyst_pipeline.py",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMPVRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/EmbossingRepresentations/Representations/vtkBumpMapRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMChartSeriesSelectionDomain.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/LagrangianParticleTracker/pqIntegrationModelSurfaceHelperWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataInformationModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqApplyBehavior.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqServer.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestCategoricalMultiBlock.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/Resources/views_and_representations.xml",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.h",
				"/tmp/mozilla_lfxpaul0/vtkSPOSFix.txx",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestCameraWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMSourceProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositePolyDataMapper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/DataModel/vtkCompositeDataSet.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithmOutput.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/Resources/UI/pqMultiBlockInspectorWidget.ui",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqDataAssemblyPropertyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqCameraToolbar.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkView.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqView.cxx",
				"/home/lfxpaul/dev/notes/CEA.md",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Widgets/pqLineEdit.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestResliceCursorWidget3.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayStereo.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/OpenGL2/vtkOpenGLRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/ServerManager/vtkSMBoundsDomain.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/Core/vtkInformationKey.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Clients/ParaView/Testing/Python/TestStereoSaveScreenshot.py",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkStereoCompositor.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Components/pqDoubleVectorPropertyWidget.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.h",
				"/home/lfxpaul/dev/data/pbr/dirToAngle.py",
				"/home/lfxpaul/dev/notes/zSpace/HomePage.md"
			],
			"find":
			{
				"height": 30.0
			},
			"find_in_files":
			{
				"height": 168.0,
				"where_history":
				[
					"Rendering/*",
					"Rendering/GenericVR/*"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"InitializeViewFromCamera",
					"vtkGenericVRCamera"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/lfxpaul/dev/vtk/vtk2/vtk"
				}
			],
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3509,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												191,
												209
											],
											[
												462,
												480
											],
											[
												570,
												588
											],
											[
												590,
												608
											],
											[
												694,
												712
											],
											[
												715,
												733
											],
											[
												818,
												836
											],
											[
												1039,
												1057
											],
											[
												1165,
												1183
											],
											[
												1358,
												1376
											],
											[
												1493,
												1511
											],
											[
												1800,
												1818
											],
											[
												1875,
												1893
											],
											[
												1967,
												1985
											],
											[
												2067,
												2085
											],
											[
												2103,
												2121
											],
											[
												2251,
												2269
											],
											[
												2341,
												2359
											],
											[
												2493,
												2511
											],
											[
												2525,
												2543
											],
											[
												2678,
												2696
											],
											[
												2703,
												2721
											],
											[
												2764,
												2782
											],
											[
												2950,
												2968
											],
											[
												3061,
												3079
											],
											[
												3099,
												3117
											],
											[
												3426,
												3450
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										3434,
										3434
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												3046,
												3047
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 2,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 1830.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRModel.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4838,
								"regions":
								{
								},
								"selection":
								[
									[
										3939,
										3939
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												4204,
												4205
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												3564,
												3565
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 1486.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRRenderWindow.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 17335,
								"regions":
								{
								},
								"selection":
								[
									[
										770,
										770
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22198,
								"regions":
								{
								},
								"selection":
								[
									[
										16478,
										16478
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												16561,
												16562
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"region.yellowish"
											]
										},
										"open":
										{
											"1":
											[
												16478,
												16479
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 6050.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 6791,
								"regions":
								{
								},
								"selection":
								[
									[
										2894,
										2894
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												2751,
												2752
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 605.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/vtkGenericVRRenderWindow.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 14448,
								"regions":
								{
								},
								"selection":
								[
									[
										9372,
										9372
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3886.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 6,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 239,
								"regions":
								{
								},
								"selection":
								[
									[
										239,
										239
									]
								],
								"settings":
								{
									"auto_name": "Camera => GetTrackingToDCMatrix",
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 30.0
			},
			"input":
			{
				"height": 50.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.diagnostics":
			{
				"height": 185.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,1152,34,1534,1051,1920,1080",
			"project": "",
			"replace":
			{
				"height": 56.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"vtkOpenVRREn",
						"Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						".gitlab/ci/excl",
						".gitlab/ci/ctest_exclusions.cmake"
					],
					[
						"vtkOpen",
						"CMake/vtkOpenGLOptions.cmake"
					],
					[
						"Interaction Style Python Cma",
						"Interaction/Style/Testing/Python/CMakeLists.txt"
					],
					[
						"TestDragon",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"TestAvatar",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestAvatar.cxx"
					],
					[
						"vvtkOpenVRRenderWi",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"TestDrago",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"vtkVolumeProp",
						"VTK/Rendering/Core/vtkVolumeProperty.cxx"
					],
					[
						"vtkVolu",
						"Remoting/Views/vtkVolumeRepresentation.cxx"
					],
					[
						"vtkDataArr",
						"VTK/Common/Core/vtkDataArray.cxx"
					],
					[
						"vtkSMSEssionCl",
						"Remoting/ServerManager/vtkSMSessionClient.cxx"
					],
					[
						"vtkPVCOmpo",
						"Remoting/Views/vtkPVCompositeRepresentation.cxx"
					],
					[
						"vtkPythonVIew",
						"Remoting/ViewsPython/vtkPythonView.cxx"
					],
					[
						"pqC",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkClientServerSt",
						"Remoting/ClientServerStream/vtkClientServerStream.cxx"
					],
					[
						"vtkSMRender",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqCame",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeome",
						"Remoting/Views/vtkGeometryRepresentation.cxx"
					],
					[
						"vtkContext2DScal",
						"Remoting/Views/vtkContext2DScalarBarActor.cxx"
					],
					[
						"vtkCamera",
						"VTK/Rendering/Core/vtkCamera.cxx"
					],
					[
						"vtkSIProper",
						"Remoting/ServerManager/vtkSIProperty.cxx"
					],
					[
						"vtkSI",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIInt",
						"Remoting/ServerManager/vtkSIIntVectorProperty.h"
					],
					[
						"vtkSIIndexS",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIProx",
						"Remoting/ServerManager/vtkSIProxy.h"
					],
					[
						"vtkSIP",
						"Remoting/ServerManager/vtkSIProperty.h"
					],
					[
						"vtkSIDataA",
						"Remoting/ServerManager/vtkSIDataArrayProperty.h"
					],
					[
						"vtkPVDataR",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkPVCompo",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProx",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkDataRepre",
						"VTK/Views/Core/vtkDataRepresentation.h"
					],
					[
						"vtkPVDataRepres",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeR",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkPVCompos",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProperty",
						"Remoting/ServerManager/vtkSMProperty.cxx"
					],
					[
						"vtkPVVIew",
						"Remoting/Views/vtkPVView.cxx"
					],
					[
						"pqCam",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkCompositeDataD",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkDataAsse",
						"VTK/Common/DataModel/vtkDataAssemblyUtilities.cxx"
					],
					[
						"pqCamera",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqMul",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"pqCameraT",
						"Qt/ApplicationComponents/Resources/UI/pqCameraToolbar.ui"
					],
					[
						"vtkVectorO",
						"VTK/Common/DataModel/vtkVectorOperators.h"
					],
					[
						"vtkVector",
						"VTK/Common/DataModel/vtkVector.h"
					],
					[
						"TemporalPa",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkTemporalPat",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkStaticCellLo",
						"VTK/Common/DataModel/vtkStaticCellLocator.h"
					],
					[
						"vtkCompo",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSelect",
						"Remoting/Views/vtkSelectionRepresentation.h"
					],
					[
						"TestParaView",
						"Remoting/Views/Testing/Cxx/TestParaViewPipelineControllerWithRendering.cxx"
					],
					[
						"vtkRotation",
						"VTK/Filters/General/vtkRotationFilter.h"
					],
					[
						"pqCamer",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeom",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVRende",
						"Remoting/Views/vtkPVRenderView.cxx"
					],
					[
						"vtkOsprayRender",
						"VTK/Rendering/RayTracing/vtkOSPRayRendererNode.cxx"
					],
					[
						"TestOsprayP",
						"VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayPass.cxx"
					],
					[
						"vtkOSPRAYMA",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialHelpers.cxx"
					],
					[
						"QVTKOpen",
						"VTK/GUISupport/Qt/QVTKOpenGLNativeWidget.h"
					],
					[
						"pqMate",
						"Qt/ApplicationComponents/Resources/UI/pqMaterialEditor.ui"
					],
					[
						"vtkShaderBal",
						"VTKExtensions/Rendering/vtkShaderBallScene.h"
					],
					[
						"pqMateri",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMMa",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"WriterFac",
						"Remoting/ServerManager/vtkSMWriterFactory.h"
					],
					[
						"pqSaveData",
						"Qt/ApplicationComponents/pqSaveDataReaction.cxx"
					],
					[
						"vtkOSprayMat",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialLibrary.cxx"
					],
					[
						"vtkSMMateri",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"pqMateria",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMP",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkSMSource",
						"Remoting/ServerManager/vtkSMSourceProxy.h"
					],
					[
						"vtkSMRepre",
						"Remoting/Views/vtkSMRepresentationProxy.h"
					],
					[
						"vtkRenderWIndowInt",
						"Rendering/Core/vtkRenderWindowInteractor3D.cxx"
					],
					[
						"vtkOpenVRRenderW",
						"Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h"
					],
					[
						"vtkRenderWindowInteract",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkRenderWIndowInte",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkInteractorOb",
						"Rendering/Core/vtkInteractorObserver.h"
					],
					[
						"vtkInteractorStyle.",
						"Rendering/Core/vtkInteractorStyle.cxx"
					],
					[
						"TestPBR",
						"Rendering/OpenGL2/Testing/Cxx/TestPBRAnisotropy.cxx"
					],
					[
						"Renderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderWindowInte",
						"Rendering/Core/vtkRenderWindowInteractor.h"
					],
					[
						"vtkInteractorStyleCame",
						"Interaction/Style/vtkInteractorStyleTrackballCamera.h"
					],
					[
						"vtkInteractorStyleTra",
						"Interaction/Style/vtkInteractorStyleTrackball.h"
					],
					[
						"Multiblock",
						"Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml"
					],
					[
						"t",
						"~/dev/pv1/build/t.xml"
					],
					[
						"vtkSMRenderV",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqAc",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqAct",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqRep",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqDataR",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqDataRp",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqMutli",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"views and",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"Zoom",
						"Clients/ParaView/Testing/XML/ZoomClosest.xml"
					],
					[
						"t.xm",
						"~/dev/pv1/build/t.xml"
					],
					[
						"pqProxyWid",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqBasic",
						"ThirdParty/QtTesting/vtkqttesting/pqBasicWidgetEventPlayer.cxx"
					],
					[
						"pqMulti",
						"Qt/Components/pqMultiBlockInspectorWidget.h"
					],
					[
						"pqEventPl",
						"ThirdParty/QtTesting/vtkqttesting/pqEventPlayer.cxx"
					],
					[
						".xml",
						"Clients/ParaView/Testing/XML/Flow.xml"
					],
					[
						"PBR xml",
						"Clients/ParaView/Testing/XML/ClearCoatPBR.xml"
					],
					[
						"PBR.xml",
						"Clients/ParaView/Testing/XML/EdgeTintPBR.xml"
					],
					[
						"pqFind",
						"Qt/ApplicationComponents/pqFindDataWidget.h"
					],
					[
						"pqActiveO",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqProxyWi",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqProx",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqActi",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqRepse",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqActive",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"views and re",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"views and repre",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"pqDataRe",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqCameraTo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"MultiblockInspe",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"vtkPVGeome",
						"VTKExtensions/FiltersRendering/vtkPVGeometryFilter.cxx"
					],
					[
						"vtkAlgo",
						"VTK/Common/ExecutionModel/vtkAlgorithm.h"
					],
					[
						"vtkSMLink",
						"Remoting/ServerManager/vtkSMLink.h"
					],
					[
						"pqLinkM",
						"Qt/Core/pqLinksModel.h"
					],
					[
						"pqLink",
						"Qt/Components/pqLinksManager.h"
					],
					[
						"vtkPVIn",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVDataInfo",
						"Remoting/Core/vtkPVDataInformation.h"
					],
					[
						"vtkSMMaterial",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"vtkCompositeDataDispl",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkGeometryR",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetGe",
						"VTK/Common/Core/vtkSetGet.h"
					],
					[
						"vtkSMProp",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"vtkPVComp",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkGeometry",
						"Remoting/Views/vtkGeometryRepresentation.h"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 495.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 84,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"vtkOS",
						"vtkOSPRayVolumeMapperNode"
					],
					[
						"GetNum",
						"GetNumberOfVisibleDataObjects"
					],
					[
						"Updae",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"inform",
						"information_only"
					],
					[
						"def",
						"default_values"
					],
					[
						"Selec",
						"SelectionRepresentation\t  vtkSelectionRepresentation *"
					],
					[
						"Get",
						"GetVTKClassName()\t  char *"
					],
					[
						"Update",
						"UpdateSelfAndAllInputs()\t  void"
					],
					[
						"Rende",
						"RenderWidget"
					],
					[
						"Upd",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"vi",
						"isVisible() const\t  bool"
					],
					[
						"update",
						"updateEnabledState()\t  void"
					],
					[
						"pqMulti",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"rend",
						"renderViewEventually()\t  void"
					],
					[
						"pqMul",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"Q_S",
						"Q_SIGNALS\t  Text"
					],
					[
						"repr",
						"pqDataRepresentation\t  Class"
					],
					[
						"repre",
						"representationChanged"
					],
					[
						"vtkSMP",
						"vtkSMPropertyHelper"
					],
					[
						"visi",
						"visibleDataBounds2\t  double [6]"
					],
					[
						"GetVisi",
						"GetVisibleDataBounds()\t  double *"
					],
					[
						"Compute",
						"ComputeVisibleDataBounds"
					],
					[
						"vtkGeom",
						"vtkGeometryRepresentation.h\"\t  File"
					],
					[
						"vtkPVCom",
						"vtkPVCompositeRepresentation.h\"\t  File"
					],
					[
						"GetName",
						"GetXMLName()\t  char *"
					],
					[
						"vtkSMProper",
						"vtkSMPropertyHelper\t  Class"
					],
					[
						"GetREp",
						"getRepresentation(int index) const\t  pqRepresentation *"
					],
					[
						"getNum",
						"getNumberOfOutputPorts() const\t  int"
					],
					[
						"GetRe",
						"getRepresentations(…)\t  [2 overloads]"
					],
					[
						"getRep",
						"getNumberOfVisibleRepresentations() const\t  int"
					],
					[
						"Remo",
						"RemoveAllVariables"
					],
					[
						"index",
						"QModelIndexList"
					],
					[
						"pqCam",
						"pqCameraToolbar\t  Class"
					],
					[
						"gfV",
						"gfVTK_"
					]
				]
			},
			"buffers":
			[
				{
					"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction/Style/Testing/Python/CMakeLists.txt",
					"settings":
					{
						"buffer_size": 630,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/CMake/vtkOpenGLOptions.cmake",
					"settings":
					{
						"buffer_size": 5419,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 900 files for \"define\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/CMake/VTKcppcheckSuppressions.txt:\n   45  unreadVariable:*/Testing/Cxx/*\n   46  \n   47: // When analyzing different define possibilities, it will sometimes hit a #error line\n   48  preprocessorErrorDirective\n   49  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Common/Core/CMakeLists.txt:\n   39  set(vtk_smp_nowrap_headers)\n   40  set(vtk_smp_templates)\n   41: set(vtk_smp_defines)\n   42  set(vtk_smp_libraries)\n   43  set(vtk_smp_enable_sequential 0)\n   ..\n  473  \n  474  # Check C99 <math.h> next, where the C99 standard says these must be.\n  475: # (they will be found even if they are defined as macros)\n  476  check_symbol_exists(isnan \"math.h\" VTK_HAS_ISNAN)\n  477  check_symbol_exists(isinf \"math.h\" VTK_HAS_ISINF)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Common/DataModel/Testing/Cxx/CMakeLists.txt:\n  113    TestQuadraticPolygonFilters.cxx\n  114    )\n  115: # add to the list but don't define a test\n  116  list(APPEND data_tests\n  117    TestPolyhedron2.cxx\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Common/System/CMakeLists.txt:\n   16  include(\"${CMAKE_CURRENT_SOURCE_DIR}/vtkTestSocketFeatures.cmake\")\n   17  \n   18: set(vtkSocket_defines)\n   19  if (VTK_HAVE_GETSOCKNAME_WITH_SOCKLEN_T)\n   20:   list(APPEND vtkSocket_defines \"VTK_HAVE_GETSOCKNAME_WITH_SOCKLEN_T\")\n   21  endif ()\n   22  if (VTK_HAVE_SO_REUSEADDR)\n   23:   list(APPEND vtkSocket_defines \"VTK_HAVE_SO_REUSEADDR\")\n   24  endif ()\n   25  if(VTK_NO_PLATFORM_SOCKETS)\n   26:   list(APPEND vtkSocket_defines \"VTK_SOCKET_FAKE_API\")\n   27  endif()\n   28  \n   29  set_source_files_properties(vtkSocket.cxx\n   30    PROPERTIES\n   31:     COMPILE_DEFINITIONS \"${vtkSocket_defines}\")\n   32  \n   33  vtk_module_add_module(VTK::CommonSystem\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Examples/Android/ReadMe.txt:\n   19  \n   20  In this example the code is a bit more distributed. The C++ code is in\n   21: jni/main.cxx while the Java/C++ interface API is defined in JavaVTKLib.java\n   22  The bulk of the actual application logic is in JavaVTKView.java\n   23  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Infovis/Core/Testing/Cxx/CMakeLists.txt:\n   29    )\n   30  \n   31: # add to the list but don't define a test\n   32  list(APPEND tests UnitTestWordCloud.cxx)\n   33  list(APPEND tests TestWordCloud.cxx)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/Core/CMakeLists.txt:\n    1: # The TDx support has not been moved, this header is here to define nothing,\n    2  # and so allow classes in other modules to safely include it and keep going.\n    3  configure_file(\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/OpenGL2/glsl/readme.txt:\n    1  VTK uses shaders to perform its OpenGL rendering.  VTK supports many different\n    2  options when it comes to rendering, resulting in potentially thousands of\n    3: possible combinations. While we could make one giant shader that uses defines or\n    4  uniforms to switch between all these possibilities it would be limiting. Instead\n    5  we build up the shader using string replacements on the fly, and then cache the\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/cgns/vtkcgns/CMakeLists.txt:\n   20  # Determine CGNS_VERSION from src/cgnslib.h for \n   21  file (READ ${PROJECT_SOURCE_DIR}/src/cgnslib.h _cgnslib_h_contents)\n   22: string (REGEX REPLACE \".*#define[ \\t]+CGNS_DOTVERS[ \\t]+([0-9]*)\\\\.([0-9])[0-9]*.*$\"\n   23      \"\\\\1.\\\\2\" CGNS_VERSION ${_cgnslib_h_contents})\n   24  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt:\n  140  #include <complex.h>\n  141  int main(int argc, char *argv[]){\n  142: #if !defined(_MSC_VER)\n  143  float _Complex a[2];\n  144  __real__(a[1]) = (float) 1.0;\n  ...\n  354  CHECK_FORTRAN_FEATURE(FortranConcat\n  355    \"\n  356: # define CONCATENATE(a,b) a##b\n  357        CONCATENATE(PRO,GRAM) testconcat\n  358           IMPLICIT NONE\n  ...\n  619      add_library(cgns_shared SHARED ${cgns_FILES})\n  620    endif (CGNS_ENABLE_FORTRAN)\n  621:   # under windows we need to define BUILD_DLL\n  622    # and link with the HDF5 libraries to build a dll\n  623    if (WIN32 OR CYGWIN)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/eigen/vtkeigen/CMakeLists.txt:\n   36  # automatically parse the version number\n   37  file(READ \"${PROJECT_SOURCE_DIR}/eigen/src/Core/util/Macros.h\" _eigen_version_header)\n   38: string(REGEX MATCH \"define[ \\t]+EIGEN_WORLD_VERSION[ \\t]+([0-9]+)\" _eigen_world_version_match \"${_eigen_version_header}\")\n   39  set(EIGEN_WORLD_VERSION \"${CMAKE_MATCH_1}\")\n   40: string(REGEX MATCH \"define[ \\t]+EIGEN_MAJOR_VERSION[ \\t]+([0-9]+)\" _eigen_major_version_match \"${_eigen_version_header}\")\n   41  set(EIGEN_MAJOR_VERSION \"${CMAKE_MATCH_1}\")\n   42: string(REGEX MATCH \"define[ \\t]+EIGEN_MINOR_VERSION[ \\t]+([0-9]+)\" _eigen_minor_version_match \"${_eigen_version_header}\")\n   43  set(EIGEN_MINOR_VERSION \"${CMAKE_MATCH_1}\")\n   44  set(EIGEN_VERSION_NUMBER ${EIGEN_WORLD_VERSION}.${EIGEN_MAJOR_VERSION}.${EIGEN_MINOR_VERSION})\n   ..\n  674      )\n  675    else() \n  676:     # The PACKAGE_* variables are defined by the configure_package_config_file\n  677:     # but without it we define them manually to the hardcoded paths\n  678      set(PACKAGE_INIT \"\")\n  679      set(PACKAGE_EIGEN_INCLUDE_DIR ${EIGEN_INCLUDE_DIR})\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/exprtk/vtkexprtk/readme.txt:\n  713  instances  have  been  destructed,  then  any  associated   expression\n  714  evaluations or variable referencing via the symbol_table instance will\n  715: result in undefined behaviour.\n  716  \n  717  The following bit of  code instantiates a symbol_table  and expression\n  ...\n  719  references to  variables can  be added  to the  symbol_table, and  how\n  720  those  references are  subsequently invalidated  resulting in  various\n  721: forms of undefined behaviour.\n  722  \n  723     typedef exprtk::symbol_table<double> symbol_table_t;\n  ...\n  756  \n  757     expression.value();\n  758:                 // Evaluation will result in undefined behaviour\n  759  \n  760     symbol_table.get_variable(\"x\")->ref() = 135.791;\n  761:                 // Assignment will result in undefined behaviour\n  762  \n  763  \n  ...\n  873  expression and is used to evaluate said expression. Evaluation of  the\n  874  expression is accomplished by performing a post-order traversal of the\n  875: AST.  If  a  compiled  Expression  uses  variables  or  user   defined\n  876  functions, it will have an associated Symbol Table, which will contain\n  877  references  to said  variables, functions  or strings. An example  AST\n  ...\n 1017  The reason for  the above complexity  and restrictions of  deep copies\n 1018  for the expression and symbol_table components is because  expressions\n 1019: may include user defined variables or functions. These are embedded as\n 1020  references into the expression's AST. When copying an expression, said\n 1021  references  need to  also  be  copied. If  the references  are blindly\n ....\n 1028  The prescribed method for cloning an expression is to compile it  from\n 1029  its string  form. Doing so will allow the 'user' to  properly consider\n 1030: the exact source of user defined variables and functions.\n 1031  \n 1032  Note:  The  exprtk::parser  is  a  non-copyable  and  non-thread  safe\n ....\n 1313  \n 1314     (a) Assignment operation (explicit or potentially)\n 1315:    (b) Invoking a user-defined function that has side-effects\n 1316  \n 1317  The following are examples of expressions where the side-effect status\n ....\n 1338    | | z := (x += y);       | True - Due to assignments    |\n 1339    +-+----------------------+------------------------------+\n 1340:   |6| foo(x - y)           | True - user defined function |\n 1341    +-+----------------------+------------------------------+\n 1342  \n 1343  \n 1344: Note: In example 6 from the above set, it is assumed the user  defined\n 1345  function foo has been registered  as having a side-effect. By  default\n 1346: all user defined  functions are assumed  to have side-effects,  unless\n 1347  they are  configured in  their constructors  to not  have side-effects\n 1348  using   the   'disable_has_side_effects'  free   function.   For  more\n ....\n 1636  (3) String Definition\n 1637  Strings are sequences comprised of 8-bit characters. They can only be\n 1638: defined  with an explicit  initialisation  value. The  following  are\n 1639  examples of string variable definitions:\n 1640  \n ....\n 1703     (b) Base functions (abs, sin, cos, min, max etc)\n 1704     (c) Symbol table variables\n 1705:    (d) Expression local defined variables\n 1706     (e) Symbol table functions\n 1707     (f) Unknown symbol resolver based variables\n ....\n 1781  \n 1782  \n 1783: When utilizing external user defined  vectors via the symbol table  as\n 1784: opposed to expression local defined vectors, the typical  'add_vector'\n 1785  method from the symbol table will register the entirety of the  vector\n 1786  that is passed. The following example attempts to evaluate the sum  of\n 1787: elements of  the external  user defined  vector within  a typical  yet\n 1788  trivial expression:\n 1789  \n ....\n 1857  \n 1858  [SECTION 15 - USER DEFINED FUNCTIONS]\n 1859: ExprTk provides a means  whereby custom functions can  be defined  and\n 1860  utilised within  expressions.  The   concept  requires  the  user   to\n 1861  provide a reference  to the function  coupled with an  associated name\n ....\n 1885  type (numbers). The  usage requires a custom function be  derived from\n 1886  ifunction and to override one of the 21 function operators. As part of\n 1887: the constructor the custom function will define how many parameters it\n 1888: expects  to  handle.  The  following  example  defines  a  3 parameter\n 1889  function called 'foo':\n 1890  \n ....\n 1906  into the function. The function operator interface uses a  std::vector\n 1907  specialised upon type T to facilitate parameter passing. The following\n 1908: example defines a vararg function called 'boo':\n 1909  \n 1910     template <typename T>\n ....\n 1945  to each parameter, as such modifications made to the input  parameters\n 1946  will  persist after  the function  call has  completed. The  following\n 1947: example defines a generic function called 'too':\n 1948  \n 1949     template <typename T>\n ....\n 2101  \n 2102  \n 2103: The following example defines a generic function  named 'toupper' with\n 2104  the string return type function operator being explicitly overridden:\n 2105  \n ....\n 2257  (5) igeneric_function III\n 2258  In this section we will discuss an extension of the  igeneric_function\n 2259: interface that will allow for the overloading of a user defined custom\n 2260  function, where by it can return either a scalar or string value  type\n 2261  depending on the input parameter  sequence with which the function  is\n ....\n 2293  \n 2294  \n 2295: In the  example above  the custom  user defined  function \"foo\" can be\n 2296  invoked by using  either one of  two input parameter  sequences, which\n 2297: are defined as follows:\n 2298  \n 2299     Sequence-0    Sequence-1\n ....\n 2304  \n 2305  The parameter  sequence definitions  are identical  to the  previously\n 2306: define igeneric_function, with the  exception of the inclusion  of the\n 2307  return type - which can only be either a scalar T or a string S.\n 2308  \n 2309  \n 2310  (6) function_compositor\n 2311: The function  compositor is  a factory  that allows  one to define and\n 2312  construct a function using ExprTk syntax. The functions are limited to\n 2313  returning a single scalar value and consuming up to six parameters  as\n ....\n 2318  table instance. Furthermore the  functions can be recursive  in nature\n 2319  due to the inherent  function prototype forwarding that  occurs during\n 2320: construction.  The following  example  defines, by using two different\n 2321  methods, composited functions and implicitly registering the functions\n 2322  with the denoted symbol table.\n ....\n 2330     compositor_t compositor(symbol_table);\n 2331  \n 2332:    // define function koo0(v1,v2) { ... }\n 2333     compositor\n 2334        .add(\n ....\n 2338           \"v1\",\"v2\"));\n 2339  \n 2340:    // define function koo1(x,y,z) { ... }\n 2341     compositor\n 2342        .add(function_t()\n ....\n 2423  (8) Zero Parameter Functions\n 2424  When  either  an  ifunction,  ivararg_function  or   igeneric_function\n 2425: derived type is defined with zero number of parameters, there are  two\n 2426  calling  conventions  within  expressions  that  are  allowed.  For  a\n 2427  function named 'foo' with zero input parameters the calling styles are\n ....\n 2450  \n 2451  Note: For  the igeneric_function  type, there  also needs  to be a 'Z'\n 2452: parameter sequence  defined in order for the  zero parameter  trait to\n 2453  properly take effect otherwise a compilation error will occur.\n 2454  \n ....\n 2458  and lambdas  (anonymous functors)  for use  in expressions.  The basic\n 2459  requirements  are similar  to those  found in  ifunction derived  user\n 2460: defined  functions. This  includes  support  for free  functions using\n 2461  anywhere from zero up to fifteen input parameters of scalar type, with\n 2462  a return type that is also scalar. Furthermore such functions will  by\n ....\n 2525  within an expression are as follows:\n 2526  \n 2527:   * What user defined variables, vectors or strings are used?\n 2528    * What functions or custom user functions are used?\n 2529    * Which variables, vectors or strings have values assigned to them?\n ....\n 2670  \n 2671  (b) Global non side-effect functions symbol table\n 2672: This symbol table will contain  only user defined functions that  will\n 2673  not incur any side-effects that are visible to any of the  expressions\n 2674  that invoke  them. These  functions will  be thread-safe  or threading\n ....\n 2830  In the event there are symbols in the expression that can't be  mapped\n 2831  to   either   a  reserved   word,   or  located   in   the  associated\n 2832: symbol_table(s), an \"Undefined  symbol\" error will  be raised and  the\n 2833  compilation process will fail.\n 2834  \n ....\n 2859  variables  and functions  and will  only compile  successfully if  the\n 2860  symbols that  correspond to  the variables  and functions  are already\n 2861: defined in their associated symbol_table(s).  This is by far the  most\n 2862  common scenario when using ExprTk.\n 2863  \n ....\n 2976  which obviously is  not the intended  outcome by the  user. A possible\n 2977  solution to this  problem is for  one to implement  their own specific\n 2978: USR that will perform a user defined business logic in determining  if\n 2979  an encountered unknown symbol should be treated as a variable or if it\n 2980  should raise a compilation error. The following example demonstrates a\n 2981: simple user defined USR:\n 2982  \n 2983     typedef exprtk::symbol_table<T> symbol_table_t;\n ....\n 3030  \n 3031  \n 3032: In  the  example  above,  a user  specified  USR  is  defined, and  is\n 3033  registered with the parser  enabling the USR functionality.  Then when\n 3034  an unknown symbol is  encountered during the compilation  process, the\n ....\n 3040  In the example above  the callback of the  USR that is invoked  during\n 3041  the unknown symbol resolution process only allows for scalar variables\n 3042: to be defined and resolved -  as that is the simplest and  most common\n 3043  form.\n 3044  \n ....\n 3104  Note: In order to have the USR's extended mode callback be invoked  It\n 3105  is  necessary to  pass the  e_usrmode_extended enum  value during  the\n 3106: constructor of the user defined USR.\n 3107  \n 3108  Note: The primary symbol table  for an expression is the  first symbol\n ....\n 3439  \n 3440  \n 3441: Note: In the event of a base function being disabled, one can redefine\n 3442  the  base  function  using  the  standard  custom  function definition\n 3443  process. In the  following example the 'sin' function is disabled then\n 3444: redefined as a function taking degree input.\n 3445  \n 3446      template <typename T>\n ....\n 3604  \n 3605  In the example above, the expression will compute two results. As such\n 3606: two result variables are defined to hold the values named result0  and\n 3607  result1 respectively. The first is of scalar type (double), the second\n 3608  is of  string type.  Once the  expression has  been evaluated, the two\n ....\n 3657  Assuming the  following expression '2 + (3 / log(1 + x))' which uses a\n 3658  variable named 'x'  that has not been registered  with the appropriate\n 3659: symbol_table  instance and  is not  a locally  defined variable,  once\n 3660  compiled the  above denoted post compilation error handling code shall\n 3661  produce the following output:\n 3662  \n 3663:   Error: ERR184 - Undefined symbol: 'x'\n 3664:   Error[00] Pos:17 Type:[Syntax] Msg: ERR184 - Undefined symbol: 'x'\n 3665  \n 3666  \n ....\n 3881  and collect_functions  free_functions, assumes  that expressions  will\n 3882  only be utilising  the ExprTk  reserved  functions (eg: abs,  cos, min\n 3883: etc). When user defined functions are  to be used in an expression,  a\n 3884  symbol_table  instance  containing  said functions  can  be  passed to\n 3885  either routine, and  will be incorporated  during the compilation  and\n 3886  Dependent Entity  Collection processes.  In the  following example,  a\n 3887: user  defined  free  function   named  'foo'  is  registered   with  a\n 3888  symbol_table.  Finally  the   symbol_table  instance  and   associated\n 3889  expression string are passed to the exprtk::collect_functions routine.\n ....\n 4132  variables  of  the  expression between  each  evaluation.  The utility\n 4133  assumes any  valid ExprTk  expression (containing  conditionals, loops\n 4134: etc), however  it will  only make  use of  a predefined  set of scalar\n 4135  variables, namely: a, b, c, x, y, z and w. That being said expressions\n 4136  themselves  can  contain any  number  of local  variables,  vectors or\n ....\n 4143  (1) Default\n 4144  The default mode is  enabled simply by executing  the exprtk_benchmark\n 4145: binary with no command line parameters. In this mode a predefined  set\n 4146  of expressions will be evaluated in three phases:\n 4147  \n ....\n 4151  \n 4152  \n 4153: In the first two  phases (a and b)  a list of predefined  (hard-coded)\n 4154  expressions  will  be  evaluated using  both  ExprTk  and native  mode\n 4155  implementations.  This  is  done so  as  to  compare evaluation  times\n ....\n 4289        of the value: Not-A-Number (NaN).\n 4290  \n 4291:  (05) Supported   user  defined   types   are   numeric  and   string\n 4292        variables, numeric vectors and functions.\n 4293  \n ....\n 4308        specific symbol-table must span  at least the life-time  of the\n 4309        compiled expressions which utilise objects, such as  variables,\n 4310:       of that  symbol-table, otherwise  the result  will be undefined\n 4311        behavior.\n 4312  \n ....\n 4328        eg: 'Frankly my dear, \\0x49 do n0t give a damn!'\n 4329  \n 4330:  (14) User defined  normal functions  can have  up to  20 parameters,\n 4331:       where as  user defined  generic-functions and  vararg-functions\n 4332        can have an unlimited number of parameters.\n 4333  \n ....\n 4342  \n 4343   (18) String  processing capabilities  are available  by default.  To\n 4344:       turn them  off, the  following needs  to be  defined at compile\n 4345        time: exprtk_disable_string_capabilities\n 4346  \n 4347   (19) Composited functions can call themselves or any other functions\n 4348:       that have been defined prior to their own definition.\n 4349  \n 4350   (20) Recursive calls made from within composited functions will have\n 4351        a stack size bound by the stack of the executing architecture.\n 4352  \n 4353:  (21) User  defined functions  by default  are assumed  to have  side\n 4354        effects. As such an \"all constant parameter\" invocation of such\n 4355        functions wont result in constant folding. If the function  has\n ....\n 4376        Continued processing from  a failed  state without having first\n 4377        rectified the underlying issue  will in turn result  in further\n 4378:       failures and undefined behaviours.\n 4379  \n 4380   (25) The following are examples of compliant floating point value\n ....\n 4484  usage of the ExprTk Library.  The example instantiates a symbol  table\n 4485  object, adding to it  three variables named x,  y and z, and  a custom\n 4486: user defined function, that accepts only two parameters, named myfunc.\n 4487  The  example then  proceeds to  instantiate an  expression object  and\n 4488  register to it the symbol table instance.\n ....\n 4586  \n 4587  [SECTION 27 - BUILD OPTIONS]\n 4588: When building ExprTk there are a number of defines that will enable or\n 4589: disable certain features and  capabilities. The defines can  either be\n 4590  part of a compiler command line switch or scoped around the include to\n 4591: the ExprTk header. The defines are as follows:\n 4592  \n 4593     (01) exprtk_enable_debugging\n ....\n 4605  \n 4606  (01) exprtk_enable_debugging\n 4607: This define will enable printing of debug information to stdout during\n 4608  the compilation process.\n 4609  \n 4610  (02) exprtk_disable_comments\n 4611: This define will disable the ability for expressions to have comments.\n 4612  Expressions that have comments when parsed with a build that has  this\n 4613  option, will result in a compilation failure.\n 4614  \n 4615  (03) exprtk_disable_break_continue\n 4616: This  define  will  disable  the  loop-wise  'break'  and   'continue'\n 4617  capabilities. Any expression that contains those keywords will  result\n 4618  in a compilation failure.\n 4619  \n 4620  (04) exprtk_disable_sc_andor\n 4621: This define  will disable  the short-circuit  '&' (and)  and '|'  (or)\n 4622  operators\n 4623  \n 4624  (05) exprtk_disable_return_statement\n 4625: This define will disable use of return statements within expressions.\n 4626  \n 4627  (06) exprtk_disable_enhanced_features\n 4628: This  define  will  disable all  enhanced  features  such as  strength\n 4629  reduction and special  function optimisations and  expression specific\n 4630  type instantiations.  This feature  will reduce  compilation times and\n ....\n 4633  \n 4634  (07) exprtk_disable_string_capabilities\n 4635: This  define  will  disable all  string  processing  capabilities. Any\n 4636  expression that contains a string or string related syntax will result\n 4637  in a compilation failure.\n 4638  \n 4639  (08) exprtk_disable_superscalar_unroll\n 4640: This define will set  the loop unroll batch  size to 4 operations  per\n 4641: loop  instead of  the default  8 operations.  This define  is used  in\n 4642  operations that  involve vectors  and aggregations  over vectors. When\n 4643  targeting  non-superscalar  architectures, it  may  be recommended  to\n ....\n 4646  \n 4647  (09) exprtk_disable_rtl_io_file\n 4648: This  define will  disable  the  file I/O  RTL package  features. When\n 4649  present, any  attempts to register  the file I/O package with  a given\n 4650  symbol table will fail causing a compilation error.\n 4651  \n 4652  (10) exprtk_disable_rtl_vecops\n 4653: This define will  disable the extended  vector operations RTL  package\n 4654  features. When present, any attempts to register the vector operations\n 4655  package with  a given  symbol table  will fail  causing a  compilation\n ....\n 4657  \n 4658  (11) exprtk_disable_caseinsensitivity\n 4659: This define  will disable  case-insensitivity when  matching variables\n 4660  and  functions. Furthermore  all reserved  and keywords  will only  be\n 4661  acknowledged when in all lower-case.\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/fides/vtkfides/fides/CMakeLists.txt:\n   73  \n   74  add_subdirectory(xgc)\n   75: add_subdirectory(predefined)\n   76  \n   77  #-------------------------------------------------------------------------------\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/fides/vtkfides/fides/predefined/CMakeLists.txt:\n    3    DataModelFactory.h\n    4    InternalMetadataSource.h\n    5:   PredefinedDataModel.h\n    6    SupportedDataModels.h\n    7  )\n    .\n   11    ${CMAKE_CURRENT_SOURCE_DIR}/DataModelFactory.cxx\n   12    ${CMAKE_CURRENT_SOURCE_DIR}/InternalMetadataSource.cxx\n   13:   ${CMAKE_CURRENT_SOURCE_DIR}/PredefinedDataModel.cxx\n   14    ${CMAKE_CURRENT_SOURCE_DIR}/SupportedDataModels.cxx\n   15    )\n   ..\n   18  \n   19  install(FILES ${headers}\n   20:   DESTINATION ${FIDES_INSTALL_INCLUDE_DIR}/predefined)\n   21  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/hdf5/vtkhdf5/CMakeLists.txt:\n  277  #-----------------------------------------------------------------------------\n  278  file (READ ${HDF5_SRC_DIR}/H5public.h _h5public_h_contents)\n  279: string (REGEX REPLACE \".*#define[ \\t]+H5_VERS_MAJOR[ \\t]+([0-9]*).*$\"\n  280      \"\\\\1\" H5_VERS_MAJOR ${_h5public_h_contents})\n  281: string (REGEX REPLACE \".*#define[ \\t]+H5_VERS_MINOR[ \\t]+([0-9]*).*$\"\n  282      \"\\\\1\" H5_VERS_MINOR ${_h5public_h_contents})\n  283: string (REGEX REPLACE \".*#define[ \\t]+H5_VERS_RELEASE[ \\t]+([0-9]*).*$\"\n  284      \"\\\\1\" H5_VERS_RELEASE ${_h5public_h_contents})\n  285: string (REGEX REPLACE \".*#define[ \\t]+H5_VERS_SUBRELEASE[ \\t]+\\\"([0-9A-Za-z._-]*)\\\".*$\"\n  286      \"\\\\1\" H5_VERS_SUBRELEASE ${_h5public_h_contents})\n  287  if (CMAKE_VERSION VERSION_GREATER_EQUAL \"3.15.0\")\n  ...\n  688  #-----------------------------------------------------------------------------\n  689  # When building utility executables that generate other (source) files :\n  690: # we make use of the following variables defined in the root CMakeLists.\n  691  # Certain systems may add /Debug or /Release to output paths\n  692  # and we need to call the executable from inside the CMake configuration\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/libharu/vtklibharu/CMakeLists.txt:\n  166  \n  167  if (FALSE) # XXX(kitware): hardcode settings\n  168: # support all of the different variations of LIBPNG defines in HARU\n  169  set (LIBHPDF_HAVE_LIBPNG ${PNG_FOUND})\n  170  if (NOT PNG_FOUND)\n  ...\n  173  endif (NOT PNG_FOUND)\n  174  \n  175: # support different zlib defines\n  176  set (LIBHPDF_HAVE_LIBZ ${ZLIB_FOUND})\n  177  if (NOT ZLIB_FOUND)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/libxml2/vtklibxml2/CMakeLists.txt:\n  279  \t\t\\\"C\\\"\n  280  \t\t#endif\n  281: \t\t#if defined(__STDC__) || defined(__cplusplus)\n  282  \t\tsize_t iconv(iconv_t cd, char** inbuf, size_t* inbytesleft, char** outbuf, size_t* outbytesleft);\n  283  \t\t#else\n  ...\n  445  \t\tWRITE\n  446  \t\t${CMAKE_CURRENT_BINARY_DIR}/rcVersion.h\n  447: \t\t\"#define LIBXML_MAJOR_VERSION ${LIBXML_MAJOR_VERSION}\\n\"\n  448: \t\t\"#define LIBXML_MINOR_VERSION ${LIBXML_MINOR_VERSION}\\n\"\n  449: \t\t\"#define LIBXML_MICRO_VERSION ${LIBXML_MICRO_VERSION}\\n\"\n  450: \t\t\"#define LIBXML_DOTTED_VERSION \\\"${VERSION}\\\"\\n\"\n  451  \t)\n  452  endif()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/pugixml/vtkpugixml/CMakeLists.txt:\n   33  option(BUILD_SHARED_LIBS \"Build shared instead of static library\" OFF) \n   34  \n   35: set(BUILD_DEFINES CACHE STRING \"Build defines\")\n   36  else ()\n   37  set(USE_VERSIONED_LIBDIR OFF)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/verdict/vtkverdict/CMakeLists.txt:\n  105  \n  106  if (FALSE)\n  107: # Apply user-defined properties to the library targets.\n  108  if ( VERDICT_LIBRARY_PROPERTIES )\n  109    set_target_properties( ${verdict_LIBRARY}\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/CMakeLists.txt:\n   72  #-----------------------------------------------------------------------------\n   73  # vtkm_option(variable doc [initial])\n   74: #   Provides an option if it is not already defined.\n   75  # This can be replaced when CMake 3.13 is our cmake_minimum_required\n   76  macro (vtkm_option variable)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/vtkm/internal/CMakeLists.txt:\n   12  # Build the configure file.\n   13  # need to set numerous VTKm cmake properties to the naming convention\n   14: # that we expect for our C++ defines.\n   15  \n   16  set(VTKM_NO_ASSERT ${VTKm_NO_ASSERT})\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/vtkm/thirdparty/diy/CMakeLists.txt:\n   92      \"$<LINK_ONLY:$<${is_exe}:$<TARGET_PROPERTY:vtkm_diy,vtkm_diy_target>>>\")\n   93  \n   94:   # ignore undefined symbols\n   95    set(is_shared_lib \"$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>\")\n   96    if (APPLE)\n   97:     target_link_libraries(vtkm_diy INTERFACE \"$<${is_shared_lib}:-undefined dynamic_lookup>\")\n   98    elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" OR CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\")\n   99      target_link_libraries(vtkm_diy INTERFACE\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/vtkm/thirdparty/diy/vtkmdiy/CMakeLists.txt:\n   20  include(CMakeDependentOption)\n   21  \n   22: # Provides an option if it is not already defined.\n   23  # This can be replaced when CMake 3.13 is our cmake_minimum_required\n   24  macro (diy_option variable)\n   ..\n  245  \n  246  # install targets\n  247: if (NOT DEFINED diy_install_only_libraries) # defined by parent project if building for binary distribution\n  248      install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/${diy_prefix} DESTINATION ${diy_install_include_dir})\n  249  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/xdmf3/vtkxdmf3/CMakeLists.txt:\n  175        set_target_properties(${SWIG_MODULE_${python_name}Python_REAL_NAME}\n  176          PROPERTIES\n  177:         LINK_FLAGS \"-undefined dynamic_lookup\")\n  178      endif()\n  179  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/zlib/vtkzlib/CMakeLists.txt:\n  171  # parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n  172  file(READ ${CMAKE_CURRENT_SOURCE_DIR}/zlib.h _zlib_h_contents)\n  173: string(REGEX REPLACE \".*#define[ \\t]+ZLIB_VERSION[ \\t]+\\\"([-0-9A-Za-z.]+)\\\".*\"\n  174      \"\\\\1\" ZLIB_FULL_VERSION ${_zlib_h_contents})\n  175  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/KWSys/vtksys/CMakeLists.txt:\n  834    endif()\n  835  \n  836:   # Apply user-defined target properties to the library.\n  837    if(KWSYS_PROPERTIES_CXX)\n  838      set_target_properties(${KWSYS_TARGET_INTERFACE} PROPERTIES\n  ...\n  891      LABELS \"${KWSYS_LABELS_LIB}\")\n  892  \n  893:   # Apply user-defined target properties to the library.\n  894    if(KWSYS_PROPERTIES_C)\n  895      set_target_properties(${KWSYS_TARGET_C_INTERFACE} PROPERTIES\n  ...\n  913  endif()\n  914  \n  915: # For building kwsys itself, we use a macro defined on the command\n  916  # line to configure the namespace in the C and C++ source files.\n  917  add_definitions(\"-DKWSYS_NAMESPACE=${KWSYS_NAMESPACE}\")\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/Python/CMakeLists.txt:\n   11  following should be fixed first:\n   12  \n   13:   - A better solution than `-undefined dynamic_lookup` for macOS. VTK has\n   14      [an issue][VTK dynamic Python lookup issue] filed for this already.\n   15  \n   ..\n  151    # the errors only show up in an executable that links to Python-using code,\n  152    # but does not use Python itself either). Since this is not detected, setting\n  153:   # `vtk_undefined_symbols_allowed=OFF` manually may be required when using\n  154    # Ubuntu toolchains.\n  155:   include(\"${CMAKE_CURRENT_SOURCE_DIR}/vtkUndefinedSymbolsAllowed.cmake\")\n  156    set(is_exe \"$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>\")\n  157:   set(needs_flags \"$<NOT:$<BOOL:${vtk_undefined_symbols_allowed}>>\")\n  158    set(direct_link \"$<BOOL:$<TARGET_PROPERTY:INTERFACE_vtk_python_direct_link>>\")\n  159    set(should_use \"$<OR:${is_exe},${direct_link}>\")\n  160    set(platform_flags\n  161      # Apple flags.\n  162:     \"$<$<PLATFORM_ID:Darwin>:-undefined;dynamic_lookup>\"\n  163      # Linux flags.\n  164      # The linker is allowed to skip libraries not used by the end result. This\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/Upgrading/README.WindowsMangling.txt:\n   10  The main problem with windows.h is what we call the \"windows mangling\"\n   11  problem.  In order to support UNICODE and ASCII characters APIs,\n   12: windows.h defines most of its API as macros.  This code appears in the\n   13  windows header:\n   14  \n   ..\n   18                                      int nMaxCount);\n   19  #ifdef UNICODE\n   20: #define GetClassName  GetClassNameW\n   21  #else\n   22: #define GetClassName  GetClassNameA\n   23  #endif // !UNICODE\n   24  \n   ..\n   48      other reason than that it included a VTK header!\n   49  \n   50:     Also, when VTK is built without UNICODE defined then all the\n   51      methods are renamed to have \"A\" at the end.  If the user\n   52:     application defines UNICODE and includes a VTK header then the\n   53      methods get renamed to have \"W\" at the end, which results in\n   54      unresolved symbols like \"GetClassNameW\".  Then the user complains\n   55      and is told he/she has to rebuild VTK from scratch with UNICODE\n   56:     defined.  Basically VTK must be built separately for ASCII and\n   57      UNICODE applications.\n   58  \n   ..\n   83  // See vtkWin32Header.h for definition of VTK_WORKAROUND_WINDOWS_MANGLE.\n   84  #ifdef VTK_WORKAROUND_WINDOWS_MANGLE\n   85: # define GetClassNameA GetClassName\n   86: # define GetClassNameW GetClassName\n   87  #endif\n   88    const char* GetClassName() const;\n   ..\n   96  The method GetClassName has three cases.  If windows.h is not included\n   97  then it is not mangled and the name is provided.  If windows.h is\n   98: included and UNICODE is not defined then GetClassName gets mangled to\n   99  GetClassNameA, but then gets replaced by GetClassName again.  The\n  100  preprocessor will not recursively expand a macro, so replacement stops\n  101  there and the GetClassName method is declared.  When UNICODE is\n  102: defined the same process occurs but through GetClassNameW instead.\n  103  The methods GetClassNameA and GetClassNameW are not mangled so they\n  104  can be provided directly.\n  ...\n  142      the explicit inclusion is added.  This is considered acceptable\n  143      because the code was technically wrong in the first place.  As a\n  144:     quick-fix, users can define VTK_INCLUDE_WINDOWS_H in their\n  145      application and VTK will include windows.h as it did before.\n  146  \n  ...\n  178      solution does not address the problems when users build VTK\n  179      without UNICODE and then build their application with UNICODE.  It\n  180:     defines macros in VTK that are supposed to be defined in a system\n  181      header.  This is always dangerous.  The solution used above does\n  182:     not every actually change or redefine any macros defined by\n  183:     windows.h.  It just temporarily defines extra macros.\n  184  \n  185  3.) Use the above solution but change VTK_INCLUDE_WINDOWS_H to a\n  186      VTK_DO_NOT_INCLUDE_WINDOWS_H so that the previous default behavior\n  187      of including windows.h is preserved for user applications.  VTK\n  188:     can define VTK_DO_NOT_INCLUDE_WINDOWS_H when it is building\n  189      itself.\n  190  \n  ...\n  194      propagating to application code by default.  The policy we are\n  195      trying to achieve is that including a VTK header should not do\n  196:     anything but define VTK... and vtk... symbols to avoid namespacing\n  197      violations.  We are willing to let users break this policy by\n  198:     defining macros but we do not want to require users to define\n  199      macros to get this policy.\n  200  \n  ...\n  205  offending methods, but only enough changes were applied to\n  206  GetClassName to get it to work whether or not windows.h is included or\n  207: UNICODE is defined.  The method is no longer virtual so user code must\n  208: define a GetClassNameInternal protected method instead of GetClassName\n  209: in order to override it.  Since most user code defines the method with\n  210  vtkTypeMacro anyway this should not require many changes.\n  211  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Web/WebGLExporter/CMakeLists.txt:\n    1  # The exporter will behave as any other ParaView exporter (VRML, X3D, POV...)\n    2  # but will generate several types of files. The main one is the scene graph\n    3: # description define as a JSON object with all the corresponding binary+base64\n    4  # pieces that come along with it. But also with it come a single standalone HTML\n    5  # file that can directly be used to see the data in a browser without any plugin.\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Wrapping/Tools/README.txt:\n   48     and to make it pass the git commit hook tests:\n   49  a) replace all instances of \"static inline\" with \"static\"\n   50: b) replace \"#if ! defined lint || defined __GNUC__\" with \"#if 1\"\n   51  c) remove YY_ATTRIBUTE_UNUSED from yyfillin, yyfill, and yynormal\n   52  d) remove the \"break;\" after \"return yyreportAmbiguity\"\n\n159 matches across 30 files\n\n\nSearching 902 files for \"DEFINED\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/CMakeLists.txt:\n  314  if (\"VTK::Python\" IN_LIST vtk_modules)\n  315    include(vtkModuleWrapPython)\n  316:   if (NOT DEFINED VTK_PYTHON_SITE_PACKAGES_SUFFIX)\n  317      vtk_module_python_default_destination(VTK_PYTHON_SITE_PACKAGES_SUFFIX)\n  318    endif ()\n  ...\n  336  \n  337  set(vtk_install_export VTK)\n  338: if (NOT DEFINED vtk_cmake_destination)\n  339    set(vtk_cmake_destination\n  340      \"${CMAKE_INSTALL_LIBDIR}/cmake/vtk${vtk_version_suffix}\")\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Common/Core/CMakeLists.txt:\n  344  \n  345  if (CMAKE_USE_PTHREADS_INIT AND CMAKE_USE_WIN32_THREADS_INIT)\n  346:   if (DEFINED _vtk_thread_impl_output)\n  347      set(thread_impl_output \"${_vtk_thread_impl_output}\")\n  348    else ()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Examples/Build/vtkMy/Utilities/Doxygen/CMakeLists.txt:\n   10    # The needed perl scripts are in Utilities/Doxygen in VTK_SOURCE_DIR\n   11    #\n   12:   if(NOT DEFINED VTK_SOURCE_DIR)\n   13      # go up three directories from vtkMy source directory\n   14      get_filename_component(_tmp \"${VTKMY_SOURCE_DIR}\" DIRECTORY)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Examples/Emscripten/Cxx/Cone/CMakeLists.txt:\n   40    \"SHELL:-s DEMANGLE_SUPPORT=1\"\n   41    \"SHELL:-s EMULATE_FUNCTION_POINTER_CASTS=0\"\n   42:   \"SHELL:-s ERROR_ON_UNDEFINED_SYMBOLS=0\"\n   43    \"SHELL:-s MODULARIZE=1\"\n   44    \"SHELL:-s USE_PTHREADS=0\"\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Examples/Emscripten/Cxx/ConeFullScreen/CMakeLists.txt:\n   41    \"SHELL:-s DEMANGLE_SUPPORT=1\"\n   42    \"SHELL:-s EMULATE_FUNCTION_POINTER_CASTS=0\"\n   43:   \"SHELL:-s ERROR_ON_UNDEFINED_SYMBOLS=0\"\n   44    \"SHELL:-s MODULARIZE=1\"\n   45    \"SHELL:-s USE_PTHREADS=0\"\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Examples/Emscripten/Cxx/MultiCone/CMakeLists.txt:\n   43    \"SHELL:-s DEMANGLE_SUPPORT=1\"\n   44    \"SHELL:-s EMULATE_FUNCTION_POINTER_CASTS=0\"\n   45:   \"SHELL:-s ERROR_ON_UNDEFINED_SYMBOLS=0\"\n   46    \"SHELL:-s USE_PTHREADS=0\"\n   47    \"SHELL:-s WASM=1\"\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Examples/Emscripten/Cxx/WrappedMace/CMakeLists.txt:\n   43    \"SHELL:-s DEMANGLE_SUPPORT=1\"\n   44    \"SHELL:-s EMULATE_FUNCTION_POINTER_CASTS=0\"\n   45:   \"SHELL:-s ERROR_ON_UNDEFINED_SYMBOLS=0\"\n   46    \"SHELL:-s USE_PTHREADS=0\"\n   47    \"SHELL:-s WASM=1\"\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction/Style/Testing/Python/CMakeLists.txt:\n    1  include(vtkOpenGLOptions)\n    2: if (DEFINED VTK_CAN_DO_ONSCREEN AND VTK_CAN_DO_ONSCREEN AND DEFINEDVTK_DEFAULT_RENDER_WINDOW_OFFSCREEN AND NOT VTK_DEFAULT_RENDER_WINDOW_OFFSCREEN)\n    3    vtk_add_test_python(\n    4      TestFlyTo.py\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/IO/Core/Testing/Cxx/CMakeLists.txt:\n    1  set(extra_tests)\n    2: if ((NOT DEFINED MSVC_VERSION) OR (MSVC_VERSION GREATER 1800))\n    3    # skip this test on MSVC 2013 or older.\n    4    set(extra_tests\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/IO/Geometry/Testing/CMakeLists.txt:\n   86  set(enable_large_data_tests FALSE)\n   87  if (VTK_USE_LARGE_DATA)\n   88:   if (DEFINED VTK_WORDS_BIGENDIAN AND NOT VTK_WORDS_BIGENDIAN)\n   89      vtk_module_test_data(\n   90        Data/MFIXReader/,REGEX:.*\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/IO/MPIParallel/Testing/CMakeLists.txt:\n    1  set(enable_large_data_tests FALSE)\n    2  if (VTK_USE_LARGE_DATA AND NOT WIN32)\n    3:   if (DEFINED VTK_WORDS_BIGENDIAN AND NOT VTK_WORDS_BIGENDIAN)\n    4      vtk_module_test_data(\n    5        Data/WindBladeReader/,REGEX:.*\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/IO/MPIParallel/Testing/Cxx/CMakeLists.txt:\n    1  set(_known_little_endian FALSE)\n    2: if (DEFINED VTK_WORDS_BIGENDIAN)\n    3    if (NOT VTK_WORDS_BIGENDIAN)\n    4      set(_known_little_endian TRUE)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/IO/Video/CMakeLists.txt:\n    3  \n    4  set(vfw_capture_default OFF)\n    5: if (DEFINED VTK_USE_VFW_CAPTURE)\n    6    set(vfw_capture_default \"${VTK_USE_VFW_CAPTURE}\")\n    7    unset(CACHE VTK_USE_VFW_CAPTURE)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/IO/XML/Testing/Cxx/CMakeLists.txt:\n   21    )\n   22  \n   23: if ((NOT DEFINED MSVC_VERSION) OR (MSVC_VERSION GREATER 1800))\n   24    # skip TestXMLWriteRead test on MSVC 2013 and older.\n   25    list(APPEND all_tests\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/OpenGL2/CMakeLists.txt:\n  111  \n  112  # add opengl support test execulatble on windows\n  113: if (WIN32 AND (NOT CMAKE_CROSSCOMPILING OR DEFINED CMAKE_CROSSCOMPILING_EMULATOR))\n  114    vtk_module_add_executable(vtkTestOpenGLVersion vtkTestOpenGLVersion.cxx)\n  115    set_target_properties(vtkTestOpenGLVersion\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/cgns/vtkcgns/CMakeLists.txt:\n  142  # Allow fortran support to be toggled\n  143  option(CGNS_ENABLE_FORTRAN \"Enable or disable the use of Fortran\" \"OFF\")\n  144: if (NOT DEFINED FORTRAN_NAMING)\n  145    set(FORTRAN_NAMING \"UNKNOWN\")\n  146: endif (NOT DEFINED FORTRAN_NAMING)\n  147  else ()\n  148  set(CGNS_ENABLE_FORTRAN OFF)\n  ...\n  313  \n  314    if (HDF5_FOUND)\n  315:     if (NOT DEFINED HDF5_INCLUDE_DIRS)\n  316        set (HDF5_INCLUDE_DIRS ${HDF5_INCLUDE_DIR})\n  317      endif()\n  ...\n  356      endif (NOT MPI_FOUND)\n  357      # MPI variable names changed with cmake 2.8.5\n  358:     if (DEFINED MPI_C_COMPILER)\n  359        mark_as_advanced(CLEAR MPI_C_COMPILER MPI_C_INCLUDE_PATH MPI_C_LIBRARIES)\n  360        mark_as_advanced(FORCE MPI_LIBRARY MPI_EXTRA_LIBRARY)\n  361        set(MPI_INC ${MPI_C_INCLUDE_PATH})\n  362        set(MPI_LIBS ${MPI_C_LIBRARIES})\n  363:     else (DEFINED MPI_C_COMPILER)\n  364        mark_as_advanced(CLEAR MPI_COMPILER MPI_INCLUDE_PATH MPI_LIBRARY MPI_EXTRA_LIBRARY)\n  365        set(MPI_INC ${MPI_INCLUDE_PATH})\n  ...\n  369          set(MPI_LIBS ${MPI_LIBRARY})\n  370        endif (MPI_EXTRA_LIBRARY)\n  371:     endif (DEFINED MPI_C_COMPILER)\n  372      mark_as_advanced(CLEAR MPIEXEC)\n  373    else (HDF5_NEED_MPI)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/cgns/vtkcgns/src/CMakeLists.txt:\n  175  #-----------------------------------------------------------------------------\n  176  MACRO (CHECK_FORTRAN_FEATURE FUNCTION CODE VARIABLE)\n  177:   IF (NOT DEFINED ${VARIABLE})\n  178      IF (CMAKE_REQUIRED_LIBRARIES)\n  179        SET (CHECK_FUNCTION_EXISTS_ADD_LIBRARIES\n  ...\n  211            \"${OUTPUT}\\n\\n\")\n  212      ENDIF (${VARIABLE})\n  213:   ENDIF (NOT DEFINED ${VARIABLE})\n  214  ENDMACRO (CHECK_FORTRAN_FEATURE)\n  215  \n  ...\n  385  \n  386  MACRO (CHECK_HDF5_FEATURE FUNCTION CODE VARIABLE)\n  387:   IF (NOT DEFINED ${VARIABLE})\n  388      FILE (WRITE\n  389          ${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CMakeTmp/test_HDF.c\n  ...\n  417            \"${OUTPUT}\\n\\n\")\n  418      ENDIF (${VARIABLE})\n  419:   ENDIF (NOT DEFINED ${VARIABLE})\n  420  ENDMACRO (CHECK_HDF5_FEATURE)\n  421  \n  ...\n  693  \n  694  if (CGNS_ENABLE_FORTRAN)\n  695:   if(DEFINED CMAKE_Fortran_MODULE_DIRECTORY)\n  696      list(APPEND headers\n  697        ${CMAKE_Fortran_MODULE_DIRECTORY}/cgns.mod)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/expat/vtkexpat/CMakeLists.txt:\n  105      set(_EXPAT_BUILD_PKGCONFIG_DEFAULT ON)\n  106  endif()\n  107: if(DEFINED BUILD_SHARED_LIBS)\n  108      set(_EXPAT_SHARED_LIBS_DEFAULT ${BUILD_SHARED_LIBS})\n  109  else()\n  ...\n  605      endif()\n  606  \n  607:     if(EXPAT_OSSFUZZ_BUILD AND NOT DEFINED ENV{LIB_FUZZING_ENGINE})\n  608          message(SEND_ERROR\n  609              \"OSS-Fuzz builds require the environment variable \"\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/exprtk/vtkexprtk/readme.txt:\n 1856       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 1857  \n 1858: [SECTION 15 - USER DEFINED FUNCTIONS]\n 1859  ExprTk provides a means  whereby custom functions can  be defined  and\n 1860  utilised within  expressions.  The   concept  requires  the  user   to\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/fides/vtkfides/CMakeLists.txt:\n   55  endif()\n   56  \n   57: if (NOT DEFINED FIDES_INSTALL_INCLUDE_DIR)\n   58    set(FIDES_INSTALL_INCLUDE_DIR \"include/fides\")\n   59  endif()\n   60  \n   61: if (NOT DEFINED FIDES_EXPORT_NAME)\n   62    set(FIDES_EXPORT_NAME \"FidesTargets\")\n   63  endif()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/kissfft/vtkkissfft/CMakeLists.txt:\n    1: if (NOT DEFINED KISSFFT_SCALAR_TYPE)\n    2    set(KISSFFT_SCALAR_TYPE \"double\")\n    3  endif ()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/pugixml/vtkpugixml/CMakeLists.txt:\n   44  \n   45  # This is used to backport a CMake 3.15 feature, but is also forwards compatible\n   46: if (NOT DEFINED CMAKE_MSVC_RUNTIME_LIBRARY)\n   47    set(CMAKE_MSVC_RUNTIME_LIBRARY\n   48      MultiThreaded$<$<CONFIG:Debug>:Debug>$<$<NOT:$<BOOL:${STATIC_CRT}>>:DLL>)\n   49  endif()\n   50  \n   51: if (NOT DEFINED CMAKE_CXX_STANDARD_REQUIRED)\n   52    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n   53  endif()\n   54  \n   55: if (NOT DEFINED CMAKE_CXX_STANDARD)\n   56    set(CMAKE_CXX_STANDARD 11)\n   57  endif()\n   ..\n  169  configure_file(scripts/pugixml.pc.in pugixml.pc @ONLY)\n  170  \n  171: if (NOT DEFINED PUGIXML_RUNTIME_COMPONENT)\n  172    set(PUGIXML_RUNTIME_COMPONENT Runtime)\n  173  endif()\n  174  \n  175: if (NOT DEFINED PUGIXML_LIBRARY_COMPONENT)\n  176    set(PUGIXML_LIBRARY_COMPONENT Library)\n  177  endif()\n  178  \n  179: if (NOT DEFINED PUGIXML_DEVELOPMENT_COMPONENT)\n  180    set(PUGIXML_DEVELOPMENT_COMPONENT Development)\n  181  endif()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/CMakeLists.txt:\n   20  set(VTKm_INSTALL_LIB_DIR \"${_vtk_build_LIBRARY_DESTINATION}\")\n   21  set(VTKm_INSTALL_INCLUDE_DIR \"${_vtk_build_HEADERS_DESTINATION}/vtkvtkm/vtk-m\")\n   22: if (DEFINED _vtk_build_LIBRARY_NAME_SUFFIX)\n   23    set(VTKm_CUSTOM_LIBRARY_SUFFIX \"-${_vtk_build_LIBRARY_NAME_SUFFIX}\")\n   24  endif ()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/CMakeLists.txt:\n   35  determine_version(${VTKm_SOURCE_DIR} ${GIT_EXECUTABLE} \"VTKm\")\n   36  \n   37: if (NOT DEFINED VTKm_INSTALL_INCLUDE_DIR)\n   38    set(VTKm_INSTALL_INCLUDE_DIR \"include/vtkm-${VTKm_VERSION_MAJOR}.${VTKm_VERSION_MINOR}\")\n   39  endif()\n   40: if (NOT DEFINED VTKm_INSTALL_CONFIG_DIR)\n   41    set(VTKm_INSTALL_CONFIG_DIR \"lib/cmake/vtkm-${VTKm_VERSION_MAJOR}.${VTKm_VERSION_MINOR}\")\n   42  endif()\n   43: if (NOT DEFINED VTKm_INSTALL_LIB_DIR)\n   44    set(VTKm_INSTALL_LIB_DIR \"lib\")\n   45  endif()\n   46: if (NOT DEFINED VTKm_INSTALL_BIN_DIR)\n   47    set(VTKm_INSTALL_BIN_DIR \"bin\")\n   48  endif()\n   49: if (NOT DEFINED VTKm_INSTALL_SHARE_DIR)\n   50    set(VTKm_INSTALL_SHARE_DIR \"share/vtkm-${VTKm_VERSION_MAJOR}.${VTKm_VERSION_MINOR}\")\n   51  endif()\n   52: if (NOT DEFINED VTKm_INSTALL_CMAKE_MODULE_DIR)\n   53    set(VTKm_INSTALL_CMAKE_MODULE_DIR \"${VTKm_INSTALL_SHARE_DIR}/cmake\")\n   54  endif()\n   55: if (NOT DEFINED VTKm_BUILD_CMAKE_BASE_DIR)\n   56    set(VTKm_BUILD_CMAKE_BASE_DIR \"${VTKm_BINARY_DIR}\")\n   57  endif()\n   58: if(NOT DEFINED VTKm_EXECUTABLE_OUTPUT_PATH)\n   59    ## Set the directory where the binaries will be stored\n   60    set(VTKm_EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)\n   61  endif()\n   62: if(NOT DEFINED VTKm_LIBRARY_OUTPUT_PATH)\n   63    ## Set the directory where the libraries will be stored\n   64    set(VTKm_LIBRARY_OUTPUT_PATH  ${PROJECT_BINARY_DIR}/lib)\n   65  endif()\n   66: if (NOT DEFINED VTKm_EXPORT_NAME)\n   67    set(VTKm_EXPORT_NAME \"VTKmTargets\")\n   68  endif()\n   ..\n   75  # This can be replaced when CMake 3.13 is our cmake_minimum_required\n   76  macro (vtkm_option variable)\n   77:   if (NOT DEFINED \"${variable}\")\n   78      option(\"${variable}\" ${ARGN})\n   79    endif ()\n   ..\n   90  vtkm_option(VTKm_ENABLE_DOCUMENTATION \"Build Doxygen documentation\" OFF)\n   91  vtkm_option(VTKm_ENABLE_EXAMPLES \"Build examples\" OFF)\n   92: if (NOT DEFINED VTKm_ENABLE_TESTING)\n   93      if(EXISTS \"${CMAKE_SOURCE_DIR}/.git\")\n   94        vtkm_option(VTKm_ENABLE_TESTING \"Enable VTKm Testing\" ON)\n   ..\n  206    # variable DEFAULT_CTEST_CONFIGURATION_TYPE is a non-cached variable set by\n  207    # CTest.cmake, so we'll use that to determine if it's already included.\n  208:   if(NOT DEFINED DEFAULT_CTEST_CONFIGURATION_TYPE)\n  209      include(CTest)\n  210      # Mark this as advanced to avoid confusion, since we actually rely on\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/vtkm/thirdparty/diy/CMakeLists.txt:\n   11  \n   12  include(CMakeDependentOption)\n   13: if (NOT DEFINED VTKm_ENABLE_DIY_NOMPI)\n   14    cmake_dependent_option(\n   15      VTKm_ENABLE_DIY_NOMPI \"Also build DIY without mpi\" OFF \"VTKm_ENABLE_MPI\" OFF)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/vtkm/thirdparty/diy/vtkmdiy/CMakeLists.txt:\n   23  # This can be replaced when CMake 3.13 is our cmake_minimum_required\n   24  macro (diy_option variable)\n   25:   if (NOT DEFINED \"${variable}\")\n   26      option(\"${variable}\" ${ARGN})\n   27    endif ()\n   ..\n   29  \n   30  macro (diy_dependent_option variable)\n   31:   if (NOT DEFINED \"${variable}\")\n   32      cmake_dependent_option(\"${variable}\" ${ARGN})\n   33    endif ()\n   ..\n   99  # if diy is a sub-project, the following variables allow the parent project to\n  100  # easily customize the library\n  101: if (NOT DEFINED diy_prefix)\n  102      set(diy_prefix \"diy\")\n  103  endif()\n  104: if (NOT DEFINED diy_install_include_dir)\n  105      set(diy_install_include_dir \"include\")\n  106  endif()\n  107: if (NOT DEFINED diy_install_bin_dir)\n  108      set(diy_install_bin_dir \"bin\")\n  109  endif()\n  110: if (NOT DEFINED diy_install_lib_dir)\n  111      set(diy_install_lib_dir \"lib\")\n  112  endif()\n  113: if (NOT DEFINED diy_export_name)\n  114      set(diy_export_name \"diy_targets\")\n  115  endif()\n  ...\n  245  \n  246  # install targets\n  247: if (NOT DEFINED diy_install_only_libraries) # defined by parent project if building for binary distribution\n  248      install(DIRECTORY ${PROJECT_SOURCE_DIR}/include/${diy_prefix} DESTINATION ${diy_install_include_dir})\n  249  \n\n/home/lfxpaul/dev/vtk/vtk3/vtk/ThirdParty/vtkm/vtkvtkm/vtk-m/vtkm/thirdparty/lodepng/CMakeLists.txt:\n   20  add_library(vtkm_lodepng STATIC ${headers} ${sources})\n   21  \n   22: if(DEFINED VTKm_CUSTOM_LIBRARY_SUFFIX)\n   23    set(_lib_suffix \"${VTKm_CUSTOM_LIBRARY_SUFFIX}\")\n   24  else()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/KWIML/vtkkwiml/CMakeLists.txt:\n   13      set(KWIML_TEST_ENABLE 1)\n   14    endif()\n   15:   if(NOT DEFINED KWIML_INSTALL_INCLUDE_DIR)\n   16      set(KWIML_INSTALL_INCLUDE_DIR include)\n   17    endif()\n   ..\n   19  else()\n   20    set(kwiml_standalone 0)\n   21:   if(KWIML_INSTALL_INCLUDE_DIR AND NOT DEFINED KWIML_INCLUDE_PREFIX)\n   22      message(FATAL_ERROR \"Host project must set KWIML_INCLUDE_PREFIX\")\n   23    endif()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/KWSys/vtksys/CMakeLists.txt:\n  132  if(KWSYS_CXX_STANDARD)\n  133    set(CMAKE_CXX_STANDARD \"${KWSYS_CXX_STANDARD}\")\n  134: elseif(NOT DEFINED CMAKE_CXX_STANDARD AND NOT DEFINED KWSYS_CXX_STANDARD)\n  135    if(CMAKE_CXX_COMPILER_ID STREQUAL \"Clang\"\n  136       AND CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\"\n  ...\n  219  \n  220  # Choose default shared/static build if not specified.\n  221: if(NOT DEFINED KWSYS_BUILD_SHARED)\n  222    set(KWSYS_BUILD_SHARED ${BUILD_SHARED_LIBS})\n  223  endif()\n  ...\n  395  endif()\n  396  \n  397: if(NOT DEFINED KWSYS_BUILD_PIC)\n  398    set(KWSYS_BUILD_PIC 0)\n  399  endif()\n  ...\n  415    )\n  416  \n  417: if(DEFINED KWSYS_PROCESS_USE_SELECT)\n  418    get_property(ProcessUNIX_FLAGS SOURCE ProcessUNIX.c PROPERTY COMPILE_FLAGS)\n  419    set_property(SOURCE ProcessUNIX.c PROPERTY COMPILE_FLAGS \"${ProcessUNIX_FLAGS} -DKWSYSPE_USE_SELECT=${KWSYSPE_USE_SELECT}\")\n  ...\n  432  \n  433  if(KWSYS_USE_SystemTools)\n  434:   if (NOT DEFINED KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP)\n  435      set(KWSYS_SYSTEMTOOLS_USE_TRANSLATION_MAP 1)\n  436    endif ()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/MetaIO/vtkmetaio/CMakeLists.txt:\n   25  endif()\n   26  \n   27: if(NOT DEFINED METAIO_TARGET)\n   28    set(METAIO_TARGET \"${METAIO_NAMESPACE}\")\n   29  endif()\n   30  \n   31: if(NOT DEFINED METAIO_PROJECT_NAME)\n   32    set(METAIO_PROJECT_NAME ${METAIO_NAMESPACE})\n   33  endif()\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Utilities/Python/CMakeLists.txt:\n   17  #]==]\n   18  \n   19: if (NOT DEFINED VTK_PYTHON_VERSION)\n   20    set(VTK_PYTHON_VERSION \"3\"\n   21      CACHE STRING \"\")\n   ..\n  100  endif ()\n  101  \n  102: if (NOT DEFINED VTK_INSTALL_PYTHON_MODULES_DIR)\n  103    if (WIN32 AND NOT CYGWIN)\n  104      set(VTK_INSTALL_PYTHON_MODULES_DIR\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Wrapping/Python/CMakeLists.txt:\n    1: if (NOT DEFINED VTK_INSTALL_PYTHON_EXES)\n    2    option(VTK_INSTALL_PYTHON_EXES \"Install vtkpython and pvtkpython\" ON)\n    3    mark_as_advanced(VTK_INSTALL_PYTHON_EXES)\n\n77 matches across 32 files\n\n\nSearching 2577 files for \"InitializeViewFromCamera\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx:\n  182  \n  183  //------------------------------------------------------------------------------\n  184: void vtkOpenVRRenderWindow::InitializeViewFromCamera(vtkCamera* srccam)\n  185  {\n  186    vtkRenderer* ren = static_cast<vtkRenderer*>(this->GetRenderers()->GetItemAsObject(0));\n  187    if (!ren)\n  188    {\n  189:     vtkErrorMacro(\"The renderer must be set prior to calling InitializeViewFromCamera\");\n  190      return;\n  191    }\n  ...\n  195    {\n  196      vtkErrorMacro(\n  197:       \"The renderer's active camera must be set prior to calling InitializeViewFromCamera\");\n  198      return;\n  199    }\n\n/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.h:\n  184     * set when this is called.\n  185     */\n  186:   void InitializeViewFromCamera(vtkCamera* cam);\n  187  \n  188    ///@{\n\n4 matches across 2 files\n",
					"settings":
					{
						"buffer_size": 54319,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx",
					"settings":
					{
						"buffer_size": 34263,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/.gitlab/ci/ctest_exclusions.cmake",
					"settings":
					{
						"buffer_size": 10587,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"wor",
						"Word Wrap: Toggle"
					],
					[
						"wo",
						"Word Wrap: Toggle"
					],
					[
						"w",
						"Word Wrap: Toggle"
					],
					[
						"bla",
						"Git Blame: Erase All"
					],
					[
						"blam",
						"Git Blame: Show All"
					],
					[
						"side",
						"View: Toggle Side Bar"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"syntax mark",
						"Set Syntax: MultiMarkdown"
					],
					[
						"mar",
						"Set Syntax: Markdown"
					],
					[
						"color",
						"MarkdownEditing: Change color scheme..."
					],
					[
						"synta",
						"Set Syntax: C++"
					],
					[
						"close",
						"File: Close All"
					],
					[
						"markdow sy",
						"Set Syntax: Markdown GFM"
					],
					[
						"markdown sy",
						"Set Syntax: Markdown"
					],
					[
						"markdown",
						"MarkdownEditing: Open Journal"
					],
					[
						"syntax mar",
						"Set Syntax: Markdown GFM"
					],
					[
						"mark",
						"Set Syntax: Markdown"
					],
					[
						"instal",
						"Package Control: Install Package"
					]
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/lfxpaul/dev/vtk/vtk3/vtk",
				"/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction",
				"/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction/Style",
				"/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction/Style/Testing",
				"/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction/Style/Testing/Python"
			],
			"file_history":
			[
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMMaterialLibraryProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspector.xml",
				"/home/lfxpaul/dev/pv1/paraview/Examples/Catalyst2/CxxMultimesh/catalyst_pipeline.py",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMPVRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/EmbossingRepresentations/Representations/vtkBumpMapRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMChartSeriesSelectionDomain.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/LagrangianParticleTracker/pqIntegrationModelSurfaceHelperWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataInformationModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqApplyBehavior.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqServer.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestCategoricalMultiBlock.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/Resources/views_and_representations.xml",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.h",
				"/tmp/mozilla_lfxpaul0/vtkSPOSFix.txx",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestCameraWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMSourceProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositePolyDataMapper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/DataModel/vtkCompositeDataSet.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithmOutput.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/Resources/UI/pqMultiBlockInspectorWidget.ui",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqDataAssemblyPropertyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqCameraToolbar.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkView.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqView.cxx",
				"/home/lfxpaul/dev/notes/CEA.md",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Widgets/pqLineEdit.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestResliceCursorWidget3.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayStereo.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/OpenGL2/vtkOpenGLRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/ServerManager/vtkSMBoundsDomain.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/Core/vtkInformationKey.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Clients/ParaView/Testing/Python/TestStereoSaveScreenshot.py",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkStereoCompositor.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Components/pqDoubleVectorPropertyWidget.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.h",
				"/home/lfxpaul/dev/data/pbr/dirToAngle.py",
				"/home/lfxpaul/dev/notes/zSpace/HomePage.md"
			],
			"find":
			{
				"height": 64.0
			},
			"find_in_files":
			{
				"height": 168.0,
				"where_history":
				[
					"Rendering/*",
					"*.txt"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"InitializeViewFromCamera",
					"DEFINED",
					"VTK_CAN_DO_ONSCREEN",
					"define",
					"VTK_CAN_DO_ON",
					"ext",
					"EXT"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/lfxpaul/dev/vtk/vtk3/vtk"
				}
			],
			"groups":
			[
				{
					"selected": 4,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/Interaction/Style/Testing/Python/CMakeLists.txt",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 630,
								"regions":
								{
								},
								"selection":
								[
									[
										630,
										630
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content"
									],
									"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true,
									"word_wrap": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/CMake/vtkOpenGLOptions.cmake",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 5419,
								"regions":
								{
								},
								"selection":
								[
									[
										1711,
										1711
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												1710,
												1711
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"region.yellowish"
											]
										},
										"open":
										{
											"1":
											[
												1691,
												1692
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content"
									],
									"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 705.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 54319,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												198,
												204
											],
											[
												442,
												448
											],
											[
												658,
												664
											],
											[
												955,
												961
											],
											[
												1193,
												1199
											],
											[
												1281,
												1287
											],
											[
												1409,
												1415
											],
											[
												1524,
												1530
											],
											[
												1691,
												1697
											],
											[
												1960,
												1966
											],
											[
												2193,
												2199
											],
											[
												2430,
												2436
											],
											[
												2864,
												2870
											],
											[
												3286,
												3292
											],
											[
												3568,
												3574
											],
											[
												3720,
												3726
											],
											[
												3961,
												3967
											],
											[
												4309,
												4315
											],
											[
												4489,
												4495
											],
											[
												4669,
												4675
											],
											[
												5001,
												5007
											],
											[
												5077,
												5083
											],
											[
												5463,
												5469
											],
											[
												5748,
												5754
											],
											[
												5936,
												5942
											],
											[
												6075,
												6081
											],
											[
												6341,
												6347
											],
											[
												6691,
												6697
											],
											[
												7095,
												7101
											],
											[
												7319,
												7325
											],
											[
												7632,
												7638
											],
											[
												7804,
												7810
											],
											[
												7906,
												7912
											],
											[
												8243,
												8249
											],
											[
												8502,
												8508
											],
											[
												8669,
												8675
											],
											[
												8746,
												8752
											],
											[
												8984,
												8990
											],
											[
												9182,
												9188
											],
											[
												9561,
												9567
											],
											[
												9645,
												9651
											],
											[
												9884,
												9890
											],
											[
												10141,
												10147
											],
											[
												10273,
												10279
											],
											[
												10587,
												10593
											],
											[
												10827,
												10833
											],
											[
												10947,
												10953
											],
											[
												11109,
												11115
											],
											[
												11366,
												11372
											],
											[
												11741,
												11747
											],
											[
												11965,
												11971
											],
											[
												12097,
												12103
											],
											[
												12328,
												12334
											],
											[
												12658,
												12664
											],
											[
												12956,
												12962
											],
											[
												13262,
												13268
											],
											[
												13568,
												13574
											],
											[
												13945,
												13951
											],
											[
												14208,
												14214
											],
											[
												14527,
												14533
											],
											[
												14744,
												14750
											],
											[
												14906,
												14912
											],
											[
												15254,
												15260
											],
											[
												15533,
												15539
											],
											[
												15725,
												15731
											],
											[
												15897,
												15903
											],
											[
												16105,
												16111
											],
											[
												16523,
												16529
											],
											[
												16697,
												16703
											],
											[
												16773,
												16779
											],
											[
												16994,
												17000
											],
											[
												17296,
												17302
											],
											[
												17734,
												17740
											],
											[
												18081,
												18087
											],
											[
												18237,
												18243
											],
											[
												18507,
												18513
											],
											[
												18845,
												18851
											],
											[
												18978,
												18984
											],
											[
												19065,
												19071
											],
											[
												19328,
												19334
											],
											[
												19514,
												19520
											],
											[
												19741,
												19747
											],
											[
												20141,
												20147
											],
											[
												20417,
												20423
											],
											[
												20710,
												20716
											],
											[
												20793,
												20799
											],
											[
												20924,
												20930
											],
											[
												21057,
												21063
											],
											[
												21211,
												21217
											],
											[
												21471,
												21477
											],
											[
												21703,
												21709
											],
											[
												21850,
												21856
											],
											[
												21981,
												21987
											],
											[
												22276,
												22282
											],
											[
												22518,
												22524
											],
											[
												22642,
												22648
											],
											[
												22884,
												22890
											],
											[
												23144,
												23150
											],
											[
												23437,
												23443
											],
											[
												23769,
												23775
											],
											[
												24039,
												24045
											],
											[
												24266,
												24272
											],
											[
												24458,
												24464
											],
											[
												24733,
												24739
											],
											[
												24866,
												24872
											],
											[
												24999,
												25005
											],
											[
												25136,
												25142
											],
											[
												25536,
												25542
											],
											[
												25913,
												25919
											],
											[
												26076,
												26082
											],
											[
												26278,
												26284
											],
											[
												26299,
												26305
											],
											[
												26523,
												26529
											],
											[
												26589,
												26595
											],
											[
												26655,
												26661
											],
											[
												26721,
												26727
											],
											[
												27003,
												27009
											],
											[
												27189,
												27195
											],
											[
												27584,
												27590
											],
											[
												27945,
												27951
											],
											[
												28217,
												28223
											],
											[
												28409,
												28415
											],
											[
												28784,
												28790
											],
											[
												28996,
												29002
											],
											[
												29390,
												29396
											],
											[
												29700,
												29706
											],
											[
												29936,
												29942
											],
											[
												30159,
												30165
											],
											[
												30385,
												30391
											],
											[
												30694,
												30700
											],
											[
												31020,
												31026
											],
											[
												31166,
												31172
											],
											[
												31313,
												31319
											],
											[
												31581,
												31587
											],
											[
												31965,
												31971
											],
											[
												32152,
												32158
											],
											[
												32208,
												32214
											],
											[
												32402,
												32408
											],
											[
												32514,
												32520
											],
											[
												32800,
												32806
											],
											[
												33043,
												33049
											],
											[
												33086,
												33092
											],
											[
												33369,
												33375
											],
											[
												33640,
												33646
											],
											[
												34004,
												34010
											],
											[
												34288,
												34294
											],
											[
												34334,
												34340
											],
											[
												34472,
												34478
											],
											[
												34490,
												34496
											],
											[
												34544,
												34550
											],
											[
												34814,
												34820
											],
											[
												35075,
												35081
											],
											[
												35268,
												35274
											],
											[
												35489,
												35495
											],
											[
												35556,
												35562
											],
											[
												35681,
												35687
											],
											[
												36033,
												36039
											],
											[
												36481,
												36487
											],
											[
												36497,
												36503
											],
											[
												36895,
												36902
											],
											[
												37100,
												37107
											],
											[
												37385,
												37392
											],
											[
												37691,
												37698
											],
											[
												38051,
												38058
											],
											[
												38347,
												38354
											],
											[
												38638,
												38645
											],
											[
												38925,
												38932
											],
											[
												39131,
												39138
											],
											[
												39187,
												39194
											],
											[
												39437,
												39444
											],
											[
												39719,
												39726
											],
											[
												40019,
												40026
											],
											[
												40278,
												40285
											],
											[
												40499,
												40506
											],
											[
												40731,
												40738
											],
											[
												41058,
												41065
											],
											[
												41444,
												41451
											],
											[
												41525,
												41532
											],
											[
												41658,
												41665
											],
											[
												41872,
												41879
											],
											[
												42161,
												42168
											],
											[
												42435,
												42442
											],
											[
												42771,
												42778
											],
											[
												42978,
												42985
											],
											[
												43135,
												43142
											],
											[
												43349,
												43356
											],
											[
												43473,
												43480
											],
											[
												43750,
												43757
											],
											[
												43930,
												43937
											],
											[
												44245,
												44252
											],
											[
												44532,
												44539
											],
											[
												44661,
												44668
											],
											[
												44843,
												44850
											],
											[
												45120,
												45127
											],
											[
												45319,
												45326
											],
											[
												45439,
												45446
											],
											[
												45609,
												45616
											],
											[
												45730,
												45737
											],
											[
												45851,
												45858
											],
											[
												46200,
												46207
											],
											[
												46505,
												46512
											],
											[
												46667,
												46674
											],
											[
												46829,
												46836
											],
											[
												46930,
												46937
											],
											[
												47031,
												47038
											],
											[
												47187,
												47194
											],
											[
												47334,
												47341
											],
											[
												47459,
												47466
											],
											[
												47657,
												47664
											],
											[
												47852,
												47859
											],
											[
												48073,
												48080
											],
											[
												48318,
												48325
											],
											[
												48655,
												48662
											],
											[
												48962,
												48969
											],
											[
												49349,
												49356
											],
											[
												49507,
												49514
											],
											[
												49750,
												49757
											],
											[
												49833,
												49840
											],
											[
												49946,
												49953
											],
											[
												50047,
												50054
											],
											[
												50148,
												50155
											],
											[
												50288,
												50295
											],
											[
												50691,
												50698
											],
											[
												50941,
												50948
											],
											[
												51142,
												51149
											],
											[
												51442,
												51449
											],
											[
												51477,
												51484
											],
											[
												51700,
												51707
											],
											[
												51840,
												51847
											],
											[
												51947,
												51954
											],
											[
												52263,
												52270
											],
											[
												52496,
												52503
											],
											[
												52606,
												52613
											],
											[
												52805,
												52812
											],
											[
												52942,
												52949
											],
											[
												53142,
												53149
											],
											[
												53611,
												53635
											],
											[
												53859,
												53883
											],
											[
												54032,
												54056
											],
											[
												54228,
												54252
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										54319,
										54319
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												54291,
												54292
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 3,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 18150.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 34263,
								"regions":
								{
								},
								"selection":
								[
									[
										5477,
										5477
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												7444,
												7445
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												5241,
												5242
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2743.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/lfxpaul/dev/vtk/vtk3/vtk/.gitlab/ci/ctest_exclusions.cmake",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 10587,
								"regions":
								{
								},
								"selection":
								[
									[
										10364,
										10364
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												10427,
												10428
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/round_bracket.png",
												"region.yellowish"
											]
										},
										"open":
										{
											"1":
											[
												10083,
												10084
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
									"tab_size": 4,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2936.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 40.0
			},
			"input":
			{
				"height": 50.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.diagnostics":
			{
				"height": 185.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,768,34,1150,1051,1920,1080",
			"project": "",
			"replace":
			{
				"height": 76.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						".gitlab/ci/excl",
						".gitlab/ci/ctest_exclusions.cmake"
					],
					[
						"vtkOpen",
						"CMake/vtkOpenGLOptions.cmake"
					],
					[
						"Interaction Style Python Cma",
						"Interaction/Style/Testing/Python/CMakeLists.txt"
					],
					[
						"TestDragon",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"TestAvatar",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestAvatar.cxx"
					],
					[
						"vvtkOpenVRRenderWi",
						"VTK/Rendering/OpenVR/vtkOpenVRRenderWindow.cxx"
					],
					[
						"TestDrago",
						"VTK/Rendering/OpenVR/Testing/Cxx/TestDragon.cxx"
					],
					[
						"vtkVolumeProp",
						"VTK/Rendering/Core/vtkVolumeProperty.cxx"
					],
					[
						"vtkVolu",
						"Remoting/Views/vtkVolumeRepresentation.cxx"
					],
					[
						"vtkDataArr",
						"VTK/Common/Core/vtkDataArray.cxx"
					],
					[
						"vtkSMSEssionCl",
						"Remoting/ServerManager/vtkSMSessionClient.cxx"
					],
					[
						"vtkPVCOmpo",
						"Remoting/Views/vtkPVCompositeRepresentation.cxx"
					],
					[
						"vtkPythonVIew",
						"Remoting/ViewsPython/vtkPythonView.cxx"
					],
					[
						"pqC",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkClientServerSt",
						"Remoting/ClientServerStream/vtkClientServerStream.cxx"
					],
					[
						"vtkSMRender",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqCame",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeome",
						"Remoting/Views/vtkGeometryRepresentation.cxx"
					],
					[
						"vtkContext2DScal",
						"Remoting/Views/vtkContext2DScalarBarActor.cxx"
					],
					[
						"vtkCamera",
						"VTK/Rendering/Core/vtkCamera.cxx"
					],
					[
						"vtkSIProper",
						"Remoting/ServerManager/vtkSIProperty.cxx"
					],
					[
						"vtkSI",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIInt",
						"Remoting/ServerManager/vtkSIIntVectorProperty.h"
					],
					[
						"vtkSIIndexS",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIProx",
						"Remoting/ServerManager/vtkSIProxy.h"
					],
					[
						"vtkSIP",
						"Remoting/ServerManager/vtkSIProperty.h"
					],
					[
						"vtkSIDataA",
						"Remoting/ServerManager/vtkSIDataArrayProperty.h"
					],
					[
						"vtkPVDataR",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkPVCompo",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProx",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkDataRepre",
						"VTK/Views/Core/vtkDataRepresentation.h"
					],
					[
						"vtkPVDataRepres",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeR",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkPVCompos",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProperty",
						"Remoting/ServerManager/vtkSMProperty.cxx"
					],
					[
						"vtkPVVIew",
						"Remoting/Views/vtkPVView.cxx"
					],
					[
						"pqCam",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkCompositeDataD",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkDataAsse",
						"VTK/Common/DataModel/vtkDataAssemblyUtilities.cxx"
					],
					[
						"pqCamera",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqMul",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"pqCameraT",
						"Qt/ApplicationComponents/Resources/UI/pqCameraToolbar.ui"
					],
					[
						"vtkVectorO",
						"VTK/Common/DataModel/vtkVectorOperators.h"
					],
					[
						"vtkVector",
						"VTK/Common/DataModel/vtkVector.h"
					],
					[
						"TemporalPa",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkTemporalPat",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkStaticCellLo",
						"VTK/Common/DataModel/vtkStaticCellLocator.h"
					],
					[
						"vtkCompo",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSelect",
						"Remoting/Views/vtkSelectionRepresentation.h"
					],
					[
						"TestParaView",
						"Remoting/Views/Testing/Cxx/TestParaViewPipelineControllerWithRendering.cxx"
					],
					[
						"vtkRotation",
						"VTK/Filters/General/vtkRotationFilter.h"
					],
					[
						"pqCamer",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeom",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVRende",
						"Remoting/Views/vtkPVRenderView.cxx"
					],
					[
						"vtkOsprayRender",
						"VTK/Rendering/RayTracing/vtkOSPRayRendererNode.cxx"
					],
					[
						"TestOsprayP",
						"VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayPass.cxx"
					],
					[
						"vtkOSPRAYMA",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialHelpers.cxx"
					],
					[
						"QVTKOpen",
						"VTK/GUISupport/Qt/QVTKOpenGLNativeWidget.h"
					],
					[
						"pqMate",
						"Qt/ApplicationComponents/Resources/UI/pqMaterialEditor.ui"
					],
					[
						"vtkShaderBal",
						"VTKExtensions/Rendering/vtkShaderBallScene.h"
					],
					[
						"pqMateri",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMMa",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"WriterFac",
						"Remoting/ServerManager/vtkSMWriterFactory.h"
					],
					[
						"pqSaveData",
						"Qt/ApplicationComponents/pqSaveDataReaction.cxx"
					],
					[
						"vtkOSprayMat",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialLibrary.cxx"
					],
					[
						"vtkSMMateri",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"pqMateria",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMP",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkSMSource",
						"Remoting/ServerManager/vtkSMSourceProxy.h"
					],
					[
						"vtkSMRepre",
						"Remoting/Views/vtkSMRepresentationProxy.h"
					],
					[
						"vtkRenderWIndowInt",
						"Rendering/Core/vtkRenderWindowInteractor3D.cxx"
					],
					[
						"vtkOpenVRRenderW",
						"Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h"
					],
					[
						"vtkRenderWindowInteract",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkRenderWIndowInte",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkInteractorOb",
						"Rendering/Core/vtkInteractorObserver.h"
					],
					[
						"vtkInteractorStyle.",
						"Rendering/Core/vtkInteractorStyle.cxx"
					],
					[
						"TestPBR",
						"Rendering/OpenGL2/Testing/Cxx/TestPBRAnisotropy.cxx"
					],
					[
						"Renderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderWindowInte",
						"Rendering/Core/vtkRenderWindowInteractor.h"
					],
					[
						"vtkInteractorStyleCame",
						"Interaction/Style/vtkInteractorStyleTrackballCamera.h"
					],
					[
						"vtkInteractorStyleTra",
						"Interaction/Style/vtkInteractorStyleTrackball.h"
					],
					[
						"Multiblock",
						"Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml"
					],
					[
						"t",
						"~/dev/pv1/build/t.xml"
					],
					[
						"vtkSMRenderV",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqAc",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqAct",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqRep",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqDataR",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqDataRp",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqMutli",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"views and",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"Zoom",
						"Clients/ParaView/Testing/XML/ZoomClosest.xml"
					],
					[
						"t.xm",
						"~/dev/pv1/build/t.xml"
					],
					[
						"pqProxyWid",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqBasic",
						"ThirdParty/QtTesting/vtkqttesting/pqBasicWidgetEventPlayer.cxx"
					],
					[
						"pqMulti",
						"Qt/Components/pqMultiBlockInspectorWidget.h"
					],
					[
						"pqEventPl",
						"ThirdParty/QtTesting/vtkqttesting/pqEventPlayer.cxx"
					],
					[
						".xml",
						"Clients/ParaView/Testing/XML/Flow.xml"
					],
					[
						"PBR xml",
						"Clients/ParaView/Testing/XML/ClearCoatPBR.xml"
					],
					[
						"PBR.xml",
						"Clients/ParaView/Testing/XML/EdgeTintPBR.xml"
					],
					[
						"pqFind",
						"Qt/ApplicationComponents/pqFindDataWidget.h"
					],
					[
						"pqActiveO",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqProxyWi",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqProx",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqActi",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqRepse",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqActive",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"views and re",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"views and repre",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"pqDataRe",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqCameraTo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"MultiblockInspe",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"vtkPVGeome",
						"VTKExtensions/FiltersRendering/vtkPVGeometryFilter.cxx"
					],
					[
						"vtkAlgo",
						"VTK/Common/ExecutionModel/vtkAlgorithm.h"
					],
					[
						"vtkSMLink",
						"Remoting/ServerManager/vtkSMLink.h"
					],
					[
						"pqLinkM",
						"Qt/Core/pqLinksModel.h"
					],
					[
						"pqLink",
						"Qt/Components/pqLinksManager.h"
					],
					[
						"vtkPVIn",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVDataInfo",
						"Remoting/Core/vtkPVDataInformation.h"
					],
					[
						"vtkSMMaterial",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"vtkCompositeDataDispl",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkGeometryR",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetGe",
						"VTK/Common/Core/vtkSetGet.h"
					],
					[
						"vtkSMProp",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"vtkPVComp",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkGeometry",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetG",
						"VTK/Common/Core/vtkSetGet.h"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 495.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 83,
			"workspace_name": ""
		},
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"inform",
						"information_only"
					],
					[
						"def",
						"default_values"
					],
					[
						"Selec",
						"SelectionRepresentation\t  vtkSelectionRepresentation *"
					],
					[
						"Get",
						"GetVTKClassName()\t  char *"
					],
					[
						"Update",
						"UpdateSelfAndAllInputs()\t  void"
					],
					[
						"Rende",
						"RenderWidget"
					],
					[
						"Upd",
						"UpdatePropertyInformation(…)\t  [2 overloads]"
					],
					[
						"vi",
						"isVisible() const\t  bool"
					],
					[
						"update",
						"updateEnabledState()\t  void"
					],
					[
						"pqMulti",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"rend",
						"renderViewEventually()\t  void"
					],
					[
						"pqMul",
						"pqMultiBlockInspectorWidget\t  Class"
					],
					[
						"Q_S",
						"Q_SIGNALS\t  Text"
					],
					[
						"repr",
						"pqDataRepresentation\t  Class"
					],
					[
						"repre",
						"representationChanged"
					],
					[
						"vtkSMP",
						"vtkSMPropertyHelper"
					],
					[
						"visi",
						"visibleDataBounds2\t  double [6]"
					],
					[
						"GetVisi",
						"GetVisibleDataBounds()\t  double *"
					],
					[
						"Compute",
						"ComputeVisibleDataBounds"
					],
					[
						"vtkGeom",
						"vtkGeometryRepresentation.h\"\t  File"
					],
					[
						"vtkPVCom",
						"vtkPVCompositeRepresentation.h\"\t  File"
					],
					[
						"GetName",
						"GetXMLName()\t  char *"
					],
					[
						"vtkSMProper",
						"vtkSMPropertyHelper\t  Class"
					],
					[
						"GetREp",
						"getRepresentation(int index) const\t  pqRepresentation *"
					],
					[
						"getNum",
						"getNumberOfOutputPorts() const\t  int"
					],
					[
						"GetRe",
						"getRepresentations(…)\t  [2 overloads]"
					],
					[
						"getRep",
						"getNumberOfVisibleRepresentations() const\t  int"
					],
					[
						"Remo",
						"RemoveAllVariables"
					],
					[
						"index",
						"QModelIndexList"
					],
					[
						"pqCam",
						"pqCameraToolbar\t  Class"
					],
					[
						"gfV",
						"gfVTK_"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "/*=========================================================================\n\n  Program:   Visualization Toolkit\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n#include \"vtkOpenXRCamera.h\"\n\n#include \"vtkObjectFactory.h\"\n#include \"vtkOpenGLError.h\"\n#include \"vtkOpenGLState.h\"\n#include \"vtkOpenXR.h\"\n#include \"vtkOpenXRRenderWindow.h\"\n#include \"vtkPerspectiveTransform.h\"\n#include \"vtkRenderer.h\"\n#include \"vtkTimerLog.h\"\n#include \"vtkTransform.h\"\n\n#include \"vtkMatrix3x3.h\"\n#include \"vtkQuaternion.h\"\n\n#include \"vtkMath.h\"\n\n#include \"vtkOpenXRManager.h\"\n\n#include <cmath>\n\n#include \"vtkOpenXRUtilities.h\"\n\nvtkStandardNewMacro(vtkOpenXRCamera);\n\n//------------------------------------------------------------------------------\nvtkOpenXRCamera::vtkOpenXRCamera()\n{\n  this->ClippingRange[0] = 0.1;\n  this->ClippingRange[1] = 100.0;\n}\n\n//------------------------------------------------------------------------------\nvoid vtkOpenXRCamera::UpdateViewTransform(vtkOpenXRRenderWindow* win)\n{\n  const uint32_t eye = this->LeftEye ? LEFT_EYE : RIGHT_EYE;\n  const XrPosef& xrPose = vtkOpenXRManager::GetInstance()->GetViewPose(eye);\n\n  // Convert a XrPosef to a vtk view matrix\n  vtkNew<vtkMatrix4x4> viewMatrix;\n  vtkOpenXRUtilities::CreateViewMatrix(viewMatrix, xrPose);\n\n  // Transform from physical to world space\n  vtkNew<vtkMatrix4x4> physicalToWorldMatrix;\n  win->GetPhysicalToWorldMatrix(physicalToWorldMatrix);\n\n  // Remove scale\n  /*physicalToWorldMatrix->SetElement(0,0,1.0);\n  physicalToWorldMatrix->SetElement(1,1,1.0);\n  physicalToWorldMatrix->SetElement(2,2,1.0);*/\n\n  vtkMatrix4x4::Multiply4x4(viewMatrix, physicalToWorldMatrix, viewMatrix);\n\n  this->ModelViewTransform->Identity();\n  this->ModelViewTransform->SetMatrix(viewMatrix);\n}\n\n//------------------------------------------------------------------------------\nvoid vtkOpenXRCamera::UpdateProjectionMatrix()\n{\n  const uint32_t eye = this->LeftEye ? LEFT_EYE : RIGHT_EYE;\n  const XrFovf& xrFov = vtkOpenXRManager::GetInstance()->GetProjectionFov(eye);\n\n  double znear = this->ClippingRange[0];\n  double zfar = this->ClippingRange[1];\n\n  vtkNew<vtkMatrix4x4> projMatrix;\n  vtkOpenXRUtilities::CreateProjectionFov(projMatrix, xrFov, znear, zfar);\n\n  this->SetUseExplicitProjectionTransformMatrix(true);\n  this->SetExplicitProjectionTransformMatrix(projMatrix);\n}\n\n//------------------------------------------------------------------------------\nvoid vtkOpenXRCamera::Render(vtkRenderer* ren)\n{\n  vtkOpenGLClearErrorMacro();\n\n  vtkOpenXRRenderWindow* win = vtkOpenXRRenderWindow::SafeDownCast(ren->GetRenderWindow());\n  vtkOpenGLState* ostate = win->GetState();\n\n  // Update the projection and view transform depending on LeftEye value\n  this->UpdateViewTransform(win);\n  this->UpdateProjectionMatrix();\n\n  int renSize[2];\n  win->GetRenderBufferSize(renSize[0], renSize[1]);\n\n  ostate->vtkglViewport(0, 0, renSize[0], renSize[1]);\n  ostate->vtkglScissor(0, 0, renSize[0], renSize[1]);\n  if ((ren->GetRenderWindow())->GetErase() && ren->GetErase())\n  {\n    ren->Clear();\n  }\n\n  vtkOpenGLCheckErrorMacro(\"failed after Render\");\n}\n",
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenXR/vtkOpenXRCamera.cxx",
					"file_size": 3482,
					"file_write_time": 132740992192162205,
					"settings":
					{
						"buffer_size": 3482,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRPanelRepresentation.h",
					"settings":
					{
						"buffer_size": 5595,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "Searching 14 files for \"= 0\" (case sensitive)\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRCamera.h:\n   38     * to device coordinates. Used for rendering devices.\n   39     */\n   40:   virtual void GetTrackingToDCMatrix(vtkMatrix4x4*& TCDCMatrix) = 0;\n   41  \n   42  protected:\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRCollaborationClient.h:\n   55    enum ArgumentType\n   56    {\n   57:     Double = 0,\n   58      Int32,\n   59      String\n   ..\n   79  \n   80      ArgumentType Type;\n   81:     uint16_t Count = 0;\n   82      std::shared_ptr<void> Data;\n   83    };\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRControlsHelper.h:\n  148    static void MoveEvent(vtkObject* object, unsigned long event, void* clientdata, void* calldata);\n  149  \n  150:   virtual void InitControlPosition() = 0;\n  151  \n  152    vtkNew<vtkTransform> TempTransform;\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRMenuWidget.h:\n   71    enum _WidgetState\n   72    {\n   73:     Start = 0,\n   74      Active\n   75    };\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRModel.h:\n   65    ~vtkVRModel() override;\n   66  \n   67:   virtual void FillModelHelper() = 0;\n   68:   virtual void SetPositionAndTCoords() = 0;\n   69:   virtual void CreateTextureObject(vtkOpenGLRenderWindow* win) = 0;\n   70:   virtual void LoadModelAndTexture(vtkOpenGLRenderWindow* win) = 0;\n   71  \n   72    std::string ModelName;\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRPanelRepresentation.h:\n   58    enum _InteractionState\n   59    {\n   60:     Outside = 0,\n   61      Moving\n   62    };\n   ..\n   73      unsigned long event, void* calldata) override;\n   74    int ComputeComplexInteractionState(vtkRenderWindowInteractor* iren, vtkAbstractWidget* widget,\n   75:     unsigned long event, void* calldata, int modify = 0) override;\n   76    void EndComplexInteraction(vtkRenderWindowInteractor* iren, vtkAbstractWidget* widget,\n   77      unsigned long event, void* calldata) override;\n   ..\n  158    enum CoordinateSystems\n  159    {\n  160:     World = 0,\n  161      HMD = 1,\n  162      LeftController = 2,\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRPanelWidget.h:\n   69    enum _WidgetState\n   70    {\n   71:     Start = 0,\n   72      Active\n   73    };\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRRenderer.h:\n   62     * Abstract function that creates a new Camera suitable for use with this type of Renderer.\n   63     */\n   64:   vtkCamera* MakeCamera() override = 0;\n   65  \n   66    /**\n\n/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRRenderWindow.h:\n   84     * Must be overriden to instantiate a specific interactor depending on the API\n   85     */\n   86:   vtkRenderWindowInteractor* MakeRenderWindowInteractor() override = 0;\n   87  \n   88    //@{\n   ..\n  110    }\n  111    vtkVRModel* GetTrackedDeviceModel(uint32_t idx) { return this->TrackedDeviceToRenderModel[idx]; }\n  112:   virtual vtkVRModel* GetTrackedDeviceModel(vtkEventDataDevice idx, uint32_t index) = 0;\n  113  \n  114    /**\n  ...\n  293     * Render the controller and base station models\n  294     */\n  295:   virtual void RenderModels() = 0;\n  296  \n  297    /**\n  ...\n  301     */\n  302    virtual bool GetPoseMatrixWorldFromDevice(\n  303:     vtkEventDataDevice device, vtkMatrix4x4* poseMatrixWorld) = 0;\n  304  \n  305    //@{\n  ...\n  326     * If succeed, returns true, else false.\n  327     */\n  328:   virtual bool GetSizeFromAPI() = 0;\n  329:   virtual void DestroySpecificResources() = 0;\n  330  \n  331    virtual const char* GetWindowTitleFromAPI() { return \"VTK - VR\"; }\n  ...\n  333    struct FramebufferDesc\n  334    {\n  335:     GLuint ResolveFramebufferId = 0;\n  336:     GLuint ResolveColorTextureId = 0;\n  337:     GLuint ResolveDepthTextureId = 0;\n  338    };\n  339  \n  ...\n  341    std::vector<FramebufferDesc> FramebufferDescs;\n  342  \n  343:   virtual bool CreateFramebuffers() = 0;\n  344  \n  345    void RenderFramebuffer(FramebufferDesc& framebufferDesc);\n\n24 matches across 9 files\n",
					"settings":
					{
						"buffer_size": 3981,
						"line_ending": "Unix",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"contents": "/*=========================================================================\n\n  Program:   Visualization Toolkit\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n\n#include \"vtkOpenVRCollaborationClient.h\"\n\n#include \"vtkCallbackCommand.h\"\n#include \"vtkCamera.h\"\n#include \"vtkObjectFactory.h\"\n#include \"vtkOpenGLAvatar.h\"\n#include \"vtkOpenGLRenderer.h\"\n#include \"vtkOpenVRModel.h\"\n#include \"vtkOpenVRRenderWindow.h\"\n#include \"vtkProperty.h\"\n#include \"vtkRenderWindowInteractor.h\"\n#include \"vtkTextProperty.h\"\n#include \"vtkTimerLog.h\"\n#include \"vtkTransform.h\"\n\n#include <sstream>\n#include <zmq.h>\nnamespace\n{\nconst double RAY_LENGTH = 200.0;    // in meters\nconst double AVATAR_TIMEOUT = 10.0; // in seconds\nconst int HEARTBEAT_INTERVAL = 1.0; // in seconds\nconst int LIVE_COUNT = 3;\n\n// http://colorbrewer2.org/#type=qualitative&scheme=Pastel1&n=9\ndouble AVATAR_COLORS[][3] = {\n  { 179 / 255.0, 205 / 255.0, 227 / 255.0 },\n  { 204 / 255.0, 235 / 255.0, 197 / 255.0 },\n  { 222 / 255.0, 203 / 255.0, 228 / 255.0 },\n  { 254 / 255.0, 217 / 255.0, 166 / 255.0 },\n  { 255 / 255.0, 255 / 255.0, 204 / 255.0 },\n  { 229 / 255.0, 216 / 255.0, 189 / 255.0 },\n  { 253 / 255.0, 218 / 255.0, 236 / 255.0 },\n  { 242 / 255.0, 242 / 255.0, 242 / 255.0 },\n  { 251 / 255.0, 180 / 255.0, 174 / 255.0 },\n};\n\nconst int NUM_COLORS = sizeof(AVATAR_COLORS) / sizeof(AVATAR_COLORS[0]);\n\n// two local helper functions for libzmq\nstd::string _zmq_string_recv(void* socket, int flags)\n{\n  zmq_msg_t msg;\n  int rc = zmq_msg_init(&msg);\n  assert(rc == 0);\n  rc = zmq_msg_recv(&msg, socket, flags);\n  assert(rc != -1);\n  return std::string(static_cast<const char*>(zmq_msg_data(&msg)), zmq_msg_size(&msg));\n}\n\n//  Receives all remaining message parts from socket, does nothing.\nvoid _zmq_sock_clear(void* socket)\n{\n  int more;\n  size_t more_size = sizeof(more);\n  zmq_getsockopt(socket, ZMQ_RCVMORE, &more, &more_size);\n  while (more)\n  {\n    //  Process all parts of the message\n    zmq_msg_t part;\n    int rc = zmq_msg_init(&part);\n    assert(rc == 0);\n    /* Block until a message is available to be received from socket */\n    rc = zmq_msg_recv(&part, socket, 0);\n    assert(rc != -1);\n\n    zmq_getsockopt(socket, ZMQ_RCVMORE, &more, &more_size);\n  }\n}\n\n} // end anon namespace\n\n// simple macro to package up arguments to call Log()\n#define mvLog(verbosity, x)                                                                        \\\n  std::ostringstream ss;                                                                           \\\n  ss << x;                                                                                         \\\n  this->Log(verbosity, ss.str());\n\n// PIMPL to keep zeromq out of the class interface\nclass vtkOpenVRCollaborationClientInternal\n{\npublic:\n  void* Context;\n  void* Requester;\n  void* Subscriber;\n  zmq_pollitem_t CollabPollItems[2];\n\n  vtkOpenVRCollaborationClientInternal()\n    : CollabPollItems{ { nullptr, 0, ZMQ_POLLIN, 0 }, { nullptr, 0, ZMQ_POLLIN, 0 } }\n  {\n    // ceate context\n    this->Context = zmq_ctx_new();\n    assert(this->Context);\n    int rc = zmq_ctx_set(this->Context, ZMQ_IO_THREADS, 1);\n    assert(rc == 0);\n    rc = zmq_ctx_set(this->Context, ZMQ_MAX_SOCKETS, ZMQ_MAX_SOCKETS_DFLT);\n    assert(rc == 0);\n\n    this->Requester = zmq_socket(this->Context, ZMQ_DEALER);\n    this->Subscriber = zmq_socket(this->Context, ZMQ_SUB);\n\n    this->CollabPollItems[0].socket = this->Requester;\n    this->CollabPollItems[1].socket = this->Subscriber;\n  }\n\n  ~vtkOpenVRCollaborationClientInternal()\n  {\n    if (this->Requester)\n    {\n      zmq_close(this->Requester);\n    }\n    if (this->Subscriber)\n    {\n      zmq_close(this->Subscriber);\n    }\n    int rc;\n    do\n    {\n      rc = zmq_ctx_term(this->Context);\n    } while (rc == -1 && errno == EINTR);\n  }\n};\n\nvtkStandardNewMacro(vtkOpenVRCollaborationClient);\n\nvtkOpenVRCollaborationClient::vtkOpenVRCollaborationClient()\n  : Connected(false)\n  , DisplayOwnAvatar(false)\n  , MoveObserver(-1)\n  , Callback(nullptr)\n  , YourLastAvatarUpdateTime(0.0)\n{\n  this->Internal = new vtkOpenVRCollaborationClientInternal();\n\n  this->CollabPort = 5555;\n  // Position MineView Zeromq, default when none is specified.\n  this->CollabSession = \"PMVZ\";\n  this->RetryCount = 1; // start in retry state.\n  this->NeedHeartbeat = 0;\n  this->NeedReply = 0;\n  this->PublishAvailable = false; // publish socket not sending yet.\n\n  this->EventCommand = vtkCallbackCommand::New();\n  this->EventCommand->SetClientData(this);\n  this->EventCommand->SetCallback(vtkOpenVRCollaborationClient::EventCallback);\n\n  // setup default scale callback\n  this->ScaleCallback = [this]() {\n    auto ovrrw = vtkOpenVRRenderWindow::SafeDownCast(this->RenderWindow);\n    return ovrrw ? ovrrw->GetPhysicalScale() : 1.0;\n  };\n}\n\nvtkOpenVRCollaborationClient::~vtkOpenVRCollaborationClient()\n{\n  this->Disconnect();\n  this->EventCommand->Delete();\n  delete this->Internal;\n}\n\nvoid vtkOpenVRCollaborationClient::Log(vtkLogger::Verbosity verbosity, std::string const& msg)\n{\n  if (this->Callback)\n  {\n    this->Callback(msg, verbosity);\n  }\n  else\n  {\n    vtkWarningMacro(<< msg);\n  }\n}\n\nvoid vtkOpenVRCollaborationClient::Disconnect()\n{\n  if (!this->Connected)\n  {\n    return;\n  }\n\n  mvLog(vtkLogger::VERBOSITY_INFO, \"Collab server disconnecting. \" << std::endl);\n\n  if (this->Internal->Requester != nullptr)\n  {\n    zmq_close(this->Internal->Requester);\n  }\n  if (this->Internal->Subscriber != nullptr)\n  {\n    zmq_close(this->Internal->Subscriber);\n  }\n  for (auto it : this->AvatarUpdateTime)\n  {\n    this->Renderer->RemoveActor(this->Avatars[it.first]);\n    this->Avatars.erase(it.first);\n  }\n  this->AvatarUpdateTime.clear();\n\n  if (this->MoveObserver >= 0 && this->RenderWindow && this->RenderWindow->GetInteractor())\n  {\n    this->RenderWindow->GetInteractor()->RemoveObserver(this->MoveObserver);\n    this->MoveObserver = -1;\n  }\n  this->Connected = false;\n  this->CollabID.clear();\n}\n\nvoid vtkOpenVRCollaborationClient::AddArguments(vtksys::CommandLineArguments& arguments)\n{\n  typedef vtksys::CommandLineArguments argT;\n\n  arguments.AddArgument(\"--collab-server\", argT::EQUAL_ARGUMENT, &(this->CollabHost),\n    \"(optional) Connect to collaboration server at this hostname\");\n  arguments.AddArgument(\"--collab-port\", argT::EQUAL_ARGUMENT, &(this->CollabPort),\n    \"(default:5555) Connect to collaboration server at this port\");\n  arguments.AddArgument(\"--collab-session\", argT::EQUAL_ARGUMENT, &(this->CollabSession),\n    \"Connect to a separate collaboration session - each collaborator should use a matching value\");\n  arguments.AddArgument(\"--collab-name\", argT::EQUAL_ARGUMENT, &(this->CollabName),\n    \"Name to display over your avatar to other collaborators\");\n  this->DisplayOwnAvatar = false;\n  arguments.AddBooleanArgument(\"--show-my-avatar\", &this->DisplayOwnAvatar,\n    \"(default false) Show an avatar at my own position.\");\n}\n\nvoid vtkOpenVRCollaborationClient::Render()\n{\n  if (this->Connected)\n  {\n    // if windowed update avatar position based on camera pos\n    if (this->MoveObserver == -1)\n    {\n      this->UpdateAvatarPoseFromCamera();\n    }\n    this->HandleCollabMessage();\n    this->EraseIdleAvatars();\n  }\n}\n\nvoid vtkOpenVRCollaborationClient::UpdateAvatarPoseFromCamera()\n{\n  // act like a Move3D event for the head\n  int idevice = static_cast<int>(vtkEventDataDevice::HeadMountedDisplay);\n  double* pos = this->DevicePoses[idevice].Position.data();\n  double* orient = this->DevicePoses[idevice].Orientation.data();\n  this->HasPoseForDevice[idevice] = true;\n\n  this->Renderer->GetActiveCamera()->GetPosition(pos);\n  auto cori = this->Renderer->GetActiveCamera()->GetOrientationWXYZ();\n\n  // currently have a mismatch between wxyz and euler angles. Convert.\n  this->TempTransform->Identity();\n  this->TempTransform->RotateWXYZ(-cori[0], &cori[1]);\n  // angles need to be rotated 90\n  this->TempTransform->RotateY(90);\n  this->TempTransform->GetOrientation(orient);\n\n  this->SendLatestDevicePoses();\n}\n\nvoid vtkOpenVRCollaborationClient::SendLatestDevicePoses()\n{\n  // don't send a message if we haven't gotten one during the last\n  // heartbeat. View messages, however, are always sent (queued).\n  if (this->RetryCount > 0)\n  {\n    return;\n  }\n\n  // throttle avatar pose updates\n  double currentTime = vtkTimerLog::GetUniversalTime();\n  if (currentTime - this->YourLastAvatarUpdateTime > 0.02)\n  {\n    // package up the device pose messages\n    std::vector<int32_t> devices;\n    std::vector<double> poses;\n    bool haveHead = false;\n    for (int i = 0; i < vtkEventDataNumberOfDevices; ++i)\n    {\n      if (this->HasPoseForDevice[i])\n      {\n        if (i == static_cast<int>(vtkEventDataDevice::HeadMountedDisplay))\n        {\n          haveHead = true;\n        }\n        devices.push_back(i);\n        poses.insert(\n          poses.end(), this->DevicePoses[i].Position.begin(), this->DevicePoses[i].Position.end());\n        poses.insert(poses.end(), this->DevicePoses[i].Orientation.begin(),\n          this->DevicePoses[i].Orientation.end());\n      }\n      this->HasPoseForDevice[i] = false;\n    }\n\n    // if no data ignore\n    // Don't send hand messages without head data\n    if (devices.size() == 0 || !haveHead)\n    {\n      return;\n    }\n\n    double scale = this->ScaleCallback();\n\n    std::vector<vtkOpenVRCollaborationClient::Argument> args;\n    args.resize(3);\n    args[0].SetInt32Vector(devices.data(), static_cast<int32_t>(devices.size()));\n    args[1].SetDoubleVector(poses.data(), static_cast<int32_t>(poses.size()));\n    args[2].SetDouble(scale);\n    this->YourLastAvatarUpdateTime = currentTime;\n    this->SendAMessage(\"A\", args);\n  }\n}\n\nvoid vtkOpenVRCollaborationClient::SendAMessage(\n  std::string const& msgType, std::vector<Argument> const& args)\n{\n  if (this->CollabID.empty())\n  {\n    return;\n  }\n\n  // send header, our ID, session.\n  zmq_send_const(this->Internal->Requester, \"PMVZ\", 4, ZMQ_SNDMORE);\n  zmq_send(this->Internal->Requester, this->CollabID.c_str(), this->CollabID.size(), ZMQ_SNDMORE);\n  zmq_send(this->Internal->Requester, this->CollabSession.c_str(), this->CollabSession.size(),\n    ZMQ_SNDMORE);\n  zmq_send(this->Internal->Requester, msgType.c_str(), msgType.size(), ZMQ_SNDMORE);\n\n  // send the number of arguments\n  uint16_t numArgs = static_cast<uint16_t>(args.size());\n  zmq_send(this->Internal->Requester, &numArgs, sizeof(numArgs), ZMQ_SNDMORE);\n\n  // now send the arguments\n  for (int i = 0; i < numArgs; ++i)\n  {\n    auto& arg = args[i];\n\n    // send the arg type\n    uint16_t type = static_cast<uint16_t>(arg.Type);\n    zmq_send(this->Internal->Requester, &type, sizeof(type), ZMQ_SNDMORE);\n\n    // send the arg count (how many in the vector)\n    uint16_t count = static_cast<uint16_t>(arg.Count);\n    zmq_send(this->Internal->Requester, &count, sizeof(count), ZMQ_SNDMORE);\n\n    // finally send the data\n    switch (arg.Type)\n    {\n      case Double:\n      {\n        zmq_send(this->Internal->Requester, arg.Data.get(), sizeof(double) * arg.Count,\n          (i == numArgs - 1 ? 0 : ZMQ_SNDMORE));\n        break;\n      }\n      case Int32:\n      {\n        zmq_send(this->Internal->Requester, arg.Data.get(), sizeof(int32_t) * arg.Count,\n          (i == numArgs - 1 ? 0 : ZMQ_SNDMORE));\n        break;\n      }\n      case String:\n      {\n        zmq_send(this->Internal->Requester, arg.Data.get(), arg.Count,\n          (i == numArgs - 1 ? 0 : ZMQ_SNDMORE));\n        break;\n      }\n    }\n  }\n}\n\nbool vtkOpenVRCollaborationClient::Argument::GetString(std::string& result)\n{\n  if (this->Type != String || !this->Data)\n  {\n    return false;\n  }\n\n  char* cstr = static_cast<char*>(this->Data.get());\n  // make sure it is terminated\n  cstr[this->Count - 1] = 0;\n  result = std::string(cstr);\n  return true;\n}\n\nvoid vtkOpenVRCollaborationClient::Argument::SetString(std::string const& in)\n{\n  this->Type = String;\n  this->Count = static_cast<uint16_t>(in.size() + 1);\n  char* cdata = static_cast<char*>(malloc(in.size() + 1));\n  this->Data = std::shared_ptr<void>(cdata, free);\n  std::copy(in.begin(), in.end(), cdata);\n  cdata[in.size()] = 0;\n}\n\nbool vtkOpenVRCollaborationClient::Argument::GetStringVector(std::vector<std::string>& result)\n{\n  if (this->Type != String || !this->Data)\n  {\n    return false;\n  }\n\n  char* cstr = static_cast<char*>(this->Data.get());\n  // make sure it is terminated\n  cstr[this->Count - 1] = 0;\n\n  size_t pos = 0;\n  while (pos < this->Count)\n  {\n    std::string tmp = std::string(cstr + pos);\n    result.push_back(tmp);\n    pos += tmp.size() + 1;\n  }\n\n  return true;\n}\n\nvoid vtkOpenVRCollaborationClient::Argument::SetStringVector(std::vector<std::string> const& in)\n{\n  this->Type = String;\n\n  size_t byteCount = 0;\n  for (size_t i = 0; i < in.size(); i++)\n  {\n    byteCount += in[i].size();\n    byteCount++;\n  }\n  this->Count = static_cast<uint16_t>(byteCount);\n\n  char* cdata = static_cast<char*>(malloc(byteCount));\n  this->Data = std::shared_ptr<void>(cdata, free);\n\n  char* cptr = cdata;\n  for (size_t i = 0; i < in.size(); i++)\n  {\n    std::copy(in[i].begin(), in[i].end(), cptr);\n    cptr += in[i].size();\n    *cptr = 0;\n    cptr++;\n  }\n}\n\nbool vtkOpenVRCollaborationClient::Argument::GetDoubleVector(std::vector<double>& result)\n{\n  if (this->Type != Double || !this->Data)\n  {\n    return false;\n  }\n\n  result.resize(this->Count);\n  double* dptr = static_cast<double*>(this->Data.get());\n  std::copy(dptr, dptr + this->Count, result.begin());\n  return true;\n}\n\nvoid vtkOpenVRCollaborationClient::Argument::SetDoubleVector(double const* in, uint16_t size)\n{\n  this->Type = Double;\n  this->Count = size;\n  double* cdata = static_cast<double*>(malloc(sizeof(double) * size));\n  this->Data = std::shared_ptr<void>(cdata, free);\n  std::copy(in, in + size, cdata);\n}\n\nvoid vtkOpenVRCollaborationClient::Argument::SetDouble(double in)\n{\n  this->Type = Double;\n  this->Count = 1;\n  double* cdata = static_cast<double*>(malloc(sizeof(double)));\n  cdata[0] = in;\n  this->Data = std::shared_ptr<void>(cdata, free);\n}\n\nbool vtkOpenVRCollaborationClient::Argument::GetDouble(double& result)\n{\n  if (this->Type != Double || !this->Data || this->Count != 1)\n  {\n    return false;\n  }\n\n  double* dptr = static_cast<double*>(this->Data.get());\n  result = *dptr;\n  return true;\n}\n\nbool vtkOpenVRCollaborationClient::Argument::GetInt32Vector(std::vector<int32_t>& result)\n{\n  if (this->Type != Int32 || !this->Data)\n  {\n    return false;\n  }\n\n  result.resize(this->Count);\n  int32_t* dptr = static_cast<int32_t*>(this->Data.get());\n  std::copy(dptr, dptr + this->Count, result.begin());\n  return true;\n}\n\nvoid vtkOpenVRCollaborationClient::Argument::SetInt32Vector(int32_t const* in, uint16_t size)\n{\n  this->Type = Int32;\n  this->Count = size;\n  int32_t* cdata = static_cast<int32_t*>(malloc(sizeof(int32_t) * size));\n  this->Data = std::shared_ptr<void>(cdata, free);\n  std::copy(in, in + size, cdata);\n}\n\nvoid vtkOpenVRCollaborationClient::Argument::SetInt32(int32_t in)\n{\n  this->Type = Int32;\n  this->Count = 1;\n  int32_t* cdata = static_cast<int32_t*>(malloc(sizeof(int32_t)));\n  cdata[0] = in;\n  this->Data = std::shared_ptr<void>(cdata, free);\n}\n\nbool vtkOpenVRCollaborationClient::Argument::GetInt32(int32_t& result)\n{\n  if (this->Type != Int32 || !this->Data || this->Count != 1)\n  {\n    return false;\n  }\n\n  int32_t* dptr = static_cast<int32_t*>(this->Data.get());\n  result = *dptr;\n  return true;\n}\n\nstd::vector<vtkOpenVRCollaborationClient::Argument>\nvtkOpenVRCollaborationClient::GetMessageArguments()\n{\n  std::vector<Argument> result;\n\n  uint16_t numArgs = 0;\n  zmq_recv(this->Internal->Subscriber, &numArgs, sizeof(numArgs), 0);\n\n  result.resize(numArgs);\n\n  for (int i = 0; i < numArgs; ++i)\n  {\n    Argument& arg = result[i];\n\n    // get the arg type\n    uint16_t argType = Double;\n    zmq_recv(this->Internal->Subscriber, &argType, sizeof(argType), 0);\n    arg.Type = static_cast<ArgumentType>(argType);\n\n    // get the arg count\n    uint16_t argCount = 0;\n    zmq_recv(this->Internal->Subscriber, &argCount, sizeof(argCount), 0);\n    arg.Count = argCount;\n\n    switch (arg.Type)\n    {\n      case Double:\n      {\n        arg.Data = std::shared_ptr<void>(malloc(sizeof(double) * arg.Count), free);\n        auto zresult =\n          zmq_recv(this->Internal->Subscriber, arg.Data.get(), sizeof(double) * arg.Count, 0);\n        if (zresult != sizeof(double) * arg.Count)\n        {\n          vtkErrorMacro(\"failed to get valid argument\");\n        }\n        break;\n      }\n      case Int32:\n      {\n        arg.Data = std::shared_ptr<void>(malloc(sizeof(int32_t) * arg.Count), free);\n        auto zresult =\n          zmq_recv(this->Internal->Subscriber, arg.Data.get(), sizeof(int32_t) * arg.Count, 0);\n        if (zresult != sizeof(int32_t) * arg.Count)\n        {\n          vtkErrorMacro(\"failed to get valid argument\");\n        }\n        break;\n      }\n      case String:\n      {\n        arg.Data = std::shared_ptr<void>(malloc(arg.Count), free);\n        auto zresult = zmq_recv(this->Internal->Subscriber, arg.Data.get(), arg.Count, 0);\n        if (zresult != arg.Count)\n        {\n          vtkErrorMacro(\"failed to get valid argument\");\n        }\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\nvoid vtkOpenVRCollaborationClient::SendAMessage(std::string const& msgType)\n{\n  if (this->CollabID.empty())\n  {\n    return;\n  }\n  // send header, our ID, session.\n  zmq_send_const(this->Internal->Requester, \"PMVZ\", 4, ZMQ_SNDMORE);\n  zmq_send(this->Internal->Requester, this->CollabID.c_str(), this->CollabID.size(), ZMQ_SNDMORE);\n  zmq_send(this->Internal->Requester, this->CollabSession.c_str(), this->CollabSession.size(),\n    ZMQ_SNDMORE);\n  zmq_send(this->Internal->Requester, msgType.c_str(), msgType.size(), 0);\n}\n\nvoid vtkOpenVRCollaborationClient::SendPoseMessage(\n  std::string const& msgType, int index, double pos[3], double dir[3])\n{\n  std::vector<vtkOpenVRCollaborationClient::Argument> args;\n  args.resize(3);\n  args[0].SetInt32(index);\n  args[1].SetDoubleVector(pos, 3);\n  args[2].SetDoubleVector(dir, 3);\n  this->SendAMessage(msgType, args);\n}\n\nvoid vtkOpenVRCollaborationClient::HandleBroadcastMessage(\n  std::string const& otherID, std::string const& type)\n{\n  if (type == \"A\")\n  {\n    std::vector<Argument> args = this->GetMessageArguments();\n\n    std::vector<double> poses;\n    std::vector<int32_t> devices;\n    double ascale = 1.0;\n    if (args.size() != 3 || !args[0].GetInt32Vector(devices) || !args[1].GetDoubleVector(poses) ||\n      !args[2].GetDouble(ascale))\n    {\n      mvLog(vtkLogger::VERBOSITY_ERROR,\n        \"Incorrect arguments for A (avatar pose) collaboration message\" << std::endl);\n      return;\n    }\n\n    // if this update is from us, we ignore it by default.\n    if (otherID != this->CollabID || this->DisplayOwnAvatar)\n    {\n      double scale = this->ScaleCallback();\n      auto avatar = this->GetAvatar(otherID);\n      avatar->SetScale(0.3 * scale);\n\n      bool haveLeft = false;\n      bool haveRight = false;\n      for (size_t i = 0; i < devices.size(); ++i)\n      {\n        vtkEventDataDevice device = static_cast<vtkEventDataDevice>(devices[i]);\n\n        double* updatePos = poses.data() + i * 7;\n        double* updateOrient = poses.data() + i * 7 + 3;\n\n        if (device == vtkEventDataDevice::LeftController)\n        {\n          avatar->SetLeftHandPosition(updatePos);\n          avatar->SetLeftHandOrientation(updateOrient);\n          if (!avatar->GetUseLeftHand())\n          {\n            avatar->UseLeftHandOn();\n          }\n          haveLeft = true;\n        }\n        else if (device == vtkEventDataDevice::RightController)\n        {\n          avatar->SetRightHandPosition(updatePos);\n          avatar->SetRightHandOrientation(updateOrient);\n          if (!avatar->GetUseRightHand())\n          {\n            avatar->UseRightHandOn();\n          }\n          haveRight = true;\n        }\n        else if (device == vtkEventDataDevice::HeadMountedDisplay)\n        {\n          avatar->SetHeadPosition(updatePos);\n          avatar->SetHeadOrientation(updateOrient);\n        }\n        this->AvatarUpdateTime[otherID][static_cast<int>(device)] = vtkTimerLog::GetUniversalTime();\n      }\n\n      // adjust hand positions based on sending avatar scale\n      double adjustment = scale / ascale;\n      auto* headPos = avatar->GetHeadPosition();\n      if (haveRight)\n      {\n        auto* handPos = avatar->GetRightHandPosition();\n        avatar->SetRightHandPosition(headPos[0] + adjustment * (handPos[0] - headPos[0]),\n          headPos[1] + adjustment * (handPos[1] - headPos[1]),\n          headPos[2] + adjustment * (handPos[2] - headPos[2]));\n      }\n      if (haveLeft)\n      {\n        auto* handPos = avatar->GetLeftHandPosition();\n        avatar->SetLeftHandPosition(headPos[0] + adjustment * (handPos[0] - headPos[0]),\n          headPos[1] + adjustment * (handPos[1] - headPos[1]),\n          headPos[2] + adjustment * (handPos[2] - headPos[2]));\n      }\n    }\n\n    // Check if we were idle, and re-send join messages.\n    if (otherID == this->CollabID && this->AvatarIdle(this->CollabID))\n    {\n      mvLog(vtkLogger::VERBOSITY_INFO, \"Collab \" << otherID << \" return from idle \" << std::endl);\n\n      std::vector<vtkOpenVRCollaborationClient::Argument> args2;\n      args2.resize(1);\n      args2[0].SetString(this->CollabID);\n      this->SendAMessage(\"J\", args2);\n    }\n  }\n  else if (type == \"J\")\n  {\n    std::vector<Argument> args = this->GetMessageArguments();\n\n    std::string extraID;\n    if (args.size() != 1 || !args[0].GetString(extraID))\n    {\n      mvLog(vtkLogger::VERBOSITY_ERROR,\n        \"Incorrect arguments for J (join) collaboration message\" << std::endl);\n      return;\n    }\n\n    // Join message, send our list of views.\n    // if we are idle, don't respond to join messages - send a join when\n    // we are not idle anymore.\n    if (this->AvatarIdle(this->CollabID))\n    {\n      return;\n    }\n    mvLog(vtkLogger::VERBOSITY_INFO, \"Collab \" << otherID << \", Join\" << std::endl);\n    if (!this->CollabName.empty())\n    {\n      std::vector<vtkOpenVRCollaborationClient::Argument> args2;\n      args2.resize(1);\n      args2[0].SetString(this->CollabName);\n      this->SendAMessage(\"N\", args2);\n    }\n  }\n  else if (type == \"SR\" || type == \"HR\")\n  {\n    // show/hide a ray\n    std::vector<Argument> args = this->GetMessageArguments();\n    int32_t device;\n    if (args.size() != 1 || !args[0].GetInt32(device))\n    {\n      mvLog(vtkLogger::VERBOSITY_ERROR,\n        \"Incorrect arguments for SR/HR (ray) collaboration message\" << std::endl);\n      return;\n    }\n\n    bool show = (type == \"SR\");\n    if (this->Avatars.count(otherID) != 0)\n    {\n      auto avatar = this->GetAvatar(otherID);\n      if (device == static_cast<int>(vtkEventDataDevice::LeftController))\n      {\n        avatar->SetLeftShowRay(show);\n      }\n      else if (device == static_cast<int>(vtkEventDataDevice::RightController))\n      {\n        avatar->SetRightShowRay(show);\n      }\n      double scale = this->ScaleCallback();\n      avatar->SetRayLength(RAY_LENGTH * scale);\n    }\n  }\n  else if (type == \"N\")\n  {\n    std::vector<Argument> args = this->GetMessageArguments();\n    // Set avatar's name, displayed above head.\n    std::string avatarName;\n    if (args.size() != 1 || !args[0].GetString(avatarName))\n    {\n      mvLog(vtkLogger::VERBOSITY_ERROR,\n        \"Incorrect arguments for N (name) collaboration message\" << std::endl);\n      return;\n    }\n    mvLog(vtkLogger::VERBOSITY_INFO, \"Collab \" << otherID << \", Name \" << avatarName << std::endl);\n    if (!avatarName.empty() && otherID != this->CollabID)\n    {\n      this->GetAvatar(otherID)->SetLabel(avatarName.c_str());\n    }\n  }\n}\n\nvtkSmartPointer<vtkOpenGLAvatar> vtkOpenVRCollaborationClient::GetAvatar(std::string otherID)\n{\n  // if it's from a new collaborator, add an avatar\n  if (this->Avatars.count(otherID) == 0)\n  {\n    mvLog(vtkLogger::VERBOSITY_INFO, \"Adding Avatar \" << otherID << std::endl);\n    this->Avatars[otherID] = vtkSmartPointer<vtkOpenGLAvatar>::New();\n    auto newAvatar = this->Avatars[otherID];\n    this->Renderer->AddActor(newAvatar);\n    // meters -> ft conversion.\n    double scale = this->ScaleCallback();\n    newAvatar->SetScale(0.3 * scale);\n    newAvatar->SetUpVector(0, 0, 1);\n    size_t colorIndex = this->Avatars.size() - 1;\n    // base the color on the server's index of avatars.\n    try\n    {\n      colorIndex = std::stoi(otherID);\n    }\n    catch (...)\n    {\n    }\n    newAvatar->GetProperty()->SetColor(AVATAR_COLORS[(colorIndex) % NUM_COLORS]);\n    newAvatar->GetLabelTextProperty()->SetColor(AVATAR_COLORS[(colorIndex) % NUM_COLORS]);\n    newAvatar->GetLabelTextProperty()->SetFontSize(16);\n    if (otherID == this->CollabID)\n    {\n      // Display only the hands\n      newAvatar->SetShowHandsOnly(true);\n      auto ovrrw = vtkOpenVRRenderWindow::SafeDownCast(this->RenderWindow);\n      if (ovrrw)\n      {\n        vtkOpenVRModel* cmodel = ovrrw->GetTrackedDeviceModel(vtkEventDataDevice::LeftController);\n        if (cmodel)\n        {\n          cmodel->SetVisibility(false);\n        }\n        cmodel = ovrrw->GetTrackedDeviceModel(vtkEventDataDevice::RightController);\n        if (cmodel)\n        {\n          cmodel->SetVisibility(false);\n        }\n      }\n    }\n    for (int i = 0; i < vtkEventDataNumberOfDevices; ++i)\n    {\n      this->AvatarUpdateTime[otherID][i] = 0;\n    }\n  }\n  return this->Avatars[otherID];\n}\n\nvoid vtkOpenVRCollaborationClient::HandleCollabMessage()\n{\n  double currTime = vtkTimerLog::GetUniversalTime();\n  bool receivedMsg = true;\n  do\n  {\n    // timeout is 0, return immediately.\n    zmq_poll(&(this->Internal->CollabPollItems)[0], 2, 0);\n    if (this->Internal->CollabPollItems[0].revents & ZMQ_POLLIN)\n    {\n      // reply on the request-reply (dealer) socket - expect ID or error.\n      std::string reply = _zmq_string_recv(this->Internal->Requester, ZMQ_DONTWAIT);\n      if (reply == \"ERROR\")\n      {\n        mvLog(vtkLogger::VERBOSITY_ERROR, \"Collab server returned error \" << std::endl);\n      }\n      else if (reply == \"pong\")\n      {\n        // update server alive time, below.\n      }\n      else if (reply.empty())\n      {\n        // error, do nothing.\n        mvLog(vtkLogger::VERBOSITY_ERROR, \"Error: empty reply \" << std::endl);\n      }\n      else\n      {\n        this->CollabID = reply;\n        mvLog(vtkLogger::VERBOSITY_INFO, \"Received ID \" << this->CollabID << std::endl);\n        this->RetryCount = 0;\n        // ideally send \"J\" join message here, but pub-sub not ready yet.\n      }\n    }\n\n    // handle broadcast messages\n    //\n    // A - avatar position update\n    // J - New client joined message\n    // N - Client name\n    // SR/HR - show or hide a ray\n    // V - View change\n    // P - New TourStop\n    // VL - ViewList\n    //\n    if (this->Internal->CollabPollItems[1].revents & ZMQ_POLLIN)\n    {\n      std::string sig = _zmq_string_recv(this->Internal->Subscriber, ZMQ_DONTWAIT);\n      if (sig.size())\n      {\n        // verify the signature\n        // we can get bad data, so make sure the first message contains the\n        // correct data before requesting other pieces (which could block\n        // and hang the app if the data was bad)\n        if (sig == this->CollabSession)\n        {\n          // the first sub-msg contains the session string for the subscription\n          //  process other avatar updates\n          std::string otherID = _zmq_string_recv(this->Internal->Subscriber, ZMQ_DONTWAIT);\n          std::string type = _zmq_string_recv(this->Internal->Subscriber, ZMQ_DONTWAIT);\n          if (otherID.empty() || type.empty())\n          {\n            // error, ignore\n            mvLog(vtkLogger::VERBOSITY_ERROR, \"empty ID or ID \" << otherID << \",  \" << type);\n            _zmq_sock_clear(this->Internal->Subscriber);\n            continue;\n          }\n\n          this->HandleBroadcastMessage(otherID, type);\n        }\n        else\n        {\n          mvLog(vtkLogger::VERBOSITY_ERROR,\n            \"Error: mismatched session header with signature of: \" << sig);\n          _zmq_sock_clear(this->Internal->Subscriber);\n        }\n\n        // we got a message on the publish socket, see if this is the first one.\n        if (!this->PublishAvailable)\n        {\n          this->PublishAvailable = true;\n          // send join message, to trigger view setup.\n          std::vector<vtkOpenVRCollaborationClient::Argument> args;\n          args.resize(1);\n          args[0].SetString(this->CollabID);\n          this->SendAMessage(\"J\", args);\n        }\n      }\n      else\n      {\n        mvLog(vtkLogger::VERBOSITY_ERROR, \"Error: empty session header\");\n        _zmq_sock_clear(this->Internal->Subscriber);\n        continue;\n      }\n    }\n\n    receivedMsg = (this->Internal->CollabPollItems[0].revents & ZMQ_POLLIN ||\n      this->Internal->CollabPollItems[1].revents & ZMQ_POLLIN);\n    if (receivedMsg)\n    {\n      // got a message, reset heartbeat.\n      this->NeedHeartbeat = currTime + HEARTBEAT_INTERVAL;\n      this->NeedReply = currTime + HEARTBEAT_INTERVAL * LIVE_COUNT;\n      this->RetryCount = 0;\n    }\n    else if (currTime > this->NeedHeartbeat && !this->CollabID.empty())\n    {\n      // heartbeat only if we have an ID. send ping, expect pong\n      if (this->RetryCount == 0)\n      {\n        this->RetryCount = 1;\n      }\n      zmq_send_const(this->Internal->Requester, \"ping\", 4, ZMQ_SNDMORE);\n      zmq_send(this->Internal->Requester, this->CollabID.c_str(), this->CollabID.size(), 0);\n      this->NeedHeartbeat = currTime + HEARTBEAT_INTERVAL;\n    }\n\n    // if heartbeat fails multiple times\n    if (currTime > this->NeedReply)\n    {\n      if (this->RetryCount > LIVE_COUNT)\n      {\n        this->NeedReply = currTime + HEARTBEAT_INTERVAL * LIVE_COUNT * this->RetryCount;\n        mvLog(vtkLogger::VERBOSITY_WARNING, \"Collab server disconnected, waiting. \" << std::endl);\n      }\n      else\n      {\n        mvLog(vtkLogger::VERBOSITY_WARNING,\n          \"Collab server not responding, retry \" << this->RetryCount << std::endl);\n        ++this->RetryCount;\n        // disconnect and reconnect sockets, clear ID\n        this->Initialize(this->Renderer);\n      }\n    }\n  } while (receivedMsg);\n}\n\nbool vtkOpenVRCollaborationClient::AvatarIdle(std::string id)\n{\n  double currTime = vtkTimerLog::GetUniversalTime();\n  auto times = this->AvatarUpdateTime[id];\n\n  // if we've never received a head position message, the avatar isn't idle.\n  if (times[0] == 0)\n  {\n    return false;\n  }\n\n  double avatarTime = times[0];\n  // consider ourselves idle slightly before any collaborators do, avoiding races.\n  double timeout = id == this->CollabID ? 0.98 * AVATAR_TIMEOUT : AVATAR_TIMEOUT;\n  return (currTime - avatarTime > timeout);\n}\n\nvoid vtkOpenVRCollaborationClient::EraseIdleAvatars()\n{\n  double currTime = vtkTimerLog::GetUniversalTime();\n  for (auto it : this->AvatarUpdateTime)\n  {\n    if (it.second[0] == 0)\n    {\n      continue;\n    }\n    double avatarTime = it.second[0];\n    if (currTime - avatarTime > AVATAR_TIMEOUT && it.first != this->CollabID &&\n      this->Avatars.count(it.first) != 0)\n    {\n      mvLog(vtkLogger::VERBOSITY_INFO, \"Removing Avatar: \" << it.first << std::endl);\n      this->Renderer->RemoveActor(this->Avatars[it.first]);\n      this->Avatars.erase(it.first);\n      this->AvatarUpdateTime.erase(it.first);\n      // send join message, to trigger view setup.\n      std::vector<vtkOpenVRCollaborationClient::Argument> args;\n      args.resize(1);\n      args[0].SetString(this->CollabID);\n      this->SendAMessage(\"J\", args);\n      break;\n    }\n\n    if (this->Avatars.count(it.first) == 0)\n    {\n      continue;\n    }\n\n    // see if the hands are idle, or not present at all.\n    int device = static_cast<int>(vtkEventDataDevice::LeftController);\n    if (currTime - it.second[device] > AVATAR_TIMEOUT)\n    {\n      auto currAvatar = this->Avatars[it.first];\n      if (currAvatar->GetUseLeftHand())\n      {\n        currAvatar->UseLeftHandOff();\n      }\n    }\n    device = static_cast<int>(vtkEventDataDevice::RightController);\n    if (currTime - it.second[device] > AVATAR_TIMEOUT)\n    {\n      auto currAvatar = this->Avatars[it.first];\n      if (currAvatar->GetUseRightHand())\n      {\n        currAvatar->UseRightHandOff();\n      }\n    }\n  }\n}\n\nvoid vtkOpenVRCollaborationClient::EventCallback(\n  vtkObject*, unsigned long eventID, void* clientdata, void* calldata)\n{\n  vtkOpenVRCollaborationClient* self = static_cast<vtkOpenVRCollaborationClient*>(clientdata);\n\n  if (eventID == vtkCommand::Move3DEvent)\n  {\n    vtkEventData* edata = static_cast<vtkEventData*>(calldata);\n    vtkEventDataDevice3D* edd = edata->GetAsEventDataDevice3D();\n    if (!edd)\n    {\n      return;\n    }\n\n    auto device = edd->GetDevice();\n    int idevice = static_cast<int>(device);\n    if (device == vtkEventDataDevice::LeftController ||\n      device == vtkEventDataDevice::RightController ||\n      device == vtkEventDataDevice::HeadMountedDisplay)\n    {\n      double* pos = self->DevicePoses[idevice].Position.data();\n      double* orient = self->DevicePoses[idevice].Orientation.data();\n      edd->GetWorldPosition(pos);\n      // empirically, the Oculus sometimes gives nonsense positions\n      if (fabs(pos[0]) > 1e07)\n      {\n        return;\n      }\n      double wxyz[4] = { 0 };\n      edd->GetWorldOrientation(wxyz);\n\n      // currently have a mismatch between wxyz and euler angles. Convert.\n      self->TempTransform->Identity();\n      self->TempTransform->RotateWXYZ(wxyz[0], &wxyz[1]);\n      // angles need to be rotated 90\n      self->TempTransform->RotateY(90);\n      self->TempTransform->GetOrientation(orient);\n\n      // hands are also too far forward in x.\n      if (device != vtkEventDataDevice::HeadMountedDisplay)\n      {\n        double adjust[3] = { -0.15, 0, 0 };\n        self->TempTransform->TransformPoint(adjust, adjust);\n        pos[0] += adjust[0];\n        pos[1] += adjust[1];\n        pos[2] += adjust[2];\n      }\n      self->HasPoseForDevice[idevice] = true;\n      self->SendLatestDevicePoses();\n    }\n    return;\n  }\n}\n\n// disconnect if needed, then connect to server.\n// Retry count is set externally.\nbool vtkOpenVRCollaborationClient::Initialize(vtkOpenGLRenderer* ren)\n{\n  if (!ren)\n  {\n    return false;\n  }\n\n  this->Renderer = ren;\n  this->RenderWindow = static_cast<vtkOpenGLRenderWindow*>(ren->GetVTKWindow());\n\n  if (this->CollabHost.empty())\n  {\n    return false;\n  }\n\n  if (this->RetryCount == 1)\n  {\n    mvLog(vtkLogger::VERBOSITY_INFO, \"Connecting to collaboration server...\" << std::endl);\n  }\n  std::stringstream ss;\n  ss << \"tcp://\" << this->CollabHost << \":\" << this->CollabPort;\n  std::string requesterEndpoint = ss.str();\n  ss.str(std::string());\n  ss << \"tcp://\" << this->CollabHost << \":\" << (this->CollabPort + 1);\n  std::string subscriberEndpoint = ss.str();\n  if (this->Internal->Requester != nullptr)\n  {\n    zmq_close(this->Internal->Requester);\n  }\n  if (this->Internal->Subscriber != nullptr)\n  {\n    zmq_close(this->Internal->Subscriber);\n  }\n  this->Connected = false;\n  this->Internal->Requester = zmq_socket(this->Internal->Context, ZMQ_DEALER);\n  this->Internal->Subscriber = zmq_socket(this->Internal->Context, ZMQ_SUB);\n\n  zmq_connect(this->Internal->Requester, requesterEndpoint.c_str());\n  zmq_connect(this->Internal->Subscriber, subscriberEndpoint.c_str());\n  // Subscribe to messages for our session, subscription required by zmq\n  // We won't receive messages from other sessions.\n  zmq_setsockopt(this->Internal->Subscriber, ZMQ_SUBSCRIBE, this->CollabSession.c_str(),\n    this->CollabSession.size());\n  // once we close, we want the socket to close immediately, and drop messages.\n  int linger = 0;\n  zmq_setsockopt(this->Internal->Requester, ZMQ_LINGER, &linger, sizeof(linger));\n  this->Internal->CollabPollItems[0].socket = this->Internal->Requester;\n  this->Internal->CollabPollItems[1].socket = this->Internal->Subscriber;\n  this->Connected = true;\n\n  this->CollabID.clear();\n  double currTime = vtkTimerLog::GetUniversalTime();\n  this->NeedHeartbeat = currTime + HEARTBEAT_INTERVAL;\n  this->NeedReply = currTime + HEARTBEAT_INTERVAL * LIVE_COUNT * this->RetryCount;\n  this->PublishAvailable = false;\n  zmq_send_const(this->Internal->Requester, \"HelloPMVZ\", 9, 0);\n  // async reply, so get ID in HandleCollabMessage()\n\n  // add observer based on VR versus windowed\n  if (this->RenderWindow->IsA(\"vtkOpenVRRenderWindow\"))\n  {\n    if (this->MoveObserver == -1)\n    {\n      this->MoveObserver = this->RenderWindow->GetInteractor()->AddObserver(\n        vtkCommand::Move3DEvent, this->EventCommand, 1.0);\n    }\n  }\n\n  return true;\n}\n\n//------------------------------------------------------------------------------\nvoid vtkOpenVRCollaborationClient::PrintSelf(ostream& os, vtkIndent indent)\n{\n  this->Superclass::PrintSelf(os, indent);\n}\n",
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRCollaborationClient.cxx",
					"file_size": 37022,
					"file_write_time": 132708273882336044,
					"settings":
					{
						"buffer_size": 37022,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "# MenuRepresentation\n\n# MenuWidget\n\n# PanelRepresentation\n\n# PanelWidget\n\n# Renderer\n\nFloorActor, ResetCamera, MakeCamera\n\nNeed to define GetFloorTransform\n\n# RenderWindow\n\nFramebufferDesc, GetRenderBufferSize + textureId\n\n# OpenGLAvatar\n\n# Ray\n\n# Camera\n\n# CollaborationClient\n\n# ControlsHelper\n\n# DefaultOverlay\n\n# Follower\n\n# HardwarePicker\n\n# InteractorStyle\n\n# Model\n\n# Overlay\n\n# OverlayInternal\n\n# RenderWindowInteractor\n\n\n\n\n",
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/readme.md",
					"file_size": 437,
					"file_write_time": 132748747816189315,
					"settings":
					{
						"buffer_size": 432,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenGL2/vtkSSAOPass.h",
					"settings":
					{
						"buffer_size": 4266,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenGL2/vtkSSAOPass.cxx",
					"settings":
					{
						"buffer_size": 20434,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRCamera.cxx",
					"settings":
					{
						"buffer_size": 10188,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRCamera.h",
					"settings":
					{
						"buffer_size": 2758,
						"encoding": "UTF-8",
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"wo",
						"Word Wrap: Toggle"
					],
					[
						"wor",
						"Word Wrap: Toggle"
					],
					[
						"w",
						"Word Wrap: Toggle"
					],
					[
						"bla",
						"Git Blame: Erase All"
					],
					[
						"blam",
						"Git Blame: Show All"
					],
					[
						"side",
						"View: Toggle Side Bar"
					],
					[
						"insta",
						"Package Control: Install Package"
					],
					[
						"remove",
						"Package Control: Remove Package"
					],
					[
						"syntax mark",
						"Set Syntax: MultiMarkdown"
					],
					[
						"mar",
						"Set Syntax: Markdown"
					],
					[
						"color",
						"MarkdownEditing: Change color scheme..."
					],
					[
						"synta",
						"Set Syntax: C++"
					],
					[
						"close",
						"File: Close All"
					],
					[
						"markdow sy",
						"Set Syntax: Markdown GFM"
					],
					[
						"markdown sy",
						"Set Syntax: Markdown"
					],
					[
						"markdown",
						"MarkdownEditing: Open Journal"
					],
					[
						"syntax mar",
						"Set Syntax: Markdown GFM"
					],
					[
						"mark",
						"Set Syntax: Markdown"
					],
					[
						"instal",
						"Package Control: Install Package"
					]
				],
				"width": 0.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/home/lfxpaul/dev/vtk/vtk2/vtk",
				"/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering",
				"/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR",
				"/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR"
			],
			"file_history":
			[
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMMaterialLibraryProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspector.xml",
				"/home/lfxpaul/dev/pv1/paraview/Examples/Catalyst2/CxxMultimesh/catalyst_pipeline.py",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkGeometryRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMPVRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMRepresentationProxy.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/EmbossingRepresentations/Representations/vtkBumpMapRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkSMChartSeriesSelectionDomain.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Plugins/LagrangianParticleTracker/pqIntegrationModelSurfaceHelperWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Core/vtkPVDataInformation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataInformationModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqApplyBehavior.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqServer.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyInformationWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestCategoricalMultiBlock.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/Resources/views_and_representations.xml",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkPVCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/Views/vtkCompositeRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyHelper.h",
				"/tmp/mozilla_lfxpaul0/vtkSPOSFix.txx",
				"/home/lfxpaul/dev/pv1/paraview/Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestCameraWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqPipelineSource.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMSourceProxy.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositePolyDataMapper.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/DataModel/vtkCompositeDataSet.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Common/ExecutionModel/vtkAlgorithmOutput.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Rendering/OpenGL2/vtkCompositePolyDataMapper2.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/Resources/UI/pqMultiBlockInspectorWidget.ui",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqMultiBlockInspectorWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqDataAssemblyTreeModel.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqDataAssemblyPropertyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Components/pqProxyWidget.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Remoting/ServerManager/vtkSMPropertyIterator.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/ApplicationComponents/pqCameraToolbar.cxx",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqRepresentation.cxx",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkView.h",
				"/home/lfxpaul/dev/pv1/paraview/VTK/Views/Core/vtkDataRepresentation.h",
				"/home/lfxpaul/dev/pv1/paraview/Qt/Core/pqView.cxx",
				"/home/lfxpaul/dev/notes/CEA.md",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkStreamingDemandDrivenPipeline.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Widgets/pqLineEdit.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Interaction/Widgets/Testing/Cxx/TestResliceCursorWidget3.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayStereo.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/OpenGL2/vtkOpenGLRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkRenderWindow.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/ServerManager/vtkSMBoundsDomain.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/Core/vtkInformationKey.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.h",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Common/ExecutionModel/vtkAlgorithm.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Clients/ParaView/Testing/Python/TestStereoSaveScreenshot.py",
				"/home/lfxpaul/dev/pv3/paraview/VTK/Rendering/Core/vtkStereoCompositor.h",
				"/home/lfxpaul/dev/pv3/paraview/Qt/Components/pqDoubleVectorPropertyWidget.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.cxx",
				"/home/lfxpaul/dev/pv3/paraview/Remoting/Views/vtkSMMaterialProxy.h",
				"/home/lfxpaul/dev/data/pbr/dirToAngle.py",
				"/home/lfxpaul/dev/notes/zSpace/HomePage.md"
			],
			"find":
			{
				"height": 26.0
			},
			"find_in_files":
			{
				"height": 135.0,
				"where_history":
				[
					"Rendering/VR/*.h"
				]
			},
			"find_state":
			{
				"case_sensitive": true,
				"find_history":
				[
					"= 0",
					"vtkOpenVRModel",
					"getElbowPosition",
					"vtkOpenVRCamera",
					"vtkOpenVRRenderWindow",
					"GetHMDEyeProjections",
					"RightEyeProjection"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "/home/lfxpaul/dev/vtk/vtk2/vtk"
				}
			],
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenXR/vtkOpenXRCamera.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3482,
								"regions":
								{
								},
								"selection":
								[
									[
										2375,
										2375
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2716,
												2717
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												2266,
												2267
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 703.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/VR/vtkVRPanelRepresentation.h",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 5595,
								"regions":
								{
								},
								"selection":
								[
									[
										3115,
										3115
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												5584,
												5585
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												1384,
												1385
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 720.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 3981,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												253,
												256
											],
											[
												413,
												416
											],
											[
												524,
												527
											],
											[
												806,
												809
											],
											[
												983,
												986
											],
											[
												1158,
												1161
											],
											[
												1209,
												1212
											],
											[
												1284,
												1287
											],
											[
												1359,
												1362
											],
											[
												1539,
												1542
											],
											[
												1801,
												1804
											],
											[
												2036,
												2039
											],
											[
												2212,
												2215
											],
											[
												2465,
												2468
											],
											[
												2732,
												2735
											],
											[
												2974,
												2977
											],
											[
												3114,
												3117
											],
											[
												3280,
												3283
											],
											[
												3415,
												3418
											],
											[
												3469,
												3472
											],
											[
												3646,
												3649
											],
											[
												3691,
												3694
											],
											[
												3736,
												3739
											],
											[
												3874,
												3877
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
											"1":
											[
												1626,
												1627
											]
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"detect_indentation": false,
									"line_numbers": false,
									"output_tag": 1,
									"result_base_dir": "",
									"result_file_regex": "^([^ \t].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						},
						{
							"buffer": 3,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRCollaborationClient.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 37022,
								"regions":
								{
								},
								"selection":
								[
									[
										768,
										768
									],
									[
										25178,
										25178
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												770,
												771
											],
											"2":
											[
												25505,
												25506
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/double_quote.png",
												"region.greenish"
											],
											"2":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												753,
												754
											],
											"2":
											[
												25154,
												25155
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 13567.0,
								"zoom_level": 1.0
							},
							"stack_index": 7,
							"type": "text"
						},
						{
							"buffer": 4,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/GenericVR/readme.md",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 432,
								"regions":
								{
								},
								"selection":
								[
									[
										278,
										278
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"syntax": "Packages/MarkdownEditing/Markdown.sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 122.0,
								"zoom_level": 1.0
							},
							"stack_index": 5,
							"type": "text"
						},
						{
							"buffer": 5,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenGL2/vtkSSAOPass.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 4266,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"auto_complete_triggers":
									[
										{
											"characters": "<",
											"selector": "text.html"
										},
										{
											"characters": ".<>:\"/",
											"selector": "source.c++, source.cxx"
										}
									],
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
										},
										"icon":
										{
										},
										"open":
										{
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true,
									"word_wrap": true
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 6,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenGL2/vtkSSAOPass.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 20434,
								"regions":
								{
								},
								"selection":
								[
									[
										8039,
										8039
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												8038,
												8039
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												7965,
												7966
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 8529.0,
								"zoom_level": 1.0
							},
							"stack_index": 4,
							"type": "text"
						}
					]
				},
				{
					"selected": 1,
					"sheets":
					[
						{
							"buffer": 7,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRCamera.cxx",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 10188,
								"regions":
								{
								},
								"selection":
								[
									[
										2317,
										2317
									],
									[
										7160,
										7160
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												3363,
												3364
											],
											"2":
											[
												7161,
												7162
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											],
											"2":
											[
												"Packages/BracketHighlighter/icons/square_bracket.png",
												"region.bluish"
											]
										},
										"open":
										{
											"1":
											[
												1584,
												1585
											],
											"2":
											[
												7159,
												7160
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 3248.0,
								"zoom_level": 1.0
							},
							"stack_index": 8,
							"type": "text"
						},
						{
							"buffer": 8,
							"file": "/home/lfxpaul/dev/vtk/vtk2/vtk/Rendering/OpenVR/vtkOpenVRCamera.h",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2758,
								"regions":
								{
								},
								"selection":
								[
									[
										1993,
										1993
									]
								],
								"settings":
								{
									"bracket_highlighter.busy": false,
									"bracket_highlighter.locations":
									{
										"close":
										{
											"1":
											[
												2747,
												2748
											]
										},
										"icon":
										{
											"1":
											[
												"Packages/BracketHighlighter/icons/curly_bracket.png",
												"region.purplish"
											]
										},
										"open":
										{
											"1":
											[
												1151,
												1152
											]
										},
										"unmatched":
										{
										}
									},
									"bracket_highlighter.regions":
									[
										"bh_curly",
										"bh_curly_center",
										"bh_curly_open",
										"bh_curly_close",
										"bh_curly_content",
										"bh_single_quote",
										"bh_single_quote_center",
										"bh_single_quote_open",
										"bh_single_quote_close",
										"bh_single_quote_content",
										"bh_c_define",
										"bh_c_define_center",
										"bh_c_define_open",
										"bh_c_define_close",
										"bh_c_define_content",
										"bh_regex",
										"bh_regex_center",
										"bh_regex_open",
										"bh_regex_close",
										"bh_regex_content",
										"bh_default",
										"bh_default_center",
										"bh_default_open",
										"bh_default_close",
										"bh_default_content",
										"bh_square",
										"bh_square_center",
										"bh_square_open",
										"bh_square_close",
										"bh_square_content",
										"bh_unmatched",
										"bh_unmatched_center",
										"bh_unmatched_open",
										"bh_unmatched_close",
										"bh_unmatched_content",
										"bh_double_quote",
										"bh_double_quote_center",
										"bh_double_quote_open",
										"bh_double_quote_close",
										"bh_double_quote_content",
										"bh_round",
										"bh_round_center",
										"bh_round_open",
										"bh_round_close",
										"bh_round_content",
										"bh_tag",
										"bh_tag_center",
										"bh_tag_open",
										"bh_tag_close",
										"bh_tag_content",
										"bh_angle",
										"bh_angle_center",
										"bh_angle_open",
										"bh_angle_close",
										"bh_angle_content"
									],
									"lsp_active": true,
									"lsp_language":
									{
										"clangd": "cpp"
									},
									"show_definitions": false,
									"syntax": "Packages/C++/C++.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true,
									"word_wrap": true
								},
								"translation.x": 0.0,
								"translation.y": 246.0,
								"zoom_level": 1.0
							},
							"stack_index": 6,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 26.0
			},
			"input":
			{
				"height": 50.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.diagnostics":
			{
				"height": 48.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"output.mdpopups":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "1,0,0,0,0,384,34,766,1051,1920,1080",
			"project": "",
			"replace":
			{
				"height": 48.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"SSAO",
						"Rendering/OpenGL2/vtkSSAOPass.h"
					],
					[
						"TestStyleTrack",
						"Interaction/Style/Testing/Python/TestStyleTrackballActor.py"
					],
					[
						"Interaction Style Testing Py Cmak",
						"Interaction/Style/Testing/Python/CMakeLists.txt"
					],
					[
						"CMakeLists Testing Style",
						"Interaction/Style/Testing/CMakeLists.txt"
					],
					[
						"vtkCamera",
						"VTK/Rendering/Core/vtkCamera.cxx"
					],
					[
						"vtkSIProper",
						"Remoting/ServerManager/vtkSIProperty.cxx"
					],
					[
						"vtkSI",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"vtkSIInt",
						"Remoting/ServerManager/vtkSIIntVectorProperty.h"
					],
					[
						"vtkSIIndexS",
						"Remoting/ServerManager/vtkSIIndexSelectionProperty.h"
					],
					[
						"pqC",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeome",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSIProx",
						"Remoting/ServerManager/vtkSIProxy.h"
					],
					[
						"vtkSIP",
						"Remoting/ServerManager/vtkSIProperty.h"
					],
					[
						"vtkSIDataA",
						"Remoting/ServerManager/vtkSIDataArrayProperty.h"
					],
					[
						"vtkPVDataR",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkPVCompo",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProx",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkDataRepre",
						"VTK/Views/Core/vtkDataRepresentation.h"
					],
					[
						"vtkPVDataRepres",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeR",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkPVCompos",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkSMProperty",
						"Remoting/ServerManager/vtkSMProperty.cxx"
					],
					[
						"vtkPVVIew",
						"Remoting/Views/vtkPVView.cxx"
					],
					[
						"pqCam",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkCompositeDataD",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkDataAsse",
						"VTK/Common/DataModel/vtkDataAssemblyUtilities.cxx"
					],
					[
						"pqCamera",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqMul",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"pqCameraT",
						"Qt/ApplicationComponents/Resources/UI/pqCameraToolbar.ui"
					],
					[
						"vtkVectorO",
						"VTK/Common/DataModel/vtkVectorOperators.h"
					],
					[
						"vtkVector",
						"VTK/Common/DataModel/vtkVector.h"
					],
					[
						"TemporalPa",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkTemporalPat",
						"VTK/Filters/General/vtkTemporalPathLineFilter.h"
					],
					[
						"vtkStaticCellLo",
						"VTK/Common/DataModel/vtkStaticCellLocator.h"
					],
					[
						"vtkCompo",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSelect",
						"Remoting/Views/vtkSelectionRepresentation.h"
					],
					[
						"TestParaView",
						"Remoting/Views/Testing/Cxx/TestParaViewPipelineControllerWithRendering.cxx"
					],
					[
						"vtkRotation",
						"VTK/Filters/General/vtkRotationFilter.h"
					],
					[
						"pqCamer",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"vtkGeom",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVRende",
						"Remoting/Views/vtkPVRenderView.cxx"
					],
					[
						"vtkOsprayRender",
						"VTK/Rendering/RayTracing/vtkOSPRayRendererNode.cxx"
					],
					[
						"TestOsprayP",
						"VTK/Rendering/RayTracing/Testing/Cxx/TestOSPRayPass.cxx"
					],
					[
						"vtkOSPRAYMA",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialHelpers.cxx"
					],
					[
						"QVTKOpen",
						"VTK/GUISupport/Qt/QVTKOpenGLNativeWidget.h"
					],
					[
						"pqMate",
						"Qt/ApplicationComponents/Resources/UI/pqMaterialEditor.ui"
					],
					[
						"vtkShaderBal",
						"VTKExtensions/Rendering/vtkShaderBallScene.h"
					],
					[
						"pqMateri",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMMa",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"WriterFac",
						"Remoting/ServerManager/vtkSMWriterFactory.h"
					],
					[
						"pqSaveData",
						"Qt/ApplicationComponents/pqSaveDataReaction.cxx"
					],
					[
						"vtkOSprayMat",
						"VTK/Rendering/RayTracing/vtkOSPRayMaterialLibrary.cxx"
					],
					[
						"vtkSMMateri",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"pqMateria",
						"Qt/ApplicationComponents/pqMaterialEditor.cxx"
					],
					[
						"vtkSMP",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkSMSource",
						"Remoting/ServerManager/vtkSMSourceProxy.h"
					],
					[
						"vtkSMRepre",
						"Remoting/Views/vtkSMRepresentationProxy.h"
					],
					[
						"vtkRenderWIndowInt",
						"Rendering/Core/vtkRenderWindowInteractor3D.cxx"
					],
					[
						"vtkOpenVRRenderW",
						"Rendering/OpenVR/vtkOpenVRRenderWindowInteractor.h"
					],
					[
						"vtkRenderWindowInteract",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkRenderWIndowInte",
						"Rendering/Core/vtkRenderWindowInteractor.cxx"
					],
					[
						"vtkInteractorOb",
						"Rendering/Core/vtkInteractorObserver.h"
					],
					[
						"vtkInteractorStyle.",
						"Rendering/Core/vtkInteractorStyle.cxx"
					],
					[
						"TestPBR",
						"Rendering/OpenGL2/Testing/Cxx/TestPBRAnisotropy.cxx"
					],
					[
						"Renderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderer",
						"Rendering/Core/vtkRenderer.cxx"
					],
					[
						"vtkRenderWindowInte",
						"Rendering/Core/vtkRenderWindowInteractor.h"
					],
					[
						"vtkInteractorStyleCame",
						"Interaction/Style/vtkInteractorStyleTrackballCamera.h"
					],
					[
						"vtkInteractorStyleTra",
						"Interaction/Style/vtkInteractorStyleTrackball.h"
					],
					[
						"Multiblock",
						"Clients/ParaView/Testing/XML/MultiBlockInspectorSelection.xml"
					],
					[
						"t",
						"~/dev/pv1/build/t.xml"
					],
					[
						"vtkSMRenderV",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						"pqAc",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqAct",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqRep",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqDataR",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqDataRp",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqMutli",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"views and",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"Zoom",
						"Clients/ParaView/Testing/XML/ZoomClosest.xml"
					],
					[
						"t.xm",
						"~/dev/pv1/build/t.xml"
					],
					[
						"pqProxyWid",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqBasic",
						"ThirdParty/QtTesting/vtkqttesting/pqBasicWidgetEventPlayer.cxx"
					],
					[
						"pqMulti",
						"Qt/Components/pqMultiBlockInspectorWidget.h"
					],
					[
						"pqEventPl",
						"ThirdParty/QtTesting/vtkqttesting/pqEventPlayer.cxx"
					],
					[
						"vtkSMRender",
						"Remoting/Views/vtkSMRenderViewProxy.cxx"
					],
					[
						".xml",
						"Clients/ParaView/Testing/XML/Flow.xml"
					],
					[
						"PBR xml",
						"Clients/ParaView/Testing/XML/ClearCoatPBR.xml"
					],
					[
						"PBR.xml",
						"Clients/ParaView/Testing/XML/EdgeTintPBR.xml"
					],
					[
						"pqFind",
						"Qt/ApplicationComponents/pqFindDataWidget.h"
					],
					[
						"pqActiveO",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"pqProxyWi",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqProx",
						"Qt/Components/pqProxyWidget.h"
					],
					[
						"pqActi",
						"Qt/Components/pqActiveObjects.h"
					],
					[
						"pqRepse",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"pqActive",
						"Qt/Components/pqActiveObjects.cxx"
					],
					[
						"views and re",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"views and repre",
						"Remoting/Views/Resources/views_and_representations.xml"
					],
					[
						"pqDataRe",
						"Qt/Core/pqDataRepresentation.h"
					],
					[
						"pqCameraTo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"MultiblockInspe",
						"Qt/Components/pqMultiBlockInspectorWidget.cxx"
					],
					[
						"vtkPVGeome",
						"VTKExtensions/FiltersRendering/vtkPVGeometryFilter.cxx"
					],
					[
						"vtkAlgo",
						"VTK/Common/ExecutionModel/vtkAlgorithm.h"
					],
					[
						"vtkSMLink",
						"Remoting/ServerManager/vtkSMLink.h"
					],
					[
						"pqLinkM",
						"Qt/Core/pqLinksModel.h"
					],
					[
						"pqLink",
						"Qt/Components/pqLinksManager.h"
					],
					[
						"vtkPVIn",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVDataInfo",
						"Remoting/Core/vtkPVDataInformation.h"
					],
					[
						"vtkSMMaterial",
						"Remoting/Views/vtkSMMaterialLibraryProxy.cxx"
					],
					[
						"vtkCompositeDataDispl",
						"VTK/Rendering/Core/vtkCompositeDataDisplayAttributes.cxx"
					],
					[
						"vtkGeometryR",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetGe",
						"VTK/Common/Core/vtkSetGet.h"
					],
					[
						"vtkSMProp",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"vtkPVComp",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkGeometry",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkSetG",
						"VTK/Common/Core/vtkSetGet.h"
					],
					[
						"vtkPVCompositeRepresentation",
						"Remoting/Views/vtkPVCompositeRepresentation.h"
					],
					[
						"vtkPVDataRe",
						"Remoting/Views/vtkPVDataRepresentation.h"
					],
					[
						"vtkCompositeRep",
						"Remoting/Views/vtkCompositeRepresentation.h"
					],
					[
						"vtkSMPropertyHe",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"vtkSMPropertyH",
						"Remoting/ServerManager/vtkSMPropertyHelper.cxx"
					],
					[
						"pqMaterial",
						"Qt/ApplicationComponents/pqMaterialAttributesDelegate.cxx"
					],
					[
						"pqCameraToo",
						"Qt/ApplicationComponents/pqCameraToolbar.cxx"
					],
					[
						"pqReprese",
						"Qt/Core/pqRepresentation.h"
					],
					[
						"vtkSMProxy",
						"Remoting/ServerManager/vtkSMProxy.h"
					],
					[
						"vtkGeometr",
						"Remoting/Views/vtkGeometryRepresentation.h"
					],
					[
						"vtkPVInfor",
						"Remoting/Core/vtkPVInformation.h"
					],
					[
						"vtkPVData",
						"Remoting/Core/vtkPVDataInformation.h"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": false,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 319.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 79,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
